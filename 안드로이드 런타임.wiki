[[목차]]



== 정의 ==
기존의 [[달빅]]VM의 한계점을 해결하기 위해서 [[구글]]에서 새로 개발한 런타임.
안드로이드 런타임(Android Runtime)을 줄여서 '''ART'''라고도 부른다.~~성능이 [[예술]]적이라서 ART라 [[카더라]]~~ 


== 배경 ==
안드로이드도 [[Java]] 언어를 사용하기 때문에 VM이 필수적이다. 이에 자바 가상머신(JVM)을 사용할 수 있지만, JVM은 라이선스 문제[* 이는 [[Java]]에 대한 권리가 [[wiki:"오라클#s-7" 다른 곳]]에 있기 때문이다. 자세한 것은 각각 항목 참조.]가 있어서 [[구글]]에서는 Dalvik VM을 따로 개발해서 [[안드로이드]]에 넣었다.

[[달빅]]VM은 무조건 JIT(Just-In-Time) 컴파일러를 포함하고 있다고 말하는 사람들이 있는데, 실은 초창기의 안드로이드에서 사용하는 Dalvik VM에는 JIT 컴파일러가 포함되어 있지 않았다. 안드로이드 2.2 프로요 버전부터 JIT 컴파일러가 추가되었다.

이러한 JIT 컴파일러가 추가되면서 성능은 향상되었다. 그런데 여기서 문제가 생겼다. JIT 컴파일러가 돌아가는데 하드웨어 전체적으로 상당한 부하가 생겨 배터리 시간이 [[안습]]이 되버리는 불상사가 터진 것. 화면 전환이 많을수록[* UI에서라던가...] 배터리는 더욱 더 [[안습]]이 되어버렸다. 게다가 [[달빅]]은 실행 직전에 실행 부분 전체를 [[RAM]]에다가 올려놔야 하기 때문에 각 앱이 다른 [[OS]]보다 램을 [[처묵처묵]]하는 양이 더 많아 램[[고자]]라고도 알려져 있다. 이 때문에 [[안드로이드]]는 한 때 [[iOS]]와 많이 비교되면서 가루가 되도록 까이게 되는 원인이 되어버렸다.

이런 문제를 해결하기 위해서 [[구글]]에서 개발해낸 것이 ART다.

조금 덜 [[공돌이]]스럽게 비유하자면, [[한국인]]과 [[일본인]]이 각각 [[일본어]]와 [[한국어]]를 하지 못하는 상황에서 서로 공통적으로 사용하는 [[영어]]를 이용해 대화를 주고 받는 상황을 생각해볼 수 있다. 이렇게 영어를 매개로 의사소통을 할 경우 모국어와 상관 없이 어떤 국가의 국민과도 대화를 할 수 있을 것이나, 한국인과 한국인이 대화하는 데에마저도 영어를 쓰는 뻘짓을 하느라 해석에 시간을 잡아먹고 있는 것이 ART 적용 이전의 상황.[* 왜 이런 짓을 하느냐 하면, JAVA 자체가 막강한 플랫폼 호환성을 강점으로 내세우고 있기 때문이다. 이런 구조를 취한다면 운영체제가 윈도우든 리눅스든, 하드웨어가 데스크탑이든 스마트폰이든 JAVA를 구동할 수 있는 가상 머신만 존재한다면 무조건 프로그램이 동작한다.]

요약하자면 '''한국인 -> 한국어 -> 영어 -> 한국어 -> 한국인'''이라는 심히 [[골룸]]스러운 구조를 '''한국인 -> 한국어 -> 한국인'''이라는 명료한 구조로 변경한다는 것이다.

=== 왜 이런 구조를 쓰고 있었나? ===
가장 큰 이유는 일단 자바가 배우기 쉽고, 생산성이 높으며, 이미 자바 개발자가 차고 넘치는 데다가, 사용처도 굉장히 넓기 때문이다. '''[프로그래머|자바 두 명이요]'''라는 개드립이 괜히 있는 게 아니다(...)[* 물론 자바 개발자 뿐만 아니라 프로그래머 전체에 대한 열악한 처우에서 나온 말이기는 하지만, 왜 하필 이 드립의 주인공이 자바일까 생각해 보면 답이 나온다.] 상대적으로 후발주자였던 안드로이드가 앱 생태를 쉽게 구축할 수단으로써 자바를 선택했다는 것. 실제 자바의 구조로 인한 성능 저하 문제는 이미 제조 부문에서 뼈가 굵은 세계 유수 전자 제조사의 H/W 능력으로 ~~어디까지나~~어느 정도로는 커버가 가능한 상황이었다.

게다가 하드웨어 아키텍처에 영향을 받지 않는다는 것도 자바가 가진 엄청난 강점. ARM 프로세서에서 동작하는 네이티브 앱은 당연히 x86 프로세서 환경에서 동작하지 않아 코드를 재구축하는 과정이 필요하지만[* 윈도RT를 써본 유저라면 매우 잘 알고 있을 것이다.], 자바 앱이라면 이야기가 다르다. 앱과 하드웨어 사이에 중간 코드 및 가상 머신이 끼어들기 때문에 하드웨어 플랫폼과 무관하게 구동이 가능하다.[* 물론 네이티브 코드로 구성된 앱은 구동이 안 되지만.]


== 성능 개선 ==
ART가 적용된다면 당연히 압도적인 속도 개선을 기대할 수 있으며, 새로운 플랫폼으로써의 안정성만 보장된다면 앱이 동작하는 안드로이드 플랫폼 자체가 [[발적화]] 소리를 들을 일은 사실상 없게 될 것이다.~~물론 앱 개발자가 허접이면 얄짤없지만 그건 어느 플랫폼이나 마찬가지고.~~

안드로이드 4.4 킷캣이 실행 중인 안드로이드 기기에서[* 2014년 9월 현재, 넥서스4, 넥서스5, 넥서스7, 넥서스7(2013) 등이 탑재하고 있다.] 런타임을 ART로 설정해 놓으면, 앱이 설치 될 때 앱에 들어 있는 중간 언어를 모조리 번역을 미리 해 놓는다.[* AOT 컴파일러에 의해 진행된다. 마치 리눅스에서 패키지 관리자를 통해 소스 코드를 받아 make 후 install 하는 것과 같은 느낌으로 보면 된다.] 그 덕분에 기존의 JAVA 기반 앱 플랫폼으로써의 문제점들은 모두 사라지고, 네이티브 언어와 동급의 성능을 체감할 수 있게 되었다. 같은 기기 성능 대비 [[iOS]]와  동등한 성능을 낼 수 있다고 보면 된다.[* 현재 iOS 기기는 최신 제품이라 해봤자 보급형 안드로이드 기기와 비교해 그닥 나을 게 없는 후달리는 하드웨어 스펙을 갖고 있다. 그걸 소프트웨어 최적화라는 ~~허울좋은~~이름으로 땜빵하고 있는 판국이니, 결국 안드로이드 최적화의 최대 걸림돌인 JAVA의 속도 문제가 해결된다면 최적화를 장점으로 내세우고 있는 iOS의 입지도 그만큼 좁아질 수밖에 없다.~~만 어차피 UI랑 기기 디자인이 더 이뻐서 사는 사람이 다수인지라~~]


== 단점 ==
ART도 단점은 있다. 앱을 설치하면 공간을 1.5배에서 2배 가량을 더 많이 차지하고, 설치 속도가 [[달빅]]VM보다 더 느리다는 것. 또한 대부분의 앱은 런타임을 모두 [[달빅]]에 초점을 잡아 개발하기 때문에 [[달빅]]VM에서 잘 돌아가던 앱들이 ART 환경에서는 안 돌아가는 호환성 문제가 발생한다. [* 당연한 소리겠지만 모든 앱이 그러진 않는다.] 그리고, ART는 아직 적용 초기 단계인지라 사용자도 구글도 밝혀내지 못한 잠재적인 문제들이 산재해 있을 가능성이 있다.

CM의 킷캣 커스텀 롬에서는 ART를 선택해도 ART로 바뀌지 않고 달빅으로 계속 유지되는 오류가 있다. 이러한 현상은 런타임을 [[달빅]]을 설정한 상태에서 Xposed Framwork[* XPOSED는 아직까지 ART 런타임을 지원하지 않는다. 안드로이드 롤리팝 런칭 이후에도 Xposed 개발팀은 감감무소식이어서 사용자들의 애를 태웠으나, 몇 개월 지난 뒤 ART를 위한 XPOSED를 개발중이라고 발표했다.그리고 ART를 지원하는 버전이나왔다.불안정하지만]를 설치해놓고, 그 다음 런타임을 다시 ART로 전환할 때나, 2013년 11월부터 2014년 1월 사이에 나온 커스텀롬(CM11 나이틀리 포함)이나 개발자가 자체적으로 ART를 제거한(!) 커스텀롬을 사용할 경우에 발생한다.[*참조 2013년 11월부터 2014년 1월은 안드로이드 킷캣과 ART 런타임이 새로이 출시된 지 얼마 지나지 않은 시기로, ART에 대한 대응 업데이트가 늦어 그 시기에 나왔던 CM11을 포함한 킷캣 커스텀롬들은 대체적으로 ART를 지원하지 않았으나 2014년 1월 이후 모두 지원한다. 단, 요즘 나오는 킷캣 커스텀롬들 중에서도 ART는 삭제하고 오로지 달빅만 런타임으로 돌리는 커스텀롬들도 존재한다.--달빅성애자?-- 아무래도 달빅을 계속 사용하고 싶어하는 유저들을 위해서 일부러 ART를 제거하고 일부러 달빅 최적화에 초점을 맞춘 듯. 각 커스텀 롬마다 ART 제거 여부는 개발자의 xda 포럼이나 개인 홈페이지 내의 체인지 로그 등에 있으니 ART를 사용하고 싶은 위키러는 반드시 확인할 것. 안 그러면 귀찮게시리 롬 다시 밀어야 한다(...).] 
=== 상용 앱의 속도는 얼마나 개선될 것인가? ===
ART 적용 이전에도 코드 보안이나 성능 보장이 매우 중요한 앱 개발은 NDK를 이용한 C/C++ 프로그래밍을 통해 이루어져 왔다. 적지 않은 상용 앱 내부에는 많든 적든 네이티브 코드가 포함되어 있다는 것. 최적화가 될 만큼 되어 있는 이러한 앱들에 대해서는 유의미한 성능 개선이 이루어지지 못할 가능성 역시 존재한다.

=== 오해 ===
배터리 실사용 시간이 ART가 [[달빅]]보다 짧은 경우가 존재한다 [[카더라]]가 있으나 아직 이 문제점은 일부 사용자들에서만 나온 것이라 확실한 건 아니라는 [[카더라]]도 공존한다(...). 혹은 사용하는 커스텀 커널에서의 자체적인 버그 때문일 수도 있다는 [[카더라]] 또한 존재한다(...). [* 배터리 광탈 문제는 사용자 사용 패턴에서부터 롬 혹은 커널의 문제, 최적화 문제 등 무궁무진하게 다양해서 원인을 콕 집어서 말하기 힘들다.] 보통 커스텀 커널을 올리고 나서 CPU(혹은 GPU) 가버너나 I/O 스케줄러, CPU 전압설정 등을 건드리다가 이렇게 된 케이스가 많다. 즉 ART 자체의 문제라 하기는 좀 애매하다는 것. 커스텀 커널을 사용하시는 위키러들은 개발자가 미리 세팅해놓은 기본 커널 설정을 따르자. 괜히 이것저것 건드리다가 배터리가 위 사례처럼 [[고자]]가 된다.~~하지말라면 하지마루요~~


== 적용 ==
[[wiki:"안드로이드(운영체제)/버전#s-13" 안드로이드 5.0 롤리팝(Lolipop)]]부터는 [[달빅]]VM을 완전히 폐지하고 ART를 새로운 런타임으로 완전히 대체했다. 또한 위에 설명했듯이 ART가 라이브러리인 점때문에 x86, mips 아키텍처 및 64비트를 공식적으로 지원하게 되었다.[* 킷캣까지는 x86, mips 아키텍처는 칩셋 제조사나 기기 제조사에서 자체적으로 포팅했다.]


== 기타 ==
ART도 가상 머신이라고 주장하는 사람들이 있는데, ART는 결코 가상 머신이 아니다. 단지, 네이티브로 번역된 안드로이드 앱을 동작시키기 위한 런타임 라이브러리일 뿐이다.[* 이 라이브러리는 안드로이드 시스템 파티션에 'lib_art.so'란 파일로 저장되어 있다.] 가상 머신이란 게 위 영어 공용어의 예처럼 막강한 호환성과 [[등가교환]]하여 성능을 제물로 바치는 구조임을 생각한다면, 이런 사람들은 완전히 개념을 반대로 이해하고 있는 셈(...)
