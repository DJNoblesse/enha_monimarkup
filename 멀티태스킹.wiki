[[목차]]
= [[개요]] =
한 번에 2가지 이상의 [[일]]을 동시에 처리하는 것으로 "다중과업화"라고도 한다.

= [[운영체제]]의 멀티태스킹 =
[[컴퓨터]]는 최초에는 한 번에 하나의 작업만을 처리할 수 있었으나, 프로세서와 [[운영체제]]를 발달시키면서 한 번에 여러가지 작업을 처리할 수 있게 되었다[* [[윈도우즈]]를 예로 들자면 동시에 여러 [[프로그램]]을 윈도우로 돌리는 식.].

현대의 [[운영체제]]는 여러가지 일을 동시에 돌릴 수 있게 하는데, 기본적인 원리는 단순하다. 한 가지 일을 하다가, 잠시 멈추고 또 다른 일을 하고, 또 멈추고 다른 일을 하다 보면 언젠가는 결국 모든 일을 마치게 된다. 이 동작이 엄청 빨라지면 한 번에 여러가지 일을 하는 것'''처럼 보이게''' 되는 것이다. 그림 24장을 그려놓고 1초대로 돌리면 그것이 움직이는 것처럼 보이는 것 마냥, 한 번에 여러가지 동작을 엄청 빨리 하면 그것이 [[분신술]]처럼 보이게 되는 것이 바로 멀티태스킹의 원리이다. 유저 프로그램들은 마치 동시에 실행되는 것처럼 보이지만, 커널 내부에서는 주기적으로 [[CPU]]를 운영체제가 각각의 프로그램에 [[적절]]히 분배하는 작업이 반복되고 있다. 이렇게 프로세스들을 [[적절]]히 분배하는 작업을 스케줄링이라고 한다. 

물론 여러 개의 [[CPU]]의 경우 정말로 CPU의 코어만큼의 작업이 동시에 이루어질 수 있다. 그러나 일반적으로 2~8개의 코어로는 당연히 수십~수백 개의 프로세스[* [[윈도우즈]]의 경우 ctrl+alt+del를 눌러 작업 관리자에서, [[리눅스]]에서는 "ps -A"명령어로 프로세스의 개수를 확인해보자. 대략 백 개가 넘어가는 프로세스들이 서로 부지런히 돌고 있음을 알 수 있다.]를 모두 처리하지 못하므로 각 CPU 코어에서도 작업을 교체하는 일이 수시로 벌어진다. 물론 n개 코어에서 n개의 프로세스가 동시에 실행되긴 하므로 '''잘만 하면''' 멀티 코어를 통해 성능을 끌어올릴 수 있다. 즉, 일감을 [[적절]]히 여러 프로세스에 분배하여 돌리면 [[이론]] 상 여러 개의 코어를 동시에 사용할 수 있으므로 실제로 성능 향상을 가져온다. 이를 위해서는 프로그래밍 시 [[wiki:"멀티코어 프로세서"멀티 코어]]를 활용하는 설계가 필요하다. 그렇지 않으면 코어 하나만 미칠 듯이 돌아가고 나머지 코어들은 시덥지 않은 프로세스들을 깨작깨작 처리할 뿐이다.

그러나 이런 동시 처리는 구현하기 까다롭고 적용할 수 있는 부분도 한정적이다. 멀티코어를 고려하여 프로세스 여러 개에 각 일감을 적절히 싣더라도 2개 코어를 써서 프로그램이 2배 빨라지지는 않는다. 가장 큰 이유는 모든 작업을 '동시'에 처리할 수는 없기 때문이다. 예를 들어 A라는 작업을 수행하는 데 B라는 작업의 결과가 필요하다면, 필연적으로 B를 먼저 수행한 후에만 A를 수행할 수 있다. A와 B를 같이 돌려 봤자 A는 B가 끝나기 전까지 기다릴 수밖에 없다. 때문에 작업에 따라서 멀티태스킹으로 인한 효율이 천차만별이다.

또 다른 속도 증가치가 눈에 띄게 증가하지 않는 이유는 [[운영체제]]가 한 프로세스를 처리하다가 다른 프로세스로 넘어갈 때 컨텍스트 스위칭이라는 작업이 수반된다. 각각의 프로세스는 자신이 사용하고 있는 [[컴퓨터]]의 자원(CPU 레지스터, 메모리 페이지, 파일 디스크립터 테이블 등등)들이 있는데 프로세스 전환 시 사용 중인 자원들도 전환해야 한다. 물론 [[데이터]]를 버릴 수는 없으니 작업 중인 데이터를 저장하고, 다른 프로세스에서 쓸 [[데이터]]를 가져오는데 이 [[시간]]이 생각보다 오래 걸린다. 물론 이러한 전환 작업은 [[사람]]이 느끼기에는 너무나도 짧지만 시스템 전체 [[시간]]으로 환산하면 은근히 차지할 수도 있다.

멀티태스킹에는 두 종류가 있는데 첫 번째는 '''비선점형 멀티태스킹''', 두 번째는 '''선점형 멀티태스킹'''이다.

프로그램은 실행되면 프로세스가 되고 프로세스는 역시 여러 쓰레드를 실행시키는데 여러 프로그램에서 만들어지는 이 쓰레드는 [[CPU]]라는 한정된 자원을 서로 사용하고자 경쟁중인 관계에 있다. 그러므로 [[운영체제]]는 CPU의 시간을 나누어 여러 쓰레드 들에게 돌아가며 실행하도록 하는데, 이 때 CPU를 차지하고 있는 쓰레드가 자신이 이제 CPU 연산이 필요 없음을 나타냈을 때에만 [[운영체제]]가 이를 회수할 수 있는 경우를 비선점형 멀티태스킹이라고 하고, 프로세스가 CPU를 차지해서 사용하더라도 운영체제가 타이머나 여타 트리거를 통해 개입하여 강제로 CPU 사용을 빼앗아 올 수 있는 경우를 선점형 멀티태스킹이라고 한다. 쉽게 말해 [[운영체제]]가 응답없는 프로세스를 강제로 죽이고 자시고 할 수 있으면 선점형, 그게 안 돼서 닥치고 리셋해야만 하는 경우라면 비선점형이다. 선점형 멀티태스킹은 스케줄러에 따라 차이가 지긴 하지만, 원론적으로는 보통 [[시간]]을 따로 정해 놓고 이 시간마다 선점(preemption)이 일어나는데, 이 [[시간]] 단위를 퀀텀 혹은 슬라이스라 한다. 퀀텀이 너무 낮으면 프로세스 바꾸는데 소모되는 리소스가 커지고, 퀀텀이 너무 높으면 반응 속도가 느려진다. 보통 빠른 타수의 사람이 키를 입력하는 속도가 약 100ms 정도이기 때문에, 퀀텀도 이정도 수준에서 좀더 낮게 결정되는 경향이 있다. 리눅스의 경우 퀀텀을 따로 설정할수도 있긴 하지만, 어차피 리눅스에서 디폴트로 사용하는 CFS 스케쥴러는 상황을 보면서 작동하기때문에 퀀텀대로만 선점을 하지는 않는다. 

현행 대부분의 OS들, 즉 [[Windows 95]], [[Windows XP]], [[리눅스]], [[OS/2]] 등은 모두 선점형 멀티태스킹인데 이유를 생각하면 당연하다. 범용 운영체제인 만큼 여러 프로그램들을 실행시켜야 할텐데 그 프로그램들은 모두 검증된 프로그램이 아니고 [[버그]]도 갖고 있다. 만약 어떤 [[프로그램]]이 이러한 이유로 자원을 가진 채로 [[버그]]에 빠지거나 자원을 독식하려 한다면 멀티태스킹이 제대로 이루어지지 않을 것이다. 다만 [[Windows 95]]에서는 16비트 프로그램에서는 비선점형 멀티태스킹으로 작동하는데 이는 운영체제 구조상 어쩔 수 없었던 부분이다. 기존 16비트 시절의 Windows(1.0~3.1)가 비선점형으로 만들어졌기 때문.[* 그런데 OS/2는 16비트 [[Windows]] [[프로그램]]도 선점형으로 돌린다.]

프로세스의 스케줄링을 구현하는데도 여러가지 [[알고리즘]]이 존재한다. [[리눅스]]에서는 O(1) 스케쥴러가 사용되다가 2.6.23 버전부터 CFS(Completely Fair Scheduler)가 도입되었다.

모바일 운영체제인 [[iOS]]에선 패스트 스위칭과 [[멀티태스킹]]이 공존하는 형태이다. 자세한 내용은 항목 참조. 

= 일상생활에서의 [[멀티태스킹]] =
[[사람]]에게도 멀티태스킹 업무 처리 능력을 요구하는 직종이 많은데, 이 경우에는 그냥 여러가지 일을 떠맡기는 꼴이다. [[남성]]보다는 [[여성]]이 상대적으로 멀티태스킹 능력이 뛰어나다. 평균적으로 [[여성]]의 [[wiki:"뇌#s-1.5.3"간뇌]]가 [[남성]]보다 발달되어 있기 때문이다. 업무에서든 [[가사]]에서든, [[남자]]는 여러가지 일이 쌓여 있으면 [[스트레스]]를 받고 한 번에 하나씩 빨리 처리해서 개수를 줄이려 하는 반면, [[여자]]는 동시에 여러가지 일을 처리하는 데서 스스로 만족감을 느끼는 경향이 더 크다고 한다.

전자 기기의 경우, 각기 다른 기기를 동시에 사용하면 뇌의 기능을 저하시킨다.[* [[http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=103&oid=001&aid=0007143621|기사]]]

= 관련항목 =
 * [[멀티코어 프로세서]]
 * [[하이퍼스레딩]]
