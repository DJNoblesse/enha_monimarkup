'''J'''ava'''S'''cript '''O'''bject '''N'''otation[* [[제이슨]]이라고 읽는다.]

[[http://www.json.org/ JSON 홈페이지]]

[[자바스크립트]] 형식으로 만든 '''객체 포맷'''으로, 웹 브라우저 상의 명실상부 '''[[XML]] 대항마.'''

[[XML]]이 헤더[* <??xml version='1.0' encoding='utf-8'>과 같은 형태를 띤다. 이것은 옵션이 아니라 '''반드시 넣어야 한다!''']와 열고 닫는 태그 형식 등등으로 인해, 필요한 데이터에 비해 데이터 자체 양이 '''[[크고 아름다운]] 규모가 되어 버려서''' 그 단점을 보완하기 위해 쓰이는 포맷. 특징은 짧고 간결한 동시에 컴퓨터와 사람 모두 쉽게 인식할 수 있다는 것.

JSON은 대략 다음과 같은 구조를 지닌다.
|| {
	"보컬로이드":{{{[}}}"카이토","메이코","하츠네 미쿠", "카가미네 린"{{{]}}}
} ||

［］안의 것은 순서가 있는 배열[* 0,1,2,... 와 같은 숫자로 된 이름표가 자동으로 주어진다.], ｛｝안의 것은 속성명(흔히 이름표라고 한다)이 있는 객체를 의미하며, '''객체 안에 객체를 넣을 수도 있어서 [[XML]]처럼 복잡한 구조 또한 표현이 가능하다!''' 더 구체적으로 지원하는 값은 {}로 표기되는 객체, []로 표기되는 배열, 문자열, 숫자, 불리언, null의 6가지가 전부다. 또한 null의 존재에서 알 수 있듯, JSON은 자바스크립트 이외의 언어에서 사용될 상황을 다분히 고려하고 있다.[* 자바스크립트에서 정말 아무것도 아니라는 의미는 undefined고 null은 null이라는 이름의 객체다(...)]

그래도 표면적으로 [[W3C]]의 [[표준]]은 [[XML]]인데, 그것과는 무관하게 JSON은 2009년 말 Ecma에 의해 ECMAScript5에서 스크립트 엔진의 기본 기능으로 내장되어 버렸기 때문에 새롭게 출시되는 브라우저들 기준에서는 DOM을 통해 XML파싱하는 것보다 자바스크립트 엔진에서 JSON을 메모리로 받는 쪽이 성능으로보나 트래픽으로보나 훨씬 더 나은 선택이 되어버렸다. 그런관계로 웹에서 XML은 본격 [[계륵]]화가 진행중...

기본적으로 '''[[자바스크립트]] 객체표기법'''의 부분집합 이기 때문에 [[웹 브라우저]] 레벨에서 [[wiki:"참 쉽죠" 참 쉽게]] 해석할 수 있으며, 모양과 규칙 자체가 단순한 관계로 다른 언어에서 구현하기도 쉽다. 그래서 오늘날 사용되는 거의 모든 [[프로그래밍 언어]]에서 사용가능하다. 이러한 지원에 힘입어 [wiki:"ajax#s-1" Ajax] 구현에도 상당히 빈번하게 쓰인다.

엄청나게 단순하지만 유연한 표기법이기 때문에 언어와 독립된 표준적인 데이터 표기법으로 확산되고 있다. 본래의 범위를 넘어서 바이너리 데이터 표기용으로 [[마개조]]한 BSON[* MongoDB에서 쓰인다.]도 있으며, NoSQL DB중 DocumentDB들에서는 그냥 [[표준]] 표기법으로 취급되고 있다. 최근에는 NoSQL뿐만 아니라 관계형DB인 [[PostgreSQL]]에서도 지원하기 시작.

그러나 확산되고 있다고 해도 어디까지나 웹 브라우저가 주가 되는 환경, 특히 사용자에게 보여주는 HTML 과 이를 실시간으로 가공하는 자바스크립트가 연동하는 환경 위주로 퍼지고 있으며, 그렇지 않은 곳에서는 여전히 XML이 사용된다. 

구글~~신~~에게 프로그래밍 언어를 치고 JSON Parse 를 치면 JSON을 그 언어에서 사용하는 방법을 찾을 수 있다. 웬만하면 다 쓸 수 있으니 참고하도록.

그리고 JSON도 적용되는 곳이 늘어남에 따라 XML과 같이 valid 한 검증이 필요해졌으며, Namespace 문제가 발생하는 경우가 늘고 있다. 이를 극복하기 위해 JSON-Schema, JSON-LD(JSON Linking Data) 같은 것이 등장하고 있다. ~~대항마라더니 결국 XML을 그대로 따라가고 있다.~~

[http://www.json.org]에서 표기법과 언어별 지원 라이브러리를 볼 수 있다.
