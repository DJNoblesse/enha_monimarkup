[[목차]]

== Just-in-time 컴파일 ==

[[컴퓨터 과학]]과 [[프로그래밍 언어]]에서 사용하는 용어. [[wiki:"C(프로그래밍 언어)" C]]나 [[C++]]에서 하는 것처럼 프로그램을 실행하기 전에 처음 한 번 [[컴파일]][* JIT 컴파일에 대비해서 정적 컴파일(static compilation)이라고 부르기도 한다. ]하는 대신, 프로그램을 실행하는 시점에서 필요한 부분을 즉석에서 [[컴파일]]하는 방식을 말한다.

보통 [[인터프리터]] 방식의 언어 구현들이 성능 향상을 목적으로 도입하는 경우가 많은데, 같은 코드를 매번 해석하는 대신 실행하기 전에 그 부분만 컴파일을 해 두고 다음부터는 컴파일된 코드를 쓰기 때문에 인터프리터의 느린 실행 성능을 개선할 수 있다. JIT 이전부터 실행 성능 문제 때문에 [[바이트코드]] 컴파일을 도입했던 [[wiki:"자바#s-2" Java]]와 같은 언어들도 바이트코드를 해석하는 대신 컴파일된 [[기계어]] 코드를 직접 실행하는 쪽이 어쨌든 빠르기 때문에 역시 도입하고 있다.

단점이라면 초기 구동 후 얼마간은 소스코드(혹은 바이트코드)를 컴파일하는 데에 시간과 메모리를 소모하기 때문에 정적 컴파일된 프로그램에 비해 초기 실행 속도와 메모리 사용량에서 손해를 본다는 것으로, 특히 실행 시간이 매우 짧은 경우에는 애써 컴파일된 코드를 제대로 울궈먹기도 전에 프로그램이 끝나는 배보다 배꼽이 더 큰 상황이 벌어지기도 한다.[* 보통 그 정도로 실행시간이 짧은 프로그램은 어차피 컴파일해서 돌리나 인터프리터로 돌리나 몇 초 차이나지도 않는 경우라 오히려 스크립트 언어로 짜고 대충 돌리는 경우가 많긴 하지만, '''벤치마크를 할 때는 이것 때문에 본의 아니게 평판을 깎아먹곤 한다.''' 특히 초심자들이 JIT따위 고려하지 않은 어설픈 벤치마크 코드를 짜놓고 "아 Java 구리네 C만세" 이러는 경우가 간혹 있다. ]

크게 나눠서 [[wiki:"자바 가상 머신" HotSpot VM]]과 같이 메소드(함수) 단위로 JIT 컴파일을 하는 방식과, 그보다 더 작은 단위에서 프로그램 실행 흐름을 실시간으로 추적하며 컴파일할 코드를 탐색하는 tracing JIT 방식으로 분류할 수 있다. 특히 tracing JIT의 경우에는 '''실행 시점에만 알 수 있는 정보를 컴파일에 적극적으로 반영'''[* 가능한 최적화의 예로, 루프 내에서 어떤 객체의 메서드를 자주 부른다는 걸 파악하면 컴파일할 때 객체의 메서드를 동적으로 찾는 대신, 해당 메서드의 위치를 정적으로 바인딩해버릴 수 있다. ]하기 때문에 이론적으로는 정적 컴파일 방식보다 더 빨라질 수도 있다.

=== JIT 컴파일을 사용하는 구현의 예 ===

 * [[wiki:"자바 가상 머신" Java HotSpot VM]] ([[wiki:"자바#s-2" Java]], JDK 1.3 이후)
 * .NET CLR ([[wiki:"C%23" C#]] 등의 [[.NET Framework]] 계열 언어)
 * LuaJIT ([[Lua]])
 * [[PyPy]] ([[wiki:"파이썬#s-2" Python]])
 * [[wiki:"모질라 파이어폭스" TraceMonkey]], [[wiki:"크롬(웹 브라우저)" V8]] ([[JavaScript]])
 * Dalvik VM ([[wiki:"자바#s-2" Java]], [[wiki:"안드로이드(OS)" 안드로이드]])
 * [[wiki:"어도비 플래시" 플래시]] ([[액션스크립트]] 3.0)

== Just In Time (적기생산방식)의 줄임말 ==

* 상위 항목 : [[경영학 관련 정보]]
=== 개요 ===

 적기공급생산이란 재고를 가능한 한 쌓아 두지 않고서도(=버퍼를 최대한 줄여) 필요한 때 적기에 제품을 공급하는 생산방식이다. 즉 '''팔릴 물건을 팔릴 때에 팔릴 만큼만 생산하여 파는''' 방식이다.

 다품종 소량생산 체제의 구축 요구에 부응, 가능한 한 적은 비용으로 품질을 유지하여 적시에 제품을 인도하기 위한 생산 방식이다. JIT는 자동화와 함께 [[토요타]] 생산방식(TPS)의 축을 이루고 있다. 2차대전 후 도산의 늪에서 벗어나지 못하던 일본의 토요타 자동차가 세계 제일의 자동차회사인 미국의 GM 타도를 목표로 창안한 기법이다.

 JIT는 혼류생산방식으로 변화에 대응하는 유연성을 추구하며 결과적으로 대폭적인 리드타임[* 고객의 주문부터 납품까지 걸리는 시간] 단축, 납기준수, 재고감소, 생산성향상, 불량감소를 가능하게 한다. 이 방식은 유한한 자원을 절약하자는 사상에서부터 출발한다. 따라서 철저한 현장 중심의 개선과 낭비제거를 추구한다.

=== 문제점 ===

 이렇게 좋은 점만 있는 것 같은 이 시스템에도 치명적인 문제가 있는데, 그건 바로 '''물건이 언제 팔릴지는 아무도 모른다'''는 점이다. 그 말인즉 고객이 물건을 달라고 하면 언제든지 바로 생산해서 가져다 줘야 한다는 것인데, 고객이 언제 어디서 어떤 물건을 달라고 할 지는 아무도 모르는 일이고, 결국 토요타 직원들과 하청업체 직원들은 1년 365일 24시간 내내 대기를 해야 한다(...)는 의미가 된다.
 또 다른 문제점으로는 재고를 너무 극단적으로 줄이다 보니 단돈 몇 달러짜리 부품이라 할지라도 기상 악화라던지 우연한 일에 의해 납품이 지연되면 생산라인 전체가 멈춰야만 하는 문제도 있다.

 이런 문제점들도 있었고, [[wiki:"도호쿠 대지진" 2011년 동일본 대지진]]의 여파로 토요타 공장이 [[개발살]] 나는 바람에 토요타는 JIT시스템을 과거보다 비교적 여유롭게 가져가고 있다.[* 예전에는 완제품 재고를 2개월 이내에 전부 소진하는 것을 목표로 JIT시스템을 빡세게 굴렸지만 대지진 이후로 요즘은 거의 포기하는 듯한 모습을 보이고 있다. [http://www.hankyung.com/news/app/newsview.php?aid=2011050261381 #]]

 그리고 이제 우리에게 남은 문제는 토요타에서는 포기한 이 시스템을 우리나라 기업들이 가져와서 직원들을 쪼는 데 쓰이고 있다는 것(...)
