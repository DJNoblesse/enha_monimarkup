[[include(틀:링크시 주의)]]
||본 항목은 [[씨샵]]으로도 들어올 수 있습니다.||
[[목차]]
== 개요 ==
[[C++]]와 [[자바]] 기반으로 [[마이크로소프트]]에서 새로 만든 객체지향 [[프로그래밍 언어]]. '씨샵'이라고 읽는다. 이름은 음악에서 유래한 것으로, 도(C)에 반음(#)을 올린 것.[* [[피아노]]로 치면 첫 번째 검은 건반에 해당한다.] MS에서는 출판물 등에서 키보드의 #(원래는 숫자를 의미) 대신 유니코드의 진짜 반음 올림 기호(♯, U+266F)를 쓰기도 한다. C#의 이름이 C++++에서 유래가 되었다고 알고 있는 사람도 꽤 많다. ++를 위아래로 쓴 뒤 작게 줄이면 #처럼 보인다(...)

== 역사 ==
[[Java|자바]] 언어가 나오자 MS에서도 썬과 라이센스를 맺은 뒤 독자적인 [[Java|자바]]확장인 [[비주얼J++]]라는 걸 만들었는데 이게 썬에서 정의한 자바VM에 MS가 임의로 부가기능을 추가하면서 썬과 특허권 소송에 걸리는 바람에 MS의 비주얼 스튜디오에서 비주얼 J시리즈와 MS VM(MS 버추얼머신)을 사용할 수 없게 되었다. 하지만 자바라는 언어 자체가 매력적인 언어이고 MS 역시 이를 버릴 수 없다고 생각한 것인지, 다음 시리즈인 [[닷넷]]에서 C#이라는 이름으로 새로운 언어를 발표한다.

== 특징 ==
=== Java와의 관계 ===
실질적으로 언어의 구조를 보면 기본 구조가 자바와 유사하다. C++의 형식과 자바의 기본틀이 합쳐진 구조이며 양쪽의 장점만을 흡수했다는 평가를 받는 편이다. 애초에 C# 프로젝트의 핵심인물이었던 Anders Hejlsberg의 목표가 "현대적인 개발언어의 장점을 취합"한 언어를 만드는 것이었으니...

대략 C#과 자바의 관계를 보면, C++이 C가 하는 거의 모든걸 할 수 있으면서 거기 더해서 수많은 기능들을 넣은것과 비슷한 루트를 따라가고 있다. 초창기에는 C#이 자바를 쫓아가는 모양새였으나, 현재 C#은 오만가지 기능들을 탑재해서 자바를 큰 차이로 앞서가고 있다. 그리고, 덕분에 C++이 과거 받았던 비판들, "배우기가 점점 어려워진다"는 이야기가 솔솔 나오고 있다. 하지만, 일단 배워놓고 보면[* 사실 오늘날 가장 커다란 프로그래머군을 형성하고 있는 자바 프로그래머들에게는 많은 부분이 유사하기 때문에 어느 정도 수준까지는 배우기가 크게 어렵지도 않다.] 사용성에 있어서만큼은 현존 최강의 언어 중 하나라고 볼 수 있다.

자바가 버추얼머신이 필요하듯이 C#은 닷넷 프레임워크가 필요하다. 자바가 단일 언어 다중 플랫폼(윈도우, 리눅스, 유닉스 등)이라면, .NET 프레임워크는 다중 언어(VB, C++, C#, J#...) 단일 플랫폼이다.[* 어떤 언어로 프로그램을 작성하여도 [[컴파일]]한 결과는 같다. 그래서 [[클래스]]의 개념이 없는 [[VB]]의 경우 VB.NET 에선 [[클래스]]라는 개념이 추가된다.] 허나 자바는 Clojure, Scala 등등 JVM을 사용하는 다른 언어가 나오면서, .NET 프레임워크는 Windows RT가 등장하면서 모두 옛말이 되어버렸다. 지금은 둘 다 다중 언어 다중 플랫폼(...).

언어적으로는 자바와 유사하지만, 특정회사 플랫폼에 강하게 묶여있다는[* C# 에 모노가 있고, Objective-C 에 GNUSTEP 이 있긴 하지만, 실질적으로 C# 은 MS 플랫폼 벗어나면 거의 안 쓰이고 Objective-C 는 애플 플랫폼 외에는 거의 안 쓰인다. 덕분에 메이저 언어중에서는 사실상 C/C++, 자바만이 멀티플랫폼 언어라 할 수 있다.] 특성으로 [[애플]]의 [[Objective-C]] 와 자주 비교가 된다. TIOBE 기준 점유율 측면에서 C#이 우위에 있었으나, 최근 애플의 모바일 광풍에 힘입어 Objective-C가 오히려 우위를 보이는 중...일줄 알았으나! [[Swift]]가 나오면서 '''망했다.'''[* 실제로는 망하진 않았다. ~~숨만 쉬고 있을 뿐~~ 간단히 이유를 설명하자면 Objective-C의 역사는 21세기 들어 애플의 역사와 같기에, Swift를 주로 쓰더라도 Objective-C를 아예 몰라서는 안되기 때문이다.]

=== 모노 ===
윈도우즈 이외의 운영체제에서도 사용이 가능하도록 '''모노'''라는 프로젝트가 진행중이다. 아직 그다지 완전하다고 볼 수는 없다. 개발 역시 다른 플랫폼에서 할 수는 있지만 비주얼스튜디오만큼의 편의성을 제공하지는 못한다.

사실 모노의 진짜 문제는 완성도 이전에, MS의 특기(…)대로 닷넷에 공개되지 않은 뭔가 또는 MS에 특허가 있는 것을 넣어서 MS가 만들지 않은 프레임워크는 대부분의 기존 프로그램(.NET 프레임워크용으로 만든)이 잘 안 돌아가는 무용지물이 되거나 나중에 특허 소송으로 프로젝트를 아예 [[개발살]]낼 가능성이 있다는 것이다. 이 때문에 [[리처드 스톨먼]] 등 여러 사람이 'C#과 모노를 써서는 안된다'고 한 적도 있다. 결국 MS는 커뮤니티 공약이라는 것을 발표하면서 ECMA 표준에 의한 구현에 대해서는 특허권을 주장하지 않기로 하였고 모노도 표준만 구현한 것과 MS의 다른 것을 포함한 것으로 나누기로 하였다.

하지만, 얼마 지나지 않아 모노의 주 구성 요소 대부분이 저 커뮤니티 공약의 적용 범위에 포함되지 않기 때문에 모노가 아직도 언제든지 특허 소송을 통해 개발살날 수 있다는 것이 밝혀져 모노는 다시 위험 요소 취급을 받게 되었다. 표준에 없는 3가지, 즉 윈도우 폼(Windows.Forms)과 ADO.NET, ASP.NET이 그 위험요소. 이 때문에 요즘에는 C#을 닮았으면서 앞에서 말한 특허 문제에서 자유롭다는 발라(Vala)라는 언어가 대안으로 나오기도 했지만, 표준만 구현한 GTK C# 등이 등장하면서 결국 C#으로 회귀. 이 때문에 아직까지는 자세한 사정이 서술되어 있지도 않다.

그러나 2014년 11월 MS는 닷넷을 오픈소스로 공개하면서 이러한 우려가 줄어들것으로 보인다. [[http://news.microsoft.com/2014/11/12/microsoft-takes-net-open-source-and-cross-platform-adds-new-development-capabilities-with-visual-studio-2015-net-2015-and-visual-studio-online 관련 문서]]

== 완성도와 점유율 ==
언어 자체의 점유율은 떨어지는 편이지만, 언어의 완성도는 현존하는 언어 중 가장 괜찮다는 평이 많다. 자바의 경우 여러가지로 제약이 많아 아쉬운 점을 C#이 덜어주고 있다고 한다. 코드기어(구 볼랜드)에서 Delphi와 C++Builder를 개발하여 유명해진 Anders Hejlsberg를 영입해 만들었는지라 컴포넌트 개발 환경이 우수하다. [[비주얼 스튜디오]] 6의 비주얼 베이직과 델파이/C++ Builder/C#을 비교해 보면 서로간에 안드로메다 급으로 차이가 난다. 뿐만 아니라 UI를 만들 때도 C#이 월등히 편리하다. 윈도우즈 개발자들이 UI작업 이야기 할 때 뭔가 이슈가 있다면 C# 개발자들은 그걸 아주 쉽게 생각한다.(구현도 마찬가지) 하지만 C++([[MFC]])개발자들은... 그저 야근야근하며 울지요. 사실 MFC의 경우 단순히 Win32 [[API]]의 랩핑수준을 넘지 못하지만 C#의 UI 컴포넌트는 근본 설계부터 컴포넌트 구조를 위해 설계되었으니 당연한 것일지도.

다만 MS의 개발환경이 닷넷으로 넘어오면서 자체 언어들이 전부 병크를 날리고 있기 때문에 점유율에서 안습인 것은 어쩔 수 없다. 그것도 개발 도구에서 C#을 강력히 밀어줬는데도 그렇다. C#은 강력한 reflection 구조를 갖고 있기 때문에 인텔리센스(자동완성)를 언어차원에서 지원하므로 비주얼 스튜디오 2002~2005 버전을 써 본 사람은 C#과 C++의 인텔리센스 기능이 얼마나 차이가 나는지 기억할 것이다.[* 개발툴 수준에서 C#을 얼마나 밀어주는지는 단순히 위저드만 봐도 차이가 난다. 단위 테스트를 만들 때 C#의 위저드는 클릭 몇 번이면 끝나지만 C++은... 아무리 언어의 기본적 차이가 있다곤 치더라도 Google의 GTest와 비교해보면 MS의 C++지원은 업무태만 수준.]

== 여담 ==
웹 애플리케이션 개발용으로는 '''ASP.NET'''을 밀어주고 있다. 이는 JAVA의 JSP에 대응되는 것으로 기본적인 사항은 거의 비슷하다고 한다. 기업에서 주로 쓰고 있으나, 윈도우즈 서버를 비롯한 각종 라이센스 비용 문제 등으로 개인 웹호스팅 쪽은 크게 활성화되지 못했다. 또한 플래시의 대항마로 [[실버라이트]]를 대차게 내놓았으나 대차게 망해가는 중.[* 사실 웹 UI 시장에서 실버라이트의 출시가 늦은 편은 아니었다. 하지만 문제는 동시에 출발한 Flex가 웹계의 MS 취급을 받던 Adobe의 물건이었다는 사실.][* 한국에선 대표적으로 아프리카TV가 실버라이트로 구현되어 있다.]

[[ECMA]]와 [[ISO]]/IEC 표준으로 지정된 언어이기도 하다. 그러나 C# 3.0 버전 부터는 해당되지 않는다.

2012년 들어 처음으로 점유율에서 C++을 추월했다! [http://www.tiobe.com/index.php/content/paperinfo/tpci/index.html 참고] 다만 C#이 성장한 것보다는 C++의 점유율이 많이 하락한 것으로 보인다... 그래도 전체적으로 봤을 땐 지속적으로 성장하고 있는 것으로 봐선 넘사벽의 1, 2위([[자바]], [[C]])의 위치에 닿을 가능성이 가장 높은 언어이다. ~~그런데 위 점유율 표에서는 C# 보다 오히려 Objective-C 의 상승세가 더 무섭게 보인다. 2011년에 비해 점유율이 무려 2배 이상 늘었다.~~

마이크로소프트의 XBOX 개발용 간이(?) 플랫폼인 [[XNA]]에 사용되는 언어. C#에 비하면 Visual Basic.NET 등은 [[그거 먹는 건가요]] 수준인지라 더욱 그렇고, 이것마저 싫다면 어도비 에어밖에 방법이 없다.

아이폰 앱 개발도 할 수 있는 크로스플랫폼 게임 엔진 [[Unity3D]]의 스크립트 언어로도 쓰인다. 이쪽은 모노 기반. [[PS VITA]]의 공개용 게임 개발툴[* 써드파티에서 사용하는 정식 툴이 아니라 PSN 마켓용 개발툴]에도 사용된다. 이쪽은 GTK C#.

[[각주]]
