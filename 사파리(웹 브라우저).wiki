Safari

http://isource.com/wp-content/uploads/2014/06/OS_X-Safari-icons.png

(좌) OS X 10.9 Mavericks 및 그 이하 버전에서의 Safari 로고
(우) OS X 10.10 Yosemite에서부터의 변경된 Safari 로고

http://images.apple.com/iphone-5s/specs/images/bia_safari_2x.jpg

[[iOS]]용 Safari 로고

[[목차]]
[[http://www.apple.com/kr/safari/ 공식 사이트]]

== 개요 ==
[[Apple]]에서 만든 [[웹 브라우저]]. 당연하게도 [[OS X]]과 [[iOS]]를 사용한 애플 제품들의 기본 브라우저다. [[윈도]]용 버전은 [[2012년]] [[5월 9일]] 출시된 5.1.7 버전 이후로 더 이상 지원을 하지 않는다.[* 개발자용 Safari도 윈도버전은 10월 이후로 빌드업이 중단되었다. [[http://support.apple.com/kb/DL1531?viewlocale=ko_KR Safari 5.1.7 (Windows) 다운로드]]] [* [http://software.naver.com/software/summary.nhn?softwareId=MFS_104212 그래도 네이버 다운로드 센터에서 다운받을수 있다.]] [[리눅스]]의 [[wiki:"와인(소프트웨어)" 와인]]으로도 그럭저럭 돌아간다.

[[KDE]]의 기본 브라우저인 [[컹커러]](Konqueror)에 사용된 HTML 레이아웃 엔진인 KHTML엔진을 기반으로 만든 오픈 소스 엔진인 [[웹키트]] 엔진[* [[구글 크롬]]도 웹키트 엔진을 사용했었다.]을 기반으로 하고 있다.

[[OS X]]이나 [[iOS]] 등 Apple의 운영체제에서는 애플의 막강한 지원 아래 절대적인 점유율을 차지한다.

참고로 iOS용 Safari는 [[wiki:"어도비 플래시" 플래시]]를 지원하지 않는다.

[[OS X]]용이나 [[iOS]]용에서는 웹 페이지 로드 속도가 빠르고, [[Microsoft Windows|Windows]]에서도 역시 로드 속도가 빠르다.[[구글 크롬]]이나 [[모질라 파이어폭스]]보다는 확장 프로그램(플러그인)이 다양하진 않지만, [[iCloud]]와 연동되는 순간 책갈피와 키체인(암호)이 동기화되어 [[OS X]]과 [[iOS]]에서 브라우저 끝판왕에 등극한다. [[iOS]]의 서드 파티 브라우저는 Apple의 규제로 인해 Safari보다 느릴 수 밖에 없기 때문. 즉, '''[[게티즈버그 연설|Apple의, Apple에 의한, Apple을 위한 브라우저]].'''

2010년 6월 7일, 버전 5.0으로 업그레이드되었다. [[OS X]]에서는 당연하고, [[Microsoft Windows|Windows]]에서도 성능 향상되었다. 읽기 도구 등의 몇 가지 기능 추가가 있었다. 덕분에 Instapaper 제작자는 "Shit"이라는 트윗을 날렸다.

2011년 7월 21일, 사파리 5.1로 업그레이드되었다. 바뀐 점은 새로운 프로세스 구조로 안정성이 더 향상되었으며, 나중에 읽을 항목을 저장하는 읽기 목록, 전체 화면 기능, 드래그 앤 드롭으로 다운받기(맥 전용), HTML5/CSS3 지원 강화이다. [http://support.apple.com/kb/DL1070 자세한 내용(영문)]

2012년 7월 30일 사파리 6로 업그레이드 되었다. 윈도용 사파리 다운로드는 더이상 제공하지 않는다. 최신버전을 제공하는 윈도우 개발자용 사파리도 2012년 10월 빌드까지만 올라와 있다.

2013년 10월 23일 OS X Mavericks와 함께 사파리도 7 버전이 공개되었다. [[웹키트]] 프로젝트가 구글의 크롬/크로미엄 프로젝트와 갈라서게 된 직접적인 계기가 된 Webkit2가 적용되었으며 크롬 브라우저와 유사한(애플의 주장으로는 더 우월하다고 하는)[http://trac.webkit.org/wiki/WebKit2|*] 분할 프로세싱 기능이 포함되었다.

2014년 10월 17일 OS X Yosemite출시와 함께 사파리 8버전이 공개되었다. 싹 바뀐 디자인과 자바스크립트 엔진의 개량으로 대폭 빨라진 브라우징 속도, 그리고 주소창을 탭하면 iOS나 런치패드처럼 즐겨찾기로 등록한 사이트들을 아이콘으로 보여준다. 또 두손가락을 오므리면 브라우저가 미션컨트롤처럼 작동하는 기능도 추가되었다.

[[OS X]], [[Windows]] 모두에서 적절한 색감을 뽑아내 준다는 장점이 있다. 프로파일 적용하지 않은 [[모질라 파이어폭스]]와 비교해 보자.

== OS X에서의 사파리 ==
OS X에서는 사파리의 기능 대부분을 OS단위에서 지원하기에 별도의 자원 없이 기능들을 다 사용할 수 있어 프로그램의 속도 자체가 역시 빠르다. 이는 [[아이튠즈]] 등의 다른 애플의 소프트웨어도 마찬가지. 더 이상 좋은 브라우저가 없다고 봐도 될 정도.

그래서 윈도에서 점유율을 늘려가고 있는 구글 크롬이 맥에서는 별 매력이 없다. OS X으로 포팅된 크롬이 하도 느려서 사파리가 더 빠르다는 느낌이라 미묘하다. 그리고 크롬의 장점 중 하나인 인터페이스 크기의 최소화도 맥은 애초에 웬만한 앱은 전체화면을 지원하기 때문에 빛이 바래며 기본 메뉴 인터페이스가 윈도우용보다 위아래로 넓기 때문에 사실상 사파리의 인터페이스 크기와 비슷해진다. 

일단 장점으로는, 우선 눈이 즐겁다. 3D 파노라마 비슷한 모양새로 펼쳐지는 Top Sites는 사파리의 여러 가지 디자인 요소 중 단연 백미.[* 6.1 , 7버전부터 플랫하게 바뀌었다] 탭을 끌어당기고 붙이고 할 때도 늘어나고 줄어들고 확대되고 하는 섬세한 '''애니메이션'''이 눈을 즐겁게 해 준다. 라이온과 연계되어 사용시 장점으로는 역시나 충만한 애니메이션 기능이다. 예를 들어 터치 패드에서 두 손가락으로 양 옆으로 쓸어 주면 페이지가 양 옆으로 스크롤할 일이 없는 경우 페이지 앞/뒤로 가는 기능을 해 준다. 다른 점은 단순히 커맨드를 입력한 후 앞/뒤의 페이지를 나타내 주는 것이 아니라 현재 페이지를 슬라이드를 하는 동안 뒤쪽에 앞/뒤의 페이지 모습이 보인다! 다만, 이 기능은 라이온으로 넘어오면서 타 브라우저에서는 작동하지 않는다. 사파리 6.0부터 추가된 인터페이스로, 트랙패드에서 두손가락으로 모으는 동작을 하면 열린 탭들이 모두 분리되어 슬라이드쇼처럼 볼 수 있다.[* 정식 명칭은 '모든 탭 보기' 거의 한 화면에 하나의 탭만 볼 수 있어서 별 쓸모가 없다는게 단점이었는데 10.10으로 넘어가면서 아이클라우드 탭과 합쳐지고, 스택형으로 탭을 표현해주게 바뀌어 쓸만해졌다는 평가를 받고 있다.]
맥의 기본 브라우저다 보니 맥 환경과의 연동성과 애플의 빠른 업데이트도 장점 중 하나다. 예를 들어 사파리에서는 사진을 바로 iPhoto 보관함으로 저장하는 기능이 있지만 다른 브라우저에서는 우선 도큐멘트나 바탕 화면에 사진을 저장한 뒤 임포트해야 하는 불편함이 있다. 또한 OS X 10.7 라이언에 추가되는 Rubberband Scrolling(아이폰처럼 스크롤하다가 끝까지 가면 살짝 튕기는 효과), Pinch to zoom(역시 아이폰처럼 두 손가락으로 자유롭게 확대/축소 비율을 조절할 수 있는 기능) 등도 사파리에 가장 먼저 적용될 예정이듯 애플이 직접 만드는 브라우저다 보니 업데이트 역시 확실하다. 또한 [wiki:"아이클라우드" iCloud]와의 연동으로 다른 애플 기기에서 브라우징하던 사파리 탭을 맥에서 확인할 수도 있다. 

각종 추가 기능도 장점 중 하나. Glims, Read it later[* 파이어폭스용도 있다] 플러그인 등 설치해 두면 유용한 기능이 꽤 많다. 아무래도 맥의 기본 브라우저다 보니 대부분의 개발자들이 사파리를 기준으로 개발하지 [파이어폭스]나 크롬용을 개발하는 사람은 드물다.  

그런데 사실은 애플이 의도적으로 사파리 확장기능 보급을 사보타주 하고 있는 것이나 마찬가지이다. 개발자가 편리하게 확장기능을 공식 사이트에 업로드 하고 사용자는 검색해서 설치하는 것이 확장기능 서비스 운영의 상식이고 최근엔 확장기능 검색 서비스를 브라우저 내부 기능으로까지 끌어들이는 것이 일반적인 경향이지만 애플은 이 상식을 지키지 않는다. 사파리 공식 확장기능 사이트는 형편없는 확장기능 개수 이전에 최소한의 확장기능 검색조차 지원하지 않고 있다. 이는 노골적인 앱스토어 밀어주기로 AdBlock, Google 번역 같은 웹 브라우저 기능 향상에 필수적인 확장기능은 보급하되 크롬에서 작동하는 Hangouts 확장기능과 같이 거의 응용 프로그램처럼 작동하는, 웹 브라우저의 사용성 향상을 넘어서는 수준의 확장 기능은 달가워하지 않는 것이다. 실제로 메일/SNS 클라이언트, 웹 오피스, 원격 데스크톱과 같은, 기능이 크고 아름다운 종류의 소프트웨어들은 대부분 [앱스토어|맥 앱스토어] 용으로만 개발되어 앱스토어 생태계를 부풀리는 역할에 기여하고 있다. 이를테면 구글 크롬 웹스토어를 기반으로 하는 웹 어플리케이션의 대항마로 애플 맥 앱스토어 기반의 네이티브 어플리케이션을 밀고 있어서 벌어지는 참사. ~~결국 사용자만 고달프다~~

최근에는 Mozilla Firefox 와 Google Chrome 이 Sync 서비스를 지원하면서 약간 입지가 흔들릴 조짐이 보이고 있다. 그러나 아이클라우드 이후로는 다른 애플 기기와의 연동이 강화되었기 때문에 매킨토시와 애플 기기를 같이 쓰는 애플 유저라면 별 문제가 없다. iCloud나 MobileMe 메일 계정을 이용하는데 최적의 연동성을 보장하는 멀쩡한 애플 Mail 어플리케이션을 놔두고 굳이 속도 느린 브라우저를 이용할 이유는 없으니까.

매 [[OS X]] 버전마다 속도 향상이 이뤄지고 있으며 [[WWDC]] 2013의 매버릭 발표에선 사파리의 속도가 다른 브라우저들에 비해 훨씬 빠르다는 설명이 들어갔다.

버전 6.1에서부터 Top Site 및 방문기록 보기 방식이 기존의 3D 스크린에서 플랫한 타일 배열로 바뀌었다. 또 기존 읽기목록과 책갈피 버튼을 통합하였으며,(탭방식으로 전환한다) 확장 프로그램으로만 존재했던 읽기목록 추가 버튼이 (+모양으로 생긴 버튼)강제로! 주소창 옆에 붙어버렸다. 편의성에선 좋아졌지만 읽기목록 기능을 사용하지 않는 유저들은 뭔가 거슬린다고 한다. 다만 애플이 WWDC에서 말한 것처럼 전체적인 퍼포먼스는 굉장히 향상되었다. 우선 해상도 때문에 그 퍼포먼스 구리기로 유명한 레티나 맥북에서 통합된 읽기목록 및 책갈피 통합메뉴가 굉장히 스무스하게 스와이프된다. 그밖에도 스크롤링이 더 좋아지는 등 성능에서는 장족의 발전을 이루었다. 느려터진 옛날의 사파리는 잊어도 될 듯. 다만 네이버 까페등에서 두손가락 스와이프로 뒤로가기를 할시에 흰색 화면과 함께 먹통이 되는 현상이 보고되고 있다. 일부 유저의 말로는 네이버 까페의 iFrame과 뭔가 잘 맞지않는 듯 하다. 두손가락 스와이프 기능을 끄고 사용하거나 뒤로가기 버튼을 누르거나, 단축키로 뒤로가기시에는 문제가 없다.

여담으로 위키질에 굉장히 적합하다. 수많은 항목들을 일일이 새창에 띄우는 대신 읽기목록에 추가하는 습관을 들이면 한 페이지에 집중해서 읽기에 좋아 편리하다. ~~그리고 [[iCloud]]타고 맥으로 집에서도 보고 폰으로 길에서도 보고 패드로 누워서도 보고(...)~~ (+ 역링크 기능까지 활용하면 [wiki:"버틸 수가 없다!" 위키눈팅에서 위키러로, 위키러에서 위키니트로...])

=== OS X 사파리 문제점 ===

OS X 매버릭스 시절부터 꾸준히 계승되어온 문제로 사파리로 위키질이나 인터넷을 열심히 하다보면 멀쩡하게 돌아가는 페이지임에도 '웹 페이지를 찾을 수 없다'는 화면을 띄워 사용자를 당황하게 만든다. 물론, 그 찾을 수 없다는 웹 페이지는 크롬이나 파이어 폭스같 타 브라우저에서는 '매우 잘 열린다'. 요세미티가 출시된지 6개월이 되어가는 2015년 4월 현재에도 이 문제는 해결되지 않고 있다.  
== Windows에서의 사파리 ==
윈도우즈용 사파리 6는 '''없다'''. 기존의 사파리 5는 [http://support.apple.com/kb/DL1531?viewlocale=ko_KR 고객지원] 페이지에서 받을 수 있다. 개발자 버전 마저도 2012년 10월 이후로 빌드업이 안된다.

[[Windows]]판은 사파리의 기능들을 내부에 다 포함하는 형태로 구현하기 때문에 시스템 자원을 그만큼 더 먹고 그만큼 프로그램의 구동속도 자체는 더 느리다. 버전 4로 올라가면서 많은 최적화를 거쳐 프로그램 자체의 속도도 많이 빨라졌지만 어디까지나 3과 비교해서이다. 5에서는 좀 더 개선되었으나 어차피 한 단계 거쳐서 돌아가는 것이라 OS X에서 만큼의 속도는 나오지 않는다. MobileMe 싱크 서비스는 당연히 사용 가능.

다만, 끼워팔기 장사속이 보이는 경우가 있는데[* MS도 아니고... 공짜이기는 하지만.], 다른 애플 소프트웨어와 마찬가지로 설치할 때 각종 애플 관련 프로그램을 설치하려 든다. 예를들어 봉주르(Bonjour)[* 애플 제품이 쉽게 네트워크를 이용하기 위해 설치됨. 홈공유나 아이폰의 Wi-Fi 싱크, USB테더링 등은 모두 봉주르가 설치되어 있어야 가능하다. 물론 애플 제품이 없으면 전혀 필요없다.], [[퀵타임 플레이어]][* 윈도우에서는 그다지 필요없고 윈도 미디어 플레이어 대신 동영상 MIME 타입과 연결되려 하기 때문에 살짝 곤란한 상황이 발생한다. 물론, 애플 웹 사이트에 임베드 된 동영상을 보려면 설치해야 한다...], [[아이튠즈]][* 아이팟을 사용하는 게 아니라면 다른 것들도 많다.] 정도. 업데이트를 할 때도 잘 살펴보지 않으면 저것들이 설치된다. 이것 때문에 [[모질라]] 재단(파이어폭스)이 사파리 배포방식을 비판했다. [[http://www.zdnet.co.kr/ArticleView.asp?artice_id=00000039167068 모질라 CEO, 애플 사파리 자동 업데이트 비판]]

사실상, 윈도우에서 '''애플 관련 애플리케이션'''은 타 애플 디바이스를 사용하지 않는다면 하드 공간만 더 차지하는 존재이다. 거기다 윈도우에서는 굳이 사파리를 설치하지 않아도 IE를 대체할 수 있는 웹 브라우저가 '''많다'''. 거기다 IE도 놀고만 있는 건 아니어서 업데이트를 거치면서 웹표준을 지키는 빈도가 갈수록 높아지고 있다. 

3의 글자 안티앨리어싱은 안구테러 수준이었지만 4에서부터는 윈도에서 사용하는 안티앨리어싱을 쓸 수 있다.

== 단점 ==
이건 사파리만의 단점은 아니지만 메모리 반환률이 지극히 나빠서 한 시간 정도 웹서핑을 하다 보면 심지어는 사파리 단독으로 1GB 넘게 처묵처묵하고 있는 경우도 심심찮게 볼 수 있다. 예전의 구형 맥에서는 심한 하드 스왑을 맛볼 수 있다고 한다. 그러나 이제는 모든 맥 계열이 4GB 메모리를 기본으로 달고 있기 때문에 남는게 램이라 별 문제는 없다. 사실 4세대 이전의 맥북 에어도 SSD를 장착해서 큰 문제는 없었다. 거기다 맥에서 [구글 크롬], [모질라] [파이어폭스]는 메모리 누수 문제가 좀 심각하기 때문에 적어도 혼자서 메모리를 잡아먹고 안 뱉어내는 버그는 덜 일으키는 사파리가 좀 낫다. 7버전으로 오면서 엔진을 Webkit 2로 업그레이드. 크롬과 같은 탭별 별도 프로세스 관리를 지원하기 시작했는데 크롬과 마찬가지로 당연히 이런 구조에선 리소스는 더 많이 먹는다 (...). 하지만 역시 요즘 컴퓨터 스펙에 이건 크게 걱정할 문제는 아니니 안정성 개선을 위한 일보 전진이라고 보는게 좋을지도.

OS X 자체의 메모리 관리 알고리즘이 약간 윈도우즈의 그것보다 Lazy 하게 보인다는 특성도 있다. OS X는 현재 사용되는 프로그램 및 자주 사용되는 프로그램에 램을 미리 지정하여 빨리 사용할 수 있도록 하는 기능이 있기 때문. 윈도우즈의 Prefetch와 같은 기능이다. 물론, 메모리 사용량이 많은 다른 프로그램을 켜면 빠른 속도로 메모리를 그 프로그램(사용량이 많은)으로 할당해 준다.

크롬을 쓰던 사람들은 사파리만의 탭 관리 방식을 어색하다고 느낄 수도 있다. 크롬에서는 창이 모두 탭처럼 간주되므로, 분리된 창이라 해도 드래그로 합쳐서 다시 탭으로 만들 수 있다. 사실 사파리도 방법이 다를 뿐 분리된 창을 합칠 수 있다. 드래그가 아니라 메뉴에서 해당 명령을 클릭해야 한다. 잘 모르는 사람이라면 한참 고민할 수도 있겠다. 사실은 이 기능은 사파리가 먼저고 Webkit 기반이었던 -초기에는 사실상 사파리 브라우저의 개수 버전이었던- 크롬에는 딸려온 기능. OS X Mavericks의 Safari7 기준 드래그로 탭을 분리하고 합치는 기능이 동작한다. 다만 정확히 탭 영역에 가져가야 붙지 대충 드래그하면 붙지 않고 별도의 창으로 떠버려서 여간 불편한게 아니다. Safari8에서 개선이 되었기를 희망한다.

그런데 사파리는 원래 탭보다는 창 위주의 브라우저였다. 사실 윈도에서 인터넷 브라우저가 탭 위주로 가게 된 것은 윈도우 인터페이스의 특징 때문이다. 윈도우 유저에게는 창 위주가 불편할 수밖에 없었던 것이, 창이 이리저리 열려있으면 ~~왠지 모르게 지저분해 보이고~~ 관리하기가 어렵기 때문이다. 하지만 맥에는 '''미션 컨트롤[* 탭 브라우징이 아직 없던 시절의 이름은 '익스포제'. 지금의 익스포제는 미션 컨트롤 기능의 일부로 미션 컨트롤 설정의 하부 메뉴에서 이름을 확인할 수 있는 정도이다… 였는데 Mavericks가 출시되면서 그나마 그것조차 사라져버렸다. 애플다운 신속한 퇴출.]'''이 있어서 분리된 모든 창을 아주 간단하게 열람할 수 있다. 또한 라이언부터는 트랙패드에서 네손가락 스와이프 업/다운을 통해 모든 창/관련 창을 간편하게 모두 열람하고 스위칭할 수 있으므로 창을 여러개 열어도 불편함이 없다. 그래서 사파리가 탭을 지원함에도 불구하고 창으로 분리해서 쓰는 사람도 많다.[* 오히려 탭으로 모두 묶어서 하나의 창으로 보면 스와이프 다운을 해도 분리가 안되기 때문에 탭이 더 불편하다고 생각하는 사람도 있다. 그래도 사파리 6.0부터 핀치 인/아웃으로 탭을 분리해서 볼 수 있게 되어서 탭도 많이 이용될 것으로 보인다.]  

사파리의 가장 치명적인 단점은 보안이 영 허술하다는 것이다. 여러 [[웹 브라우저]]를 대상으로 테스트를 한 결과 가장 보안이 약한 브라우저 중 하나라고 한다. 또한 [[리눅스]], [[OS X]], [[Windows]] [[비스타]]를 대상으로 한 해킹 대회에서 [[OS X]]이 숨풍숨풍 뚫리도록 만든 원인이 바로 [[사파리]]이다.

그리고 2010년 6월 21일 버전5 에서 보안 문제가 터졌다. [[http://www.bloter.net/wp-content/bloter_html/2010/07/35464.html 자동 완성 기능을 악용해 방문자의 개인정보를 스크랩 할 수 있다.]] 유출 가능성이 있는 정보는 사용자의 이름과 이메일, 주소, 전화번호, PC의 위치 등 맥(Mac)의 주소록에 저장된 모든 정보라고 한다.
 
2011년 3월 9일 보안 해킹 경연대회 'Pwn2Own'에서 5초만에 가장 먼저 털려서 불명예는 쭈욱 이어가고 있다.

현재 이 문제는 OS X라이온과 함께 업데이트가 되면서 해결되었다고는 한다. 최근에는 이 해커를 고용했다고 한다.[* 원래 해커를 고용하는건 소프트웨어 진영에서 생각보다 흔한 일. 프로그램을 뚫었다는 자체가 실력을 증명하는 셈이기 때문이다.](이 자료에 대한 출처가 필요하다) 그래봤자 사용자가 적어 '''해커 또한 부족하기 때문에''' 보안에 취약한건 계속될 듯 하다. ~~맥의 보안이 뛰어나서 못 뚫은 게 아니라 쓰는 사람이 적어서 해커 입장에서는 알아주는 이가 없으니 안 뚫는다는 누군가의 말이 맞는 듯하다. 하지만 아이폰이나 아이패드의 보급 덕분에 iOS를 쓰는 사람이 점점 늘어나고 있으니 애플도 정신을 바짝 차리지 않으면 안 된다.~~

2012년 Pwn2Own에서 사파리가 놀랍게도 [제로 데이 공격]으로 뚫리지 않았다! 웃기게도 이번 대회에서는 구글 크롬이 대회 시작 5분만에 뚫려 제대로 굴욕을 맛보았다. 이번 해엔 프랑스의 보안 전문 회사인 VUPEN에서 "결코 뚫리지 않는 브라우저는 없다."는 모토를 내세우며 크롬만 주구장창 파고들었다고 한다. 결국 대회 전체에서 구글 크롬, 인터넷 익스플로러, 파이어폭스가 제로 데이 공격과 CVE로 탈탈 털렸고, 사파리는 CVE로 두 번 뚫리는 것으로 그쳤다. [wiki:"OS X/보안" 자세한 사항은 이 문서를 참고바람]

또 불편한점은 소스 보기를 했을때 지극히 평범한 텍스트를 준다는 것. 일곱빛깔 무지개로 알흠답고 직관적으로 코드를 보여주는 [[모질라 파이어폭스]], [[wiki:"오페라(웹 브라우저)"오페라]][* 이 쪽은 Dragon Fly라는 전문 기능을 내장한다]에 비해 사파리는 그냥 알파벳과 숫자를 줄 뿐이다. ~~마치 경쟁사의 [[메모장]]으로 코딩을 하는 게 얼마나 변태 같은 일 인지를 보여주는 듯~~

하지만 소스 보기 기능은 별로 쓸 이유가 없는 것이 사파리엔 강력한 "요소 점검"이라는 기능이 탑재되어 있는데 HTML 코드는 물론 CSS, 자바스크립트, 기타 오브젝트에 대한 일목요연한 정보를 얻을 수 있고 심지어 각 요소별 로딩 순서, 로딩 속도 까지 측정이 가능하다. 실시간 코드 수정도 가능하여 요소 점검에서 HTML/CSS/자바스크립트 코드를 수정하면 페이지에도 곧바로 그대로 반영이 되어 잘못 코딩된 부분을 빠르게 찾아내고 그 대책도 직접 미리 적용해 보는 것이 가능하다. ~~그런데 다른 주요 브라우저도 전부 동일한 기능이 있어서 변명꺼리가 안된다.~~

이 "요소 점검" 기능은 사파리의 모태가 된 [[웹키트]] 프로젝트의 일부로 같은 웹키트 엔진을 사용하는 [[크롬]]브라우저에도 완전히 동일한 인터페이스, 디자인, 동작을 하는 기능이 똑같이 탑재되어 있다. 그러니까 크롬에서도 소스보기 같은거 쓰지 말고 요소 점검을 써라.

최근 버전에서는 "요소 점검"이 "웹 속성"으로 이름이 바뀌고 문제의 아무 짝에도 쓸모 없는 메모장 수준의 소스 보기 기능이 그냥 삭제(...) 크리를 먹고 웹 속성에 통합되어버렸다.

== iOS 내에서의 사파리 ==
[[아이폰]], [[아이팟 터치]], [[아이패드]]의 기본 인터넷 브라우저이다. 새 탭은 아이폰과 아이팟 터치의 경우 iOS 6 이하에선 8개까지, iOS 7부턴 24개까지 만들 수 있고 아이패드에선 iOS 6 이상일 경우 24개까지 만들 수 있다.[* 링크를 계속 열면 새로운 탭이 생기나,기존에 열어둔 다른 탭이 닫힌다.닫힌 탭은 새로 생성된 탭에서 뒤로가기를 누르면 돌아갈 수 있다. ]어도비 플래시는 지원되지 않으며, 속도는 모바일 브라우저 중 거의 최상급.
사파리 외의 브라우저는 지속적으로 출시되고 있다. 모바일 환경(java)에서 쌩쌩 돌아가던 오페라 미니가 출시된 바 있으나 속도 면에서 사파리에 뒤지고 탭 기능도 지원하지 않아 신나게 까였다. 다만 오페라 모바일의 경우 Opera Turbo라는 시스템을 이용해 오페라 서버에 웹페이지를 보내 그것을 압축하여 전송 받는 방식을 사용한다. 한국엔 그 서버가 없으니 당연히 느릴 수 밖에 없다. --그걸 노렸나-- SkyFire 브라우저도 유료로 출시된 바 있으나 제대로 된 성능 발휘는 안 된다. 플래시 동영상을 읽을 수 있다곤 했는데 영 신통치 않은 기능이라 별로 의미도 없다. $2.99씩이나 내고 구입할 브라우저는 아니다. 전문 개발진이 아예 처음부터 제작한 것이니까 최적화 부분에서는 사파리를 따라올 브라우저가 적긴 하다. 사실 애플같은 경우에는 보안을 빌미로 모든 웹브라우저가 사파리보다 한단계 아래인 엔진을 강제적으로 사용하게 한다. 사파리 자체가 괜찮아서 가장 빨랐던 것도 있지만 이것도 크다. ~~애플을 주깁시다 애플은 브라우저의 원수~~

맨 위로 스크롤은 화면 상단을 터치하면 되는데 맨 아래로 스크롤 기능이 없어서 댓글 확인할때 미친듯이 밑으로 손가락을 비벼야 하는 불편함이 있다. 자바스크립트로 즐겨찾기를 등록해 놓으면 해결 가능. [http://blog.naver.com/replay9902/90102735047 보러 가기]

앱스토어에 사파리를 대체하는 모바일 브라우저가 계속 올라오고 있긴 하다. 그러나 MobileMe나 iCloud를 통한 싱크 서비스, 애플의 지원을 받을 수 없으므로, 소비자 입장에서는 돈을 주고 살 정도로 사파리보다 좋지는 않다는 평이 대부분이다. [* 아토믹 브라우저, 아이캡 모바일, 포탈 등이 잠깐 주목을 받긴 했으나 결국 몰락했다.] 그래도 무료로 제공되는 브라우저는 대개 좋은 평을 받고 있다. 특히 구글 크롬과 그와 유사한 인터페이스의 [[돌핀 브라우저]]가 좋은 평을 받고 있다. 또한 최근에 출시된 구글 크롬도 좋은 평가를 받고 있다. 구글은 자사 iOS 앱에 'Open in Chrome'이라는 옵션을 넣어 웹 페이지의 외부 브라우저 열기 시에 사파리 대신에 크롬으로 열 수 있도록 하는 기능을 지원하고 다른 개발자들도 이 기능을 사용할 수 있게 하여 iOS 내에서 애플 플랫폼을 자사 플랫폼으로 대체하려는 시도를 하고 있다. Puffin 브라우저 같은 경우에는 서버에서 렌더링한 웹 화면을 화면 공유를 이용하여 전송받는 클라우드 방식을 이용해 아예 iOS 내장 웹킷을 우회하고 있다. 덕분에 Adobe Flash를 iOS 기기에서 작동시킬 수 있다.

[[iOS]] 6 업데이트 이후로 속도가 더욱 빨라졌다. 아이폰용 사파리는 전체화면 기능이 생겼다.

[[iOS]] 7 업데이트에서는 탭 이동이 카드 형식으로 바뀌었으며 주소창과 검색창이 하나로 통합되었다. 또한 화면을 스크롤하면 자동으로 주소창과 하단 버튼들이 사라지며 자연스럽게 전체 화면으로 전환된다.[* 베타 사용자의 경험에 따르면 처음엔 느렸으나 점차 최적화되는 느낌이라고.] 잘 안알려진 특징으로 iOS 7의 패럴랙스 때문에 탭을 펼쳐놓은 상태에서 각 탭들이 기기의 모션에 따라 기울여짐이 실시간으로 바뀐다. --물론 배터리는...-- 그리고 속도는 빨라졌다. 허나 iOS 7 자체에서 퍼포먼스 저하를 느낀 유저들도 다수 있기에 개인차가 존재하는 부분. ~~iOS가 느리게 느껴지는건 전화기를 바꾸라는 애플의 계시~~

[[iOS]] 8에 와서는 플러그 인처럼 사파리 앱확장을 지원하게 되면서 사파리와 서드파티 앱을 연동시키는 편의성을 제공한다. 특히 비밀번호관리 앱인 1Password가 이 앱확장을 지원하게 되면서 1Password는 더 막강해졌다.~~사실 iOS 내에서는 따로 앱을 실행할 필요가 없이 바로 자동입력이 되는 키 체인이 더 빠르고 편하긴 하다.~~

구글 크롬을 베꼈다는 의견이 많다. 주로 지적되는 사항으로 스크롤하면 전체화면이 되는거나, 카드형식의 탭과 그 탭을 지울때 스와이프하는 동작이 있다.

== 개발 버전 ==
[http://nightly.webkit.org 여기]에서 WebKit이라는 브랜딩으로 사파리의 최신 개발 버전을 제공하고 있다. 속도 면에서 낫고 자주 업데이트되며, 아직 패치가 반영되지 않은 버그(예를 들면 20110822 현재 사파리 5.1에 있는 한글 입력 버그)가 해결되어 있을 수 있는 반면, 아무래도 개발 버전이니 다른 버그가 있을 가능성을 배제할 수 없다. 윈도버전 사파리는 2012년 10월 버전이 마지막이며 더이상 빌드업이 안되고 있다.

== 같이 보기 ==
 * [[인터넷 익스플로러]]
 * [[모질라 파이어폭스]]
 * [[구글 크롬]]
 * [wiki:"오페라(웹 브라우저)" 오페라]
 * ~~[[THE SAFARI]]~~

[[각주]]
