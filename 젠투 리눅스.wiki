[[목차]]
== 개요 ==
젠투 재단에서 제작하고 있는 [[리눅스]] 배포판.

== 설명 ==
대니얼 로빈스(Daniel Robbins)가 [[FreeBSD]]를 사용해보고서는 Ports 시스템에 감명을 받아(?) 리눅스쪽에서 구현한것이 Portage 시스템이고, 젠투의 시초가 된다. 젠투의 특징은 BSD 계열 유닉스 대부분이 그렇듯이, '''모든 것을 컴파일하여 설치한다'''는 것이다. 다른 리눅스 시스템에서는 보통 패키지 관리자를 통하여 소프트웨어를 설치하면 이미 컴파일이 끝난 바이너리를 통째로 다운로드하여 설치한다. 하지만 젠투는 패키지 관리자 자체가 바이너리를 다운로드하는 대신 소스 코드를 다운로드하여 현장해서 컴파일해 프로그램을 '''만들어 낸다'''. 장점은 원하는 대로 컴파일 옵션을 주어 보다 자신의 컴퓨터와 요구사항에 맞는 시스템을 구성하는것이 가능하다는것이고 단점은 엄청나게 긴 컴파일 시간이다. 일반적으로 10분 20분이면 설치가 끝나는 [[우분투]] 같은 시스템을 젠투로 직접 컴파일해서 구성하려면 세팅시간을 제외하고 순수 컴파일 시간만 따져도 최고사양의 컴퓨터로도 최소 반나절, 일반 컴퓨터라면 며칠은 돌려야 할정도. 이 때문에 컴파일해서 사용하는것이 익숙치 않은 리눅스계열 유저들 사이에서는 [[변태]]적인 배포판이라고도 불린다. 그도 그럴 것이, 다른 배포판은 [wiki:"자쿠" 호환성에 중점]을 두기 때문에 특정 CPU만이 가지는 명령어 셋은 이용하지 않는 반면, 젠투는 호환성을 포기하면서까지 순수하게 [wiki:"샤아전용 자쿠II" 사양에 맞는 최적화만을 지향]하기 때문.

참고로 역시 BSD 계열이 다 그렇듯이 젠투에도 컴파일하는 저 모든 것에는 '''[[OS]] 자체도 들어간다'''. 물론 아무것도 안깔린 무주공산에서 컴파일을 할 수 있을리 없기 때문에, 부팅가능한 OS 와 컴파일러 및 그에대한 소스를 포함한것을 컴파일된 홈페이지에서 다운받아서 깔아 두고 시작하며, 기초 설치 과정은 젠투에서 제공하는 CD나 [[우분투]]같은 다른 배포판에서 실행할 수 있다. 그래도 이 설치 과정 자체가 수동이라는 점은 변하지 않는다.(…)

참고로, 소스컴파일이라는 '시간'을 잡아먹는 점만 제외한다면 사용하기도 매우 편리한 편이며, 의외로 안정적인 배포판이다. 그리고 컴퓨터 사양도 많이 좋아진 요즘에서는 최신형 컴퓨터로 컴파일할 경우 그 시간이 그리 오래걸린다고 보기도 힘들다. 이 때문에 최적화 전후의 속도차가 없어진다는 이유로 젠투의 앞날이 어둡다는 소리도 있었으나, 아이러니하게도 컴파일 시간도 크게 단축되어 오히려 젠투를 사용하기 더 편리한 환경이 되었다. 또한 과거에는 컴파일시 이러한 옵션들을 하나하나 시험해야 했지만, GCC 4.2부터는 native 옵션이 추가되어 컴파일시 CPU 검색과 최적화를 손쉽게 해결할 수 있게 되었으니 젠투를 설치할 때 투자해야 할 것은 '시간'(그리고 패키지 설정)만 남게 되었다.

처음 설치시에는 핸드북에 방법이 자세하게 나와있어 그저 따라하기만 하면 되며, emerge 를 이용한 패키지 매니징 자체도 디테일은 거의 신경쓸 필요 없이 대부분 전자동으로 이루어지고, eselect 를 이용하여 여러가지 귀찮은 세팅들도 간단히 처리할 수 있다. 이외에도 젠투만의 여러가지 유용한 툴들을 제공하기때문에 CLI 환경에서 자주 작업하는 유저라면 오히려 편리하다고 느끼는 경우도 많다. 업스트림 소스를 제공하는 소스 컴파일 배포판이라 업데이트 속도가 빠를것이라 생각하는 사람이 많지만, 젠투만의 패치를 더해서 제공한다던가 안정성을 위한 테스트등으로 인해 업데이트 속도는 오히려 느린편에 가깝다. 빠른 업데이트 속도를 원한다면 Unstable 버전으로 사용하면 되며, 이때 업데이트 속도는 [[아치 리눅스]]와 비슷한편. 서버용으로는 문제가 있겠지만, 데스크탑 용도로는 Unstable 버전도 쓸만한 편이다.

== [[FreeBSD]]와의 차이점 ==
원조라 할 수 있는 FreeBSD 와의 차이점은, FreeBSD 의 경우 베이스 시스템과 유저랜드 영역을 칼같이 구분하여 유저랜드에서 소프트웨어 인스톨/삭제하다가 이거저거 날려먹어도 베이스 시스템에는 전혀 영향이 가지 않는다. 그러나, 젠투의 경우는 다른 리눅스 배포판들이 그렇듯이, 인스톨/삭제시 잘못되면 부팅이 안되는수도 있다. 물론, 여기에는 이유가 있는데 FreeBSD 의 경우 기본적으로 관리자가 모든 시스템 세팅을 수동으로 하는것을 전제하고 있다. 따라서, 소프트웨어 인스톨시 시스템영역을 바꾸는것을 관리자의 손에 전적으로 맡기는것이고, 젠투와 다른 리눅스 배포판들은 소프트웨어 인스톨시 어느정도의 시스템 세팅까지 자동으로 해주기때문에 더 편리하긴 하지만, 예상밖의 상황이 일어날 가능성이 존재한다.

또 다른 차이점은 악명높은(?) USE flags 이다. FreeBSD 의 경우 컴파일시 개별 패키지마다의 옵션과 그에 따른 의존을 미리 자주 쓰이는 디폴트값으로 잡아두고 각 Ports 의 인스톨시 개별적으로 메뉴가 뜨며 세부적으로 결정하게 하는데 반해, 젠투의 경우는 이러한 디폴트값이 없고, 몇가지의 프로파일을 제공하며, 여기에 더해 USE flags 를 이용하여 시스템와이드하게 미리 설정하여 설치하는편이다. 물론, 개별 옵션 설정도 가능하다. USE flags 의 이득은 미리 설정을 해놓으먼 인스톨시 개별 옵션과 패키지 선택에 신경을 쓸 필요가 없다는점이고, 단점은 미리 자신이 어떤 시스템을 만들려 하는지에 대한 정확하고 디테일한 구상이 없으면 상당한 난항을 겪게 된다는점이다. 즉, OS 자체뿐 아니라, 자신이 인스톨하여 사용하려는 개별 프로그램들에 대하여 어느정도 수준의 지식을 미리 갖고있어야 원하는 시스템의 구성이 가능해진다. 시스템와이드하게 이루어지기때문에, 약간만 달리해도 시스템에 큰 변화를 유발하며, 그것을 적용하는것은 간단한 명령어로 끝나긴 하지만, 보통 바닥부터 다시 컴파일을 해줘야 하기때문에 오랜 시간이 걸리는 경우가 보통이다. 즉, 시간이 아주 많이 남아돌지 않는 이상, 실험을 하거나 마음대로 갖고놀만한것은 아니며, 문서로 정리되어있긴 하지만, 말했다시피 양이 상당히 방대하다. 

반면, 젠투의 패키지 매니징도 FreeBSD 에 비해 상당히 유리한점을 갖고있는데 FreeBSD 의 패키지 매니징은 처음 설치할때 더 편리한 반면, 나중에 컴파일 옵션을 바꾸거나 삭제를 하거나 할때는 애로사항이 꽃피게 된다. 젠투의 경우는 패키지 삭제 혹은 USE flags 를 변경후 재적용 시키는것들을 emerge 에서 전자동으로 해주기때문에, 이런측면에서는 오히려 훨씬 편리하다. 하지만, 전자동인만큼 어느정도 위험성도 갖고있어 패키지 삭제/변경 후에 반드시 라이브러리 링크 상태를 확인해주어야 한다.~~FreeBSD 에서도 패키지 삭제 후 의존패키지 삭제하는 작업이 위험한 건 매한가지지만, emerge 같은 전자동 시스템을 제공하지 않고 관리자에게 일임한 만큼 잘못되면 관리자 책임으로 떠넘길수가 있다.~~

== 버전 관리 ==

특이한 버전 관리 체계를 가지고 있어, 젠투 시스템은 대부분의 리눅스 배포판과는 달리 OS의 버전이 존재하지 않는다. (물론 OS를 구성하는 소프트웨어의 버전은 당연히 존재한다) 인스톨 미디어로 기본 설치가 완료된 시점을 기반으로 하여 통합된 리포지토리(저장소)에서 최신의 소스 코드를 항상 가져오며, 따라서 언제 출시된 인스톨 미디어를 사용하든지 간에 상관 없이 그냥 닥치고 업데이트만 하다보면 항상 그 결과물은 '현재까지 출시된 최신의 젠투 리눅스'가 된다. (간단히 말해서 '''윈도우에 비유하여 설명하면, 윈도 95 CD로 설치하든 윈도 XP CD로 설치하든 윈도 7 CD로 설치하든 상관없이 업데이트만 주기적으로 하다보면 최종 완료되는 시점에서는 모조리 윈도 8이 설치된 상태가 된다'''는 것.)

== Portage ==
젠투의 패키지 관리는 기본적으로 Portage 시스템에 의해 이루어진다.

Portage 시스템은 [[wiki:"파이썬#s-3" Python]]으로 작성된 emerge에 의해 이루어 지며, emerge는 패키지의 의존성, USE flags, distfile 및 patch file들의 정보를 기록해둔 ebuild 파일들을 통해 패키지를 관리한다. 글로벌 세팅은 ~~/etc/make.conf~~ /etc/portage/make.conf[* 2012년 9월 9일자 뉴스를 통해 make.conf의 기본 위치가 변경됨이 공지되었다. 젠투 유저는 "eselect news list", "eselect news read <번호>" 명령을 통해 확인할 수 있다. 웹에서는 [[http://forums.gentoo.org/viewtopic-t-936176-start-0.html 포럼]]을 통해 확인할 수 있다.] 에서 담당하고, 개별패키지 세팅은 /etc/portage 내의 파일 및 디렉토리들로 구성된다. 
=== emerge ===
emerge는 젠투의 핵심이 되는 스크립트로, 다음과 같은 역할을 수행한다.

 * 패키지 설치
 특정한 ATOM[* 패키지 이름, (부등호)패키지이름-버전, ebuild 파일, package set 등의 패키지 정보]을 인자로 넘기면 ebuild와 USE flags를 통해 의존성을 파악하고 필요한 패키지들과 인자로 넘긴 패키지를 설치한다. 

 * 패키지 삭제
 마찬가지로 특정한 ATOM을 인자로 넘기면 해당 패키지의 상위 의존성이 없는 경우 패키지를 삭제한다. 이 때, 의존하고 있는 패키지들은 삭제되지 않는다.
 또한, 별도의 옵션을 주면 상위 의존성이 있는 경우에도 패키지가 삭제 된다. 이 때에는 상의 의존성 패키지들이 작동을 하지 않을 수 있으므로 주의를 요한다. 

 * 불필요한 패키지 자동삭제
 [[데비안]]/[[우분투]]와 마찬가지로 emerge로 상의 의존성이 없음에도 설치되어 있는 불칠요한 의존성 패키지들을 삭제할 수 있다.
 이 때, 주의할 점은 데비안/우분투와는 다르게 젠투 리눅스의 패키지들은 현재 시스템에서 직접 수많은 라이브러리들을 사용하여 컴파일해 설치하기 때문에 라이브러리들간의 연결 관계가 복잡해서 패키지 삭제 과정 중에 필요한 라이브러리들이 삭제될 수 있다는 것이다.
 패키지 자동삭제를 한 이후엔 gentoolkit 패키지의 revdep-rebuild 스크립트를 이용하여 라이브러리들의 연결 상태를 꼭 확인하도록 하자. 

 * 패키지 재컴파일
 -e 옵션으로 가능하며, 희대의 [[삽질]][[노가다]][[변태]]짓 중 하나인 패키지 재컴파일을 emerge를 통해 할 수 있다.  재컴파일할 ATOM을 인자로 넘길 때 아무 옵션도 주지 않으면 해당 패키지를 재컴파일 한다. 특수한 문제가 있을 땐 이런 식으로 해결을 할 수 있어서 단일 패키지 재컴파일은 종종 쓰이는 편이지만...

 '''옵션을 추가하면 패키지의 의존성 트리를 전부 재컴파일 할 수도 있다.''' 말 그대로 '''전부''' 재컴파일 한다. 만약 ATOM으로 world set/system set[* world set 은 모든 패키지를 말하고, system set 은 기본 베이스 시스템(stage 3)에 포함된 패키지만을 의미한다. 즉, world set 에서 system set 을 제외하면 유저가 인스톨한(의존 포함) 모든 패키지가 된다. ]을 주면. '''[[헬게이트]]'''가 열린다!
 수백 수천개의 패키지가 재컴파일 되는 동안 당신은 즐겁게 밖에 나가 산책과 영양 만점의 외식을 즐길 수 있을 것이고, 오랫만에 십수 시간의 단잠을 즐길 수 있을 것이다. ~~세상 모든 컴퓨터에 젠투 리눅스를 설치해서 인류의 건강에 기여를~~ ~~아 물론 십수시간으로도 안 끝난다.~~ ~~그냥 며칠 푹 쉬어야 할 듯~~ 이때 가장 중요한 옵션이 --resume 이다. 한참 재컴파일 하다가 도중에 오류가 나서 멈췄을때 --resume 옵션 없이 다시 emerge 를 사용하면 완전히 처음부터 인스톨하기 시작한다. 시간이 왕창 남아도는 게 아니라면 --resume 옵션을 반드시 기억하자.

혹여 여러 패키지를 설치하는 중 몇몇 패키지의 에러가 나더라도 무시하고 넘어가고 싶다면 --keep-going 옵션을 추가하면 된다. 이렇게 하면 패키지 컴파일 중 에러가 나더라도 참고 끝까지 간다. 또한 패키지 빌드 중 쏟아져 나오는 아름다운(?) 빌드 메시지를 보고 싶지 않으면 --quiet 옵션을 붙여주면 화면이 깔끔하게 유지된다. 단, 패키지 설치 후 공지하는 중요 한 공지 사항은 그대로 출력된다.
=== ebuild ===
ebuild는 Portage에서 패키지를 관리할 때 쓰는 파일로, 패키지의 의존성, 다운로드 경로, 패치, USE flags 등의 정보를 담고 있는 파일이다.

ebuild에는 '''설치 방법'''또한 정의 되어 있는데, GNU Build System을 따르지 않는 패키지의 경우에도 emerge를 통해 일괄적으로 컴파일 할 수 있도록 여러가지 help function이 정의 되어 있다.

=== USE flags ===
USE flags 는 중앙에서 시스템와이드한 설정을 통해 복잡하고 방대한 로우레벨 옵션과 패키지 선택에서 사용자를 해방시켜주려는 젠투의 배려이기도 한데, 편하라고 만든 이 USE flags 가 오히려 자체적으로 꼬이거나 의도하지 않았던 방향으로 기능하면서 사용자의 두통을 유발하는 경우가 상당히 흔하다.~~크래커 차단하라고 깔아놓은 SELinux 가 그 복잡함으로 인해 사용자의 행위까지 차단하는것과 비슷하다.~~ 하나하나 읽어보고 설정을 하려고 해도 양이 워낙 방대하여[http://www.gentoo.org/dyn/use-index.xml 링크] 쉽게 건드리는게 힘들다. 덕분에 젠투에서도 이미 한번 각 패키지들의 컴파일옵션들을 추상화시켜 묶은 USE flags 를 한번 더 추상화시켜 묶은 profile 등을 제공하여 간단한 세팅방식을 제공하고 있다. 

각각의 Flag가 대체 어떤 역할을 하는지 좀 더 명확한 설명을 원하면 'gentoolkit' 패키지를 설치한 후 터미널에 'equery u <패키지명>'을 치면 각 flag에 대한 보다 자세한 설명이 나온다. 타 배포판에 대한 젠투의 특징이자, 두드러진 장점이라면 장점인 것이 이 USE flag이므로 emerge로 패키지를 설치하기 전 어떤 USE flag가 있으며 각각이 대략 어떤 역할을 하는지 한 번 확인해보는 것이 시스템 관리 측면에서 권장할만하다.

USE flage의 유용한(?) 일례는 다음과 같다. zip, 또는 unzip은 압축된 파일 이름의 인코딩을 별도로 지정하지 않는데, 이 때문에 윈도우에서 압축한 파일이 리눅스에서 압축을 풀 때 파일 이름이 깨져버릴 때가 있다. 이 경우를 대비해 zip/unzip은 '-O' 옵션을 제공하는데, 이는 'libnatspec'이란 별도의 라이브러리에 의존한 것이다. 우분투 등의 배포판에서 zip/unzip 패키지를 깔면 무조건 libnatspec을 넣고 컴파일하여 -O 옵션이 활성화 되어 있지만 젠투는 이 옵션을 'natspec'이라는 USE flag를 통해 시스템에 사용할지 안 할지를 결정할 수 있다. 사실 로마자 외에 한글, 한자, 일본어 등의 여러 문자를 쓰는 환경이라면 이러한 기능이 필수적이지만 그렇지 않은 곳에서 이러한 기능은 별 쓸모가 없다. 젠투는 이렇게 각 패키지에 대한 상세한 옵션 설정이 가능하다. ~~그러니 젠투만 믿고 가자. 그치만 컴파일 시간은 어쩔?~~
=== eselect ===
eselect는 젠투 Portage 시스템의 자유도를 증명하는 스크립트로써, 이름 그대로 젠투 리눅스의 전반적인 설정을 select할 수 있다.

선택 가능한 옵션으로는 

 * Portage Profile 선택
 * EDITOR 환경변수 선택
 * Kernel Source 선택
 * Bash Completion Script 활성화/비활성화 [* USE flag를 설정하면 웬만한 셸 기동 프로그램은 BachComp 스크립트가 함께 설치된다.]
 * python, binutils, php, emacs 등 여러 버전이 함께 설치 될 수 있는 프로그램의 기본 사용 버전 선택
 * locale, fontconfig 등 사용자가 설정하려면 귀찮은 것들 설정
 * java-vm, java-nsplugin 등 여러 종류가 설치 될 수 있는 가상 머신들 선택

등 알아두면 좋은 옵션이 많이 있다. 옵션들을 보면 알겠지만, /etc 에서 configuration 파일 찾아다가 열어서 설정해야 하는 여러가지 환경변수들을 쉽고 간단하게 설정할 수 있다. 

=== Overlay ===
우분투의 launchpad와 비슷한 개념으로 Gentoo Portage Overlay라는 것이 있다.

이름 그대로 젠투의 Portage 시스템 위에 사용자 정의 Portage 시스템을 덮어 씌운다는 의미로 기존 Portage에 없는 패키지나 커스텀 ebuild 파일 사용 등을 위헤 사용하는 기능이다.

여담으로 Overlay 중에는 데비안/우분투의 APT 시스템과 페도라의 RPM 시스템도 존재한다. 따라서 커널과 몇몇 중요 시스템 패키지만 젠투로 컴파일하고 나머지는 우분투나 페도라 시스템으로 대체하는 것도 가능하다.

Overlay를 관리하는 프로그램으로서 'layman'이 있다.
== 논쟁거리 ==
컴파일해서 얻을 수 있는 속도이득에 대한 부분은 의견이 갈린다. 기본적으로, CPU 를 혹사시키는 작업들(인코딩/연산작업 등)의 경우 자신의 컴퓨터에 최적화시켜 컴파일한 프로그램들이 꽤 빠른 속도를 보여준다. 그러나, 문제는 일반 데스크탑 유저들의 경우 게임따위를 제외하면 cpu 를 혹사시킬만한 프로그램들을 거의 사용하지 않는다는것이다.(게이머등이 아닌경우, 일반적인 유저가 오늘날 멀티코어 컴퓨터를 사용시, 평균적인 CPU 사용량을 보면 사실 CPU 를 10% 미만으로 사용하는 시간이 90% 이상이다.) 컴퓨터로 대단위 행렬을 연산하거나 인코딩을 죽어라 한다거나 하는 사람은 어디까지나 극소수에 불과하다. 그리고, CPU 를 별로 사용하지 않는 에디터나 뷰어, 웹브라우저 등등은 사실상 CPU 속도보다 I/O 속도와 유저의 반응속도(?)에 영향을 더 많이 받기때문에 굳이 오랜시간을 투자해서 컴파일을 해줄 가치가 없다. 설령 연산작업이 필요한 프로그램이 필요하더라도, 웬만한 다른 배포판들 역시 Portage 시스템처럼 전자동으로 해주지는 않더라도, 몇몇 프로그램정도야 수동으로 컴파일하여 인스톨하는것은 절대 어려운게 아니다. 

결국, 일반적인 유저 입장에서 젠투같은 배포판을 사용함으로서 득을 볼 수 있는 유저층은 극도의 minimalism 과 simplicity 를 추구하는 사람[* 젠투는 인스톨시 타 배포판에 비해 훨씬 미니멀한 시스템에서 시작하며, 가벼운 최소한도의 프로그램만 사용하는 경우 어차피 컴파일시간 자체가 얼마 되지 않는다. 여기서, 미니멀하게 설치한다고 해서 실제로 가볍게 사용하는게 아니라는점은 짚고 넘어가야 한다. 오히려 이런사람들중에 웹브라우저에 탭을 수백개씩 열어놓고 xterm 을 수십개를 띄어놓으면서 엄청나게 컴퓨터를 혹사시키는 사람들이 많다. 가벼운 프로그램 위주로 설치해 사용하는 이유는 소위 뽀샤시한 그래픽에 리소스를 낭비하는것이 아까워서 그런 경우가 많다. 흠좀무... ] 혹은, 오만가지 컴파일 옵션을 갖고놀며 자신만의  ~~변태적인~~시스템을 구성하려는 사람들이다. 이중 전자의 경우는 애초에 젠투를 가지고 놀려는게 아니라 자신의 '사용목적과 성향에 부합하기때문에' 사용하는거라 오래도록 문제없이 잘 쓰는 경우가 많지만, 후자의 경우는 어느정도 젠투에 대한 호기심으로 접근하여 초반에는 이것저것 건들여보며 열정적으로 달리지만 그 열정이 시들면 금방 질리고, 편한 배포판으로 옮기는 경우가 많다. 젠투는 처음 시작시도 그렇지만, 사용하면서 들어가는 시간과 노력이 더 크게 필요한 운영체제인 관계로, 애초에 정말 자신의 사용목적과 성향에 부합하는지를 잘 따져보아야 할것이다.~~세상에는 이것 말고도 그 시간과 정열을 투자할만한 다른 좋은것들이 많이 있다.~~

== 설치 관련 ==
[[http://www.gentoo.org/doc/en/handbook/ 젠투 핸드북]]에 많은 정보가 있다.

젠투 리눅스 같은 경우엔 다음 커뮤니케이션스에서 미러링을 해주기 때문에 우분투처럼 다운로드 속도는 빠른 편이다.

기본적으로 대부분의 패키지들은 64비트 컴퓨터에 최적화 되어서 나오니[* 아예 32비트 환경에서는 구동되지 않는 프로그램도 많다] 32비트 컴퓨터를 사용하는 분들은 64비트에 비해 많은 불이익이 있음을 감안하고 설치를 시도하기를 바란다.

자신의 컴퓨터의 CPU가 몇 비트 환경인지, 어떠한 명령어셋을 사용하는지, 코어수가 몇 개인지를 미리 알고 있어야 젠투 최적화에 도움이 되니 꼭 설치 전에 알아보는 것이 좋다.

== 그 외 ==
최근 10주년 기념 라이브 DVD를 배포하기 시작했다.

[http://www.gentoo.org 젠투 재단]
[http://www.gentoo-kr.org 한국 Gentoo Linux 사용자 모임]

참고로 [[http://www.linuxfromscratch.org LFS(Linux From Scratch)]]라는 것도 있는데, 이것은 말그대로 베이스 시스템부터 하나하나 자신이 원하는대로 리눅스를 쌓아올리는것이다. 엄밀히 말해서 배포판이라기보다 그냥 설명서라고 보면 된다. 실제 사용목적이라기보다 리눅스 교육용에 더 가깝다고 볼 수 있다. 

젠투에서 파생된 [[사바욘]]이라는 배포판도 있다.
