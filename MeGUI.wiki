[[목차]]


= 개요 =

CUI기반의 인코딩 관련 프로그램을 제어하는 GUI 인코딩 솔루션. 닷넷이 설치되어 있어야 한다.

메구이 공식사이트 링크
http://sourceforge.net/projects/megui/

지원하는 동영상 코덱: MPEG-4 ASP (xvid), MPEG-4 AVC (x264), x265
지원하는 오디오 코덱: AAC, MP2, MP3, Flac, Vorbis, AC3, Opus
지원하는 컨테이너: MP4, MKV, AVI, M2TS


= 메구이 사용 전 준비물 =

Microsoft .NET Framework
http://www.microsoft.com/ko-kr/download/details.aspx?id=42643

사용자의 컴퓨터에 따라 이미 설치된 경우도 있으며, 없는 경우도 있다. NET Framwork 2.0 버전 이상만 설치되어 있으면 되니, 제어판에서 설치된 프로그램 목록을 확인한 뒤, 설치되어 있는 경우에는 추가로 설치할 필요는 없다. 과거에는 Avisynth를 별도로 설치하여 사용해야 했으나 최신 버전에서는 자체 내장되어 더 이상 따로 설치할 필요가 없다.

= 특징 =
주로 TV 방송 원본 소스를 편집해 인코딩하거나 [[DVD]], [[블루레이]]를 [[립핑]]하는데 사용된다. '''국내외 어둠의 전문적인 릴그룹의 경우 인코딩을 하는 데에 99.99% 메구이를 사용한다'''. [[FFmpeg]]는 2.1 버전이 나왔음에도 불구하고, 여전히 몇 가지 한계 및 문제점이 있기 때문에[* 대표적으로 Delay relative to video가 생성되는 문제, 메구이는 영상과 음성을 완전히 따로 분리해 만들지만, FFmpeg는 편의를 위해 영상과 음성을 동시에 인코딩하기 때문에 고질적으로 생길 수밖에 없는 문제점이다] 인코딩을 제대로 하기 위해서는 사실상 메구이를 쓰는 수밖에 없다. 일반적인 순서는 영상원본의 에러 등을 체크하고 영상과 음성 스트림을 분리한 후 스크립트를 사용해 적당한 처리를 한 뒤 이를 인코딩하여 영상과 음성을 합쳐 컨테이너에 집어넣는 게 보통이다. MeGUI는 자체적으로 스트림을 해독하기 위한 코덱이 없어서 시스템에 필요한 코덱이 이미 설치돼 있어야 한다.

MeGUI가 파일을 제어하는 방식은 스크립트로 이루어져 있기 때문에 스크립트를 생성하는 기능이 내장돼 있지만, 기본적인 기능만 수행하므로 메모장 등을 이용해 따로 스크립트를 편집해주는 것이 좋다. [[AviSynth]]는 전문 프로그램과 비교해도 그리 떨어지지 않는 수준의 그래픽 처리 필터들을 가지고 있으며 이 필터들을 얼마나 적재적소에 사용하느냐에 따라 결과물의 품질이 크게 달라진다. 단 스크립트를 작성하는 데 있어 필터마다 규칙이 다른 점과 메모장으로는 영상의 미리 보기가 불가능하다는 점 때문에 메모장 대신 AvsP와 같은 전용의 에디터를 사용하기도 한다. 영상의 크롭이나 이동, 잘라내기, 붙이기 같은 기본적 편집기능에 더해 각각의 필터에 옵션값을 제어하는 GUI 인터페이스를 가지고 있으며 파일 불러오기와 같은 기본적인 스크립트를 작성해주는 기능도 내장되어 있어 AvsP를 사용하는 게 더 편리하다. 단점은 버그가 좀 있다는 것 정도.

일반적인 인코딩 프로그램과 비교해 사용법을 익히기 ~~더럽게~~ 어려운 게 단점이다. 보통의 [[FFmpeg]] 인코딩 프로그램은 하나만 설치하면 편집+인코딩+자막삽입+휴대기기대응이 한번에 이루어지는데 MeGUI의 경우는 일단 -

1. 닷넷이 설치되어 있어야 하며
2. 대상 파일의 디코더를 필요로 하는데다
3. 음성부분을 처리하기 위한 인코더는 덤이고
4. 영상과 음성의 Muxing이 필요하다.
5. 파일에 약간의 오류가 있다면 동작을 하지 않고
6. 윈도우의 동영상 처리법에 대해 조금이나마 알고 있어야 하며
7. 필터들은 대부분 멀티 코어를 지원하지 않고
8. 스크립트는 당연히 CUI방식으로 제어해야 하며
9. 자막도 수동으로 입혀줘야 한다. 유니코드나 호환성 문제는 덤.

~~[["장비를 정지합니다" 이건 미친 짓이야 난 여기서 나가야겠어]]~~
그런데도 불구하고 MeGUI를 사용하게 되는 이유는

1. AviSynth 의 필터들을 이용해 여러 영상을 한곳에 집어넣거나 색공간, 명도, 대비, 채도를 최소한의 손실로 제어가 가능하고
2. 오디오처리가 분리되어 있기 때문에 오디오스트림은 다른 프로그램으로 처리할 수 있으며(푸바2000, tsMuxeR 등)
3. 부분적인 멀티 코어 대응으로 코어가 4개라면 4개의 영상을 동시에 처리할 수 있고(8개라면 8개의 영상)
4. 이 모든 게 프리웨어로 공급된다.

~~심지어 장점마저 무슨 소린지 모르겠다.~~
잘 모르겠다고? 백문이 불여일견이다. 클릭해보자.
{{{#!html
<embed height="342" type="application/x-shockwave-flash" width="608" src="http://cfs.tistory.com/custom/blog/79/791074/skin/images/imagerotator317.swf" quality="high" flashvars="file=http://cfs.tistory.com/custom/blog/79/791074/skin/images/kon1_op_comp_image_VITA.xml&amp;lightcolor=0x009900&amp;transition=fluids&amp;overstretch=none&amp;backcolor=0x000000&amp;shuffle=false&amp;repeat=false&amp;showicons=false&amp;frontcolor=0xEE82EE" allowfullscreen="false" bgcolor="#ffffff" enablecontextmenu="false" autostart="false" allowhtmlpopupwindow="false" enablehtmlaccess="false" allownetworking="internal" allowscriptaccess="never" invokeurls="false"/>
}}}
분명 '''둘다 같은 용량의 영상'''인데 이런 화질 차이를 만들 수 있다.[* 비교에 사용된 인코더는 우리가 잘 아는 [[팟인코더]]. 기본적인 H264설정을 사용했다.]
~~[[wiki:"개미를 죽입시다" 팟인코더를 주깁시다 팟인코더는 나의 원쑤]]~~ 사실 팟인코더 뿐만 아니라 대부분의 [[FFmpeg]]계열 인코더가 저렇다. 물론 [[FFmpeg]]자체의 문제는 아니다. [[FFmpeg]]도 자체적인 프리셋을 이용하면 훌륭한 영상이 나오지만, [[FFmpeg]]을 기반으로 하는 여러 인코더들이 속도를 위해서 화질을 깍아먹는, 즉 [[FFmpeg]]에서 권장하는 프리셋을 이용하지 않기 때문이다. [[FFmpeg]]로 제대로 된 인코딩을 해보려면 해당항목 참조

비디오 처리에 있어서 AviSynth의 필터들을 잘 사용한다면 낡은 비디오 테입에 담긴 데이터를 노이즈제거나 샤픈, 외곽선 수정, 레벨/채도 보정, 안티앨리어싱, 업샘플링 등으로 인코딩 했는데 화질이 더 좋아진 것 같다는 결과가 나오는 것도 불가능하지는 않다.
 
특히 오디오 처리가 분리되어 있기 때문에 [[AAC]]나 [[MP3]] 같은 경우 전문적인 유틸리티가 있다면 그쪽을 사용하거나 [[foobar2000]]을 사용해 VST와 연계하는 것도 가능하다. 특히 [[foobar2000]]의 경우에는 고성능의 리샘플러나 채널 믹서[* [[foobar2000]]의 경우 채널 다운 믹스(예. 5.1채널을 2채널로 변환)할 경우와 5.1채널 이상의 음성 파일을 다른 음성 양식으로 변환할 시에 채널이 올바르게 분배되지 않는 등의 문제점이 발생한다. 5.1채널 이상의 음성을 다루는 경우에는 [[foobar2000]]을 사용하기 보다는 MeGUI를 이용하는 것이 좋다], 각종 필터 들이 그야말로 널려 있기 때문에 오디오 인코딩에 따른 음질 열화를 최대한 억제할 수 있다는 것이 장점이다. 최종 결과물에 오디오 코덱에 대한 제한이 없다면 추가적인 처리 없이 원본 그대로 사용하는 것도 가능하다. 팁을 주자면 MeGUI는 내장 오디오 코덱 부분의 업데이트가 대단히 느려 새롭게 개선된 버전이 나와도 구 버전을 사용하는 경우가 많다. 게다가 음성 인코딩을 하기 위한 디코더 부분에서 몇몇 선택할 수 있는 디코더[* NicAudio, FFAudioSource, DirectShow, BassAudio, LWLibavAudioSource 중에서 하나를 선택할 수 있는데, FFAudioSource를 선택하는 것이 보편적으로 가장 나은 선택이다. 특히 기본으로 지정된 NicAudio는 음성 변환 시 샘플레이트나 비트를 틀리게 변환하는 경우가 많으므로 되도록 쓰지 말자]는 사용자 환경에 따라 잘못된 처리를 하는 경우가 많으므로 오디오 변환은 인코더 프로그램을 제공하는 공식 홈페이지에서 직접 받아서 [[CLI]] 환경에서 직접 변환하는 것이 가장 확실하다. 

즉 용량은 억제하면서 최대한의 화질과 음질을 보장하기 때문에 트랜스코딩에 적합한 유틸리티라고 할 수 있다. 파일을 가리는 까탈스러운 성질과 스크립트로 인해 빵빵 터져주는 오류를 감내하고 쓸 가치가 있는 프로그램. 특히 스크립트 옵션을 사소하게 잘못 설정해도 화면이 깨지거나 하는 치명적인 결과를 불러올 수 있기 때문에 작업을 마무리하기 전 파일의 일부분을 잘라 시험적으로 인코딩을 수행해 보는 것이 좋다. ~~24시간 인코딩한 파일이 재생이 되지 않는다. [[야 신난다]]~~ 파일을 자르는 기능은 AviSynth 내장기능이다.
