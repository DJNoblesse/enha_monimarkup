수리 논리학이나 전산학에서, 참값(= 1)과 거짓값(= 0)으로 하는 연산을 의미한다. 고안자인 조지 불의 이름을 따서 불 연산(Boolean expression)이라고도 한다. 또한 이 연산에 쓰이는 기호를 불 대수라고 한다.[* 참고로 [[백괴사전]]에서는 이 불 대수를 불(火) 대수로 해석해서 불 붙은 물건의 성질을 다루는 대수로 묘사했다(...) [http://uncyclopedia.kr/wiki/불_대수 링크]] --A:아 어려워! 불대수 누가 만들었어! B:불이요 A:불 집에 불내러가자!--

[[프로그래밍]]에서는 조건에 의한 분기나 반복을 만드는 데 이용된다.
전자계통에선 논리 연산을 하는 소자를 게이트(Gate)라고 하며 트랜지스터 여러개를 조합해서 만들 수 있다.

[[목차]]

== 논리 연산의 종류 ==
=== 부정 (NOT; ¬) ===
말 그대로 부정(否定)이다. 즉, 참과 거짓을 뒤집는다. [[C언어]]의 영향을 받은 [[프로그래밍 언어]]에서는 일반적으로 !를 부정 연산자로 사용하며, 그 외에 ~A도 많은 프로그래밍 언어에서 사용되며, 필기나 서적 등에서는 A' 또는 A 위에 ㅡ를 그려넣은[* 복소수 연산에서의 켤레복소수나 행렬에서의 역행렬 등에서도 쓰이는 그 기호 맞다.] 기호가 주로 쓰인다.

|||| NOT 연산 결과 ||
|| 입력값 || 결과값 ||
|| 0 || 1 ||
|| 1 || 0 ||

=== 논리곱 (AND; ∧) ===
두 명제가 모두 참이어야 참값을 돌려준다. [[C언어]]의 영향을 받은 [[프로그래밍 언어]]에서는 일반적으로 &를 논리곱 연산자로 사용하며, 불 대수에서는 AND는 [[곱셈]]과 동치이다. 아래의 연산결과를 보면 왜 곱셈과 동치인지 쉽게 알 수 있을 것이다.

|||| AND 연산 결과 ||
|| 입력값 || 결과값 ||
|| 0 , 0 || 0 ||
|| 0 , 1 || 0 ||
|| 1 , 0 || 0 ||
|| 1 , 1 || 1 ||

=== 논리합 (OR; ∨) ===
두 명제 중 어느 한 명제만 참이어도 참값을 돌려준다. [[C언어]]의 영향을 받은 [[프로그래밍 언어]]에서는 일반적으로 |를 논리합 연산자로 사용한다. 불 대수에서는 OR는 [[덧셈]]과 동치이나, 아래에서 보듯 '''1 + 1 = 1''' 임을 주의해야 한다.

|||| OR 연산 결과 ||
|| 입력값 || 결과값 ||
|| 0 , 0 || 0 ||
|| 0 , 1 || 1 ||
|| 1 , 0 || 1 ||
|| 1 , 1 || 1 ||

=== 부정 논리곱 (NAND; ↑) ===
Not AND. 논리곱의 결과값을 부정한 것이다. 즉, 두 명제가 모두 참이면 거짓값을 돌려주고 그 외에는 참값을 돌려준다. 참고로 NAND만을 통해 다른 논리 연산식을 모조리 구현할 수 있기 때문에 현재 사용되는 [[플래시 메모리]]들은 대부분이 NAND 회로로 구성되어 있다.

|||| NAND 연산 결과 ||
|| 입력값 || 결과값 ||
|| 0 , 0 || 1 ||
|| 0 , 1 || 1 ||
|| 1 , 0 || 1 ||
|| 1 , 1 || 0 ||
=== 부정 논리합 (NOR; ↓) ===
NOT OR. 논리합의 결과값을 부정한 것이다. 즉, 두 명제가 모두 거짓이면 참값을 돌려주고 그 외에는 거짓값을 돌려준다. NAND와 마찬가지로 NOR만으로 다른 논리 연산식을 모조리 구현할수 있기에 초기 [[플래시 메모리]]들은 대부분이 NOR 회로로 구성하였다. 근데 NAND 회로가 값이 싸다보니 이쪽은 자연스럽게 안쓰게 됐다.

|||| NOR 연산 결과 ||
|| 입력값 || 결과값 ||
|| 0 , 0 || 1 ||
|| 0 , 1 || 0 ||
|| 1 , 0 || 0 ||
|| 1 , 1 || 0 ||
=== 배타적 논리합 (XOR; ⊕) ===
두 명제 중 정확히 하나만 참이어야 참값을 돌려준다. [[C언어]]의 영향을 받은 [[프로그래밍 언어]]에서는 ^를 배타적 논리합 기호로 사용한다. 다만 일반적인 경우에는 ^가 제곱으로 사용되기 때문에 처음 프로그래밍 언어를 배우는 사람들은 제곱을 하려고 ^ 기호를 사용했다가 [[안드로메다]]로 가는 경우가 있다.(…)[* 제곱은 math.h를 include하고 pow(밑, 지수)를 사용하면 가능하다.][* [[PHP]] 5.6 한정으로 **로 지수 표현이 가능하다.]

|||| XOR 연산 결과 ||
|| 입력값 || 결과값 ||
|| 0 , 0 || 0 ||
|| 0 , 1 || 1 ||
|| 1 , 0 || 1 ||
|| 1 , 1 || 0 ||

=== 동치 (EQV; =) ===
두 명제가 다 참이거나 다 거짓이면 참값을 돌려준다. 배타적 부정 논리합 (XNOR) 또는 배타적 논리곱이라고도 한다.

|||| EQV 연산 결과 ||
|| 입력값 || 결과값 ||
|| 0 , 0 || 1 ||
|| 0 , 1 || 0 ||
|| 1 , 0 || 0 ||
|| 1 , 1 || 1 ||

== 연산 법칙 ==
아래 결과가 이해가 안된다면 진리표를 만들어서 확인해 볼수도 있다.. 만 불 변수(0또는 1의값을 가짐)가 4개만 되도 단순히 AND 만 확인해보려고 해도 16개나 확인해봐야한다. 

아래 표가 진리표 (Truth Table)다.
|||||| A ∧ B (AND)||
|| A || B || 결과값 ||
|| 0 || 0 || 0 ||
|| 0 || 1 || 0 ||
|| 1 || 0 || 0 ||
|| 1 || 1 || 1 ||

=== 기본법칙 ===
|| 표시기호 || 해당 연산 ||
|| A·B || A AND B ||
|| AB || A AND B ||
|| A+B || A OR B ||
|| A' || NOT A ||

|| 연산 || 결과 ||
|| A·A || A ||
|| A + A || A ||
|| A + A' || 1 ||
|| A·A' || 0 ||
|| A·1 || A ||
|| A·0 || 0 ||



== 관련항목 ==
 * [마인크래프트/레드스톤] : 본격 게임속 논리 연산 시뮬레이터, [http://youtu.be/0xkYXbgiNxY 누군가 아예 컴퓨터도 만들었다.]

[[각주]]
