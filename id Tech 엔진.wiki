||이 항목은 [[이드 테크 엔진]]으로 검색해도 들어올 수 있다.||

[[목차]]

== 개요 ==
[[이드 소프트웨어]]에서 만든 게임용 [[엔진]]. 엔진 코드의 전체는 아니지만 렌더링 파트의 대부분을 프로그래머 [[존 카멕]]이 코딩하였다. 원래는 엔진의 정식 명칭이 없었고 각 게임의 제목이 붙은 평범한 명칭을 썼으나, id Tech 5를 발표하면서 기존 엔진이 id Tech 시리즈로 개명되었다. 공식적으로 id Tech는 둠 엔진부터 시작되며, 현재 id Tech 5까지 나온 상태다. 아래에 기술되는 id Tech -1 및 id Tech 0은 IGN측에서 이드 소프트웨어 엔진의 역사를 설명하기 위해 임의로 붙인 명칭이며 공식적으로는 인정되지 않는다. 소스코드 공개로도 유명하며, 2011년 11월 기준으로 id Tech 4까지 [[GPL]] 하에 소스코드가 공개된 상태이다.

=== id Tech -1 (비공식) ===
[http://pc.ign.com/articles/116/1164348p1.html IGN에서 붙인 이름]

횡스크롤 게임을 위한 엔진이다. 당시 PC에서 보기 힘들었던 부드러운 화면 스크롤이 가능했으며, 이드 소프트웨어는 이 엔진을 이용해 [[슈퍼 마리오 브라더스 3]]를 PC로 이식하기도 했으나, 닌텐도 플랫폼 이외의 기종으로 마리오 게임을 내놓을 필요가 없다는 닌텐도 측의 거부로 인해 프로젝트가 무산되었다. 이후 [[위험한 데이브]] 2 및 [[커맨더 킨]]에 쓰였다.

=== id Tech 0 (비공식) ===
[[호버탱크 3D]]와 [[카타콤 3D]] 그리고 [[울펜슈타인 3D]]에 이르는 게임들의 엔진들을 일컫는 비공식 명칭. 이 엔진을 통해 이드 소프트웨어의 엔진 라이센스가 시작되었다.

초기 엔진인 만큼 매우 단순한 표현만이 가능했는데, 높낮이는 구현할 수 없고, 게임에 나오는 벽도 상자를 쌓아서 만든 것처럼 일정한 상자꼴로만 되어 있어서 벽은 90도 단위 각도로만 꺾어질 수 있었다. 또한 캐릭터는 2D 스프라이트로 표현된다.

울펜슈타인 3D엔진으로 만들어진 게임
 * [[울펜슈타인 3D]] (1992)
 * 쉐도우캐스터 (1993) - 이후 오랫동안 이드 소프트웨어와 인연을 유지하게 되는 [[레이븐 소프트웨어]]의 초기작으로 중세배경의 1인칭 RPG.
 * [[블레이크 스톤]] (1993)
 * 오퍼레이션 보디 카운트 (1994) - 캡스톤 제작. 엔진은 이래뵈도 아랍 테러리스트를 막는다는(...) 비교적 현대전을 배경으로 한 게임.
 * 코리도 7 (1994) - 캡스톤 제작. 나중에 CD버전으로도 나왔다. SF물이지만 적인 외계생명체가 죽는 비주얼이 꽤 잔인하다. 중간에 이상한 얼굴이 나와서 사람을 깜짝 놀래키게 만들기도 한다.
 * 슈퍼 3D 노아의 방주 (1994) -  제목 그대로 노아의 방주를 주제로 한 종교 게임이다(...) [[AVGN]]의 성경 게임편 참조.
 * [[라이즈 오브 더 트라이어드]] (1994) - 울펜슈타인 3D 엔진을 사용한 게임 중 가장 유명한 작품으로 엔진이 [wiki:"마개조" 매우 크게 개조]되었다.

=== id Tech 1 (둠 엔진) ===
attachment:/id_tech_1.png?width=570

[[둠]] 제작을 위해 개발된 엔진으로 이전 명칭은 둠 엔진이었다. 앞서 기술된 바와 같이 이드 소프트웨어가 만든 최초의 엔진은 아니지만 호버탱크 3D나 [[울펜슈타인 3D]]의 엔진은 상당히 원시적인 관계로 둠 엔진이 id Tech 1으로 명명되었다. 97년에는 비상업적인 용도로 [[리눅스]] 버전의 둠 [[소스 코드]]가 공개되었으며, 99년에 [[GPL]]로 다시 공개되었다. 이 소스 코드를 토대로 수십 개의 둠 소스 포트가 제작되었고, 일부는 커다란 개조를 거쳐 이전 둠 엔진에 없던 기능들을 지원하기도 한다. 

둠 엔진은 엄밀히 말하면 3D 엔진은 아니며, 2D 기반이지만 눈속임으로 3D처럼 보이게 만든 것이다. 그래서 흔히 2.5D 엔진이라고 불린다. 이런 특성은 게임 상에서도 드러나는데, 둠에서는 위 아래를 제대로 바라볼 수 없으며, 한 층 위에 다른 층이 존재할 수 없다.(Z축이 없다.[* [마비노기]의 플레이오네 엔진 역시 Z축이 없어서 층 위에 다른 층이 있을 수 없다. 물론 엔진의 수준이야 몇 년 차이가 나는 걸 비교할 수 있을 리가 없다.]) 그래도 울펜슈타인 3D 엔진과는 달리 고저차가 존재하여 입체감이 꽤 그럴 듯하다. 그 외 모델이나 사물들도 폴리곤 모델이 아닌 2D 스프라이트로 만들어져 있다.

이런 단순함은 많은 기술적 제약을 낳았지만, 동시에 둠 맵의 개발 난이도를 크게 낮추기도 했다. 둠의 커다란 인기와 맵 에디터의 공개, 그리고 쉬운 개발 난이도가 맞물리면서 [[wiki:"둠/WAD와 모드#s-3" 엄청난 숫자의 둠 맵이 제작]]되었는데, 맵 사이트 중 가장 규모가 큰 'idgames 데이터베이스'에는 유저들이 만든 둠 WAD[* 'Where's All the Data?'의 축약어로 모든 게임 데이터가 담겨진 파일이다. 하나의 WAD에는 최대 32개의 레벨이 존재한다.]가 1만여 개 이상 올라와 있다.

게임 엔진이 분석될대로 분석되다보니까 이제는 [http://oblige.sourceforge.net oblige]라는 자동 맵 생성기까지 나왔다

둠 엔진 기반의 게임
 * [[둠]] (1993)
 * [[둠 2: 헬 온 어스]] (1994)
 * [[헤러틱]] (1994)
 * [[헥센]] (1995)
 * [[스트라이프]] (1996)

둠 또는 둠 2 소스 코드에 기반해 만들어진 상업 게임
 * 핵스 (1997) - 사이버 펑크 분위기의 토탈 컨버전. 기존 둠하고 게임성은 큰 차이가 없다. iOS로도 포팅되었다.
 * [[첵스]] 퀘스트 (1996) - 바로 그 먹는 첵스가 주인공으로 등장하는 게임이다. 당시 첵스를 사면 박스에 딸려 제공되었다.
 * 첵스 퀘스트 2 (1997)

그 외 둠 소스 코드를 기반으로 만들어진 무료 배포 게임이 다수 존재한다.

=== id Tech 2 (퀘이크 1, 퀘이크 2 엔진) ===
attachment:uploadfile/idtech2.jpg?width=570

과거 [[퀘이크]] 엔진, [[퀘이크 2]] 엔진으로 불렸던 두 엔진을 통합해 일컫는 명칭이다. 두 엔진 사이에 분명한 기술 수준 차이가 있음에도 통칭하는 건 퀘이크 2 엔진은 완전히 새로 쓰여진 것이 아닌 퀘이크 엔진의 개조형이기 때문이다. id Tech 2를 사용한 대표적인 게임으로는 [[퀘이크 1]], [[퀘이크 2]], 솔저 오브 포춘, [[다이카타나]](!!) 등이 있다.

==== 퀘이크 1 엔진 ====
1996년 작인 [[퀘이크]]에서 처음 선보였으며, 배경 및 오브젝트를 모두 폴리곤으로 처리하기 때문에 맵을 복층으로 만들거나 복잡한 구조물을 표현할 수 있게 되었다.

퀘이크1에선 볼 수 없었던 투명한 수면이나 부서지는 벽이나 구조물 따위의 표현들을 퀘이크2에서는 볼 수 있으나 그것은 퀘이크1에서도 원래 가능했던 것이다. 공식 확장팩에서 부서지는 구조물을 볼 수 있으며, 소스코드 수정없는 퀘이크1 유저모드에서나 유저맵 등에서도 부서지는 구조물이나 벽, 투명한 수면 등을 볼 수 있다.

이 시절 대부분의 게임들은 C++로 개발되었지만 [[퀘이크]]는 C++가 아닌 C로만 작성되었으며 속도가 필요한 부분에 어셈블리어로도 일부분이 작성되어있다.
게임플레이 코드에 한정해서 고유의 QuakeC라는 매우 단순명료한 스크립트로 작성되어있다. (사실 스크립트라고 하기에도 너무 규모가 작은, 약간의 조합이 가능한 일종의 콘솔 명령어 수준이다.)

도스 기반으로 개발된 게임으로서 소스 코드 전체가 하나의 통짜로 되어 있으며 구조적으로 융통성이 전혀 없고 개량이 거의 불가능한 수준이다.

퀘이크 1 소스는 총 5가지의 버전이 존재하며 각각 컴파일하여 다음과 같은 실행파일이 생성된다.

1. Quake.exe : 최초의 도스용 퀘이크 (도스 전용)
2. WinQuake.exe :  윈도우로 이식된 퀘이크 (윈도우 전용)
3. GLQuake.exe : Glide 및 OpenGL 지원용 퀘이크 (윈도우 전용)
4. QuakeWorld.exe : 인터넷을 통한 64인 멀티플레이를 지원하는 퀘이크 월드 (윈도우 전용)
5. GLQuakeWorld.exe : Glide 및 OpenGL을 지원하는 퀘이크 월드 (윈도우 전용)

위와 같이 각 5가지의 버전별 소스가 완전히 하나의 구조적인 소스로 구현되어 있기 때문에 일부의 기능들만 별도로 컴파일할 수 있는 모듈화가 전혀 이루어져 있지 않아서 일부를 변경하거나 엔진에 변화를 가하기가 매우 힘들다.

데이터 파일은 PAK으로 통합되어 있는데 이파일은 id Tech 1(둠 엔진)에서의 WAD와 비슷하지만 새로운 포맷이다. WAD나 PAK나 압축파일은 아니고 그냥 파일을 하나로 모아놓은 그룹파일이다.

==== 퀘이크 2 엔진 ====
1997년 말에 발매된 [[퀘이크 2]]에서 시각적으로 가장 진보된 부분은 광원에 색채가 들어간 부분이지만 실질적으로 가장 변화가 큰 부분은 소스코드의 재정비에 있다.

여전히 C++가 아닌 일반 C언어 기반이며 속도가 필요한 일부분에 어셈블리어를 사용하고 있지만 더이상 도스에 기반을 두지않고 윈도우 전용 게임으로 전환하면서 소스코드가 각 파트별로 DLL 모듈 기반으로 재정비되었다.

모듈화를 힘을 입어서 GLQuake, WinQuake, QuakeWorld 따위 같은 별도의 실행파일을 컴파일해서 생성할 필요가 없어졌다. 그 덕분에 당시 그래픽 카드 제조사별로 다양한 드라이버가 필요했던 OpenGL을 해당하는 부분만 DLL 파일로 컴파일 후 렌더링 드라이버 형식으로 제공할 수 있게 되어 기존의 퀘이크 1 엔진에 비해 효율적인 측면에서 큰 쾌거를 이루었다.

즉, 소스코드의 구조 자체가 완전히 변한 것이다.

또한, 게임플레이 코드는 퀘이크 1에서 사용됐던 매우 제한적인 스크립트였던 QuakeC는 버려지고 C언어로 게임플레이 코드를 작성후 DLL로 컴파일하는 방식으로 바뀌었다.

이와같은 이유로, 존 로메로의 다이카타나가 퀘이크 1엔진에서 퀘이크 2엔진으로 교체하면서 쉽게 업그레이드 할 수 있을것으로 생각했다가 완전 낭패를 보았다.
 
그리고 오프닝과 엔딩, 그리고 중간의 미션 브리핑으로 동영상이 포함되었는데 이 동영상의 포맷으로는 id 소프트웨어가 자체 개발한 ROQ 동영상 포맷이 사용되었다. 동영상 포맷마저 당시 일반적으로 사용하는 AVI 등을 사용하지 않고 자체 개발해서 사용하는 점은 당시 id 소프트웨어의 자존심과 저력을 보여주는 단면이다. 물론 지금 시점에서도 저러는 것은 고집에 불과할 뿐이며, id 소프트웨어도 지금은 그렇게까지 하지 않는다. ROQ 포맷은  당시 id 소프트웨어에 재직했던 프로그래머 '그래미 디바인'이 개발한 것이며 ROQ 포맷이 일부 게임들에 라이센스되어 사용되기도 했다. 언리얼 엔진을 사용하는 몇몇 게임들도 ROQ를 사용했으며 UDN(언리얼 개발자 네트워크)에서도 [http://udn.epicgames.com/Two/RenderingTopics.html id 소프트웨어의 ROQ 툴에 대한 언급]이 나온다.

하지만, 거시적인 엔진의 모습은 다시 태어난 것이나 다름없으나 미시적인 부분. 즉, 엔진의 세세한 기술적인 부분 하나 하나는 퀘이크 1 엔진과 동일한 엔진이나 다름이 없다.
렌더링 엔진은 색채가 들어간 광원효과(사실 이 부분도 매우 미미한 개선이다.)와 애니메이션 프레임 보정효과가 들어간 MD2 모델 포맷을 제외하면 달라진 부분이 거의 없으며 사운드 엔진도 스테레오 사운드만 지원하는 등 전혀 개선이 없었고(특수 음향효과의 지원이 전혀 없으며 그 흔한 서라운드 사운드도 미지원), 네트워크 엔진도 기존의 퀘이크월드의 네트워크 엔진을 그대로 사용하였다.
게임의 데이터파일도 퀘이크1에서 사용한 PAK 포맷을 그대로 사용한다.

결국, 기술적으로 퀘이크 1 엔진과 퀘이크 2 엔진은 같은 엔진이므로 퀘이크 2 엔진은 id Tech 3가 아닌 2의 넘버링을 유지하게 되었다. 그러나, 해외의 위키피디아 등지에서는 퀘이크 2엔진을 id Tech 2로 보고 "퀘이크 엔진"은 별도의 엔진으로 본다. id의 공식 인터뷰에서도 퀘이크 1엔진과 퀘이크 2엔진이 id Tech 2라고 분명히 했음에도 영문 위키피디아 등지의 주요 인원들이 퀘이크 2엔진만 id Tech 2이며, 퀘이크 1엔진은 별도의 "퀘이크 엔진"으로 구분짓는 것을 지속하여 어쩔 도리가 없는 것으로 보인다.

퀘이크 1 엔진 기반의 게임
 * [[wiki:"퀘이크 1" 퀘이크]] (1996)
 * [[헥센]] II (1997)
 * [[하프라이프]] (1998) - 골드 소스 엔진[* 일부 콘솔 명령어와 색체 광원 구현부분, BSP 구현 관련 부분을 제외하면 나머지는 전부 [[밸브]]에서 자체 제작했다.]

퀘이크 2 엔진기반의 게임
 * [[퀘이크 2]] (1997)
 * [[신]](SiN) (1998)
 * [[킹핀]]: 라이프 오브 크라임 (1999)
 * [[솔저 오브 포춘]] (2000) - 솔저 오브 포춘 시리즈의 첫 작품. 잡입 요소와 당시로서는 높았던 싱글 난이도, 밀리터리 FPS답지 않게 잔인한 비주얼을 표방한 게임.
 * [[다이카타나]] (2000) 
 * [[아나크로녹스]] (2001)

==== 골드소스 엔진 ([[하프 라이프]] 1 엔진) ====
[[하프라이프]] 1편의 엔진인 골드소스 엔진은 기원은 퀘이크 엔진에 두고 있지만, 일반적인 인식과는 달리 개발 도중 대부분의 영역이 새로 개발되어 사실상 다른 종류의 엔진이라고 할 수 있다. 자세한 것은 [[하프라이프]] 항목 참고.  

=== id Tech 3 (퀘이크 3, 리턴투캐슬 울펜슈타인 엔진) ===
attachment:/idt3.jpg?width=570

==== 퀘이크 3 엔진 ====
id Tech 2인 기존 퀘이크 2 엔진에서부터 개량된 엔진이 아닌 완전히 처음부터 새로 쓰인 엔진이며 99년작인 [[퀘이크 3 아레나]]를 통해 처음 선보였다.

[[언리얼 엔진]] 1과 대립각을 세웠던 엔진으로, id Tech 시리즈 중 상업적으로 가장 성공했다. 다만 세간에 알려진 것과 달리 엔진 비지니스는 이드 소프트웨어의 주 수입원이 아니었으며, 가장 성공했다는 id Tech 3 시절만 해도 게임으로 벌어들이는 돈이 훨씬 더 많았다고 한다. 게임판매로 얻는 수입의 약 10~20% 수준이었다고 한다.

퀘이크 3 엔진은 싱글플레이를 배제하고 멀티플레이 전용으로 만들어졌으며 엔진의 기술적인 특성 역시 그 점에 기인한 특성을 갖고 있다.

예를 들면 퀘이크 3는 빠른 움직임의 데스매치 게임이므로 호러 게임처럼 어두운 곳에서 플래시를 켜서 일부분을 밝히는 기능 따위가 필요 없으므로 퀘이크 3 엔진은 실시간 동적 광원효과를 지원하지 않는 대신 라이트맵의 컬러톤을 바꾸는 일종의 페이크로 동적 광원을 지원한다. 그 때문에 광원이 아예 없는 부분에다가 로켓이나 총을 아무리 쏘아도 밝아지지 않는다. 퀘이크 3 엔진을 라이센스 하여 개발된 게임들에서 [[메달 오브 아너 : 얼라이드 어설트]]를 제외한 모든 게임들은 어두운 곳에서 아무리 총을 쏘거나 플래시를 비춰도 그 부분은 절대로 밝아지지 않는다. [[아메리칸 맥기의 앨리스]]는 아예 동적광원을 퀘이크 2의 폭발효과처럼 폴리곤 처리해서 표현해버렸다.

외형적으로는 퀘이크 2 시절 언리얼 1과의 비교에서 당시 언리얼의 압도적인 기술적 우수성에 영향을 많이 받은 모습을 보였는데 게임의 맵 자체가 이전의 id 소프트웨어 게임들에 비해 매우 컬러풀해졌으며 기술적인 면에서도 지역 안개 효과, 곡면, 환경맵, 수면 효과 등, 기존의 id Tech 2(퀘이크 2 엔진)에 비해서 시각적인 기술면에서 크게 진일보 하였으나 모든 기술들이 오로지 데스매치용 게임인 퀘이크 3에 특화되어 만들어졌기 때문에 여전히 당시 언리얼 1 엔진이 광원이나 특수효과면에서 더 우수함을 보였고 퀘이크 3 발매 당시 언리얼 1 엔진은 언리얼 토너먼트 엔진으로 업그레이드 되면서 엔진 라이센스 시장에서는 언리얼 엔진의 강세가 계속되어 언리얼 엔진의 라이센스 수에 비해 퀘이크 3 엔진 라이센스 수는 더 적었다.

하지만 퀘이크 3 당시 까지만 하더라도 엔진 라이센스 시장은 거의 초창기였으며, FPS 장르 자체도 막 부흥기가 시작되었던 시기로서, id 소프트웨어의 주변에서 파생된 개발사들에 의하여 퀘이크 3 엔진으로 명작들이 많이 만들어졌다.

퀘이크 3 엔진은 작성된 언어 역시 이전의 id 소프트웨어의 엔진처럼 여전히 C++가 아닌 구조적 기반의 일반 C언어로 작성되었다.

퀘이크 3 엔진은 퀘이크 2 엔진에서 채용했던 방식을 버리고 통짜형 소스 구조로 돌아갔으며 구조상 엔진의 개조에는 많은 제한이 따랐다.

게임플레이 스크립트 작성부분 역시 DLL은 사용하지 않는 대신 C를 이용한 QVM을 이용하는데 QVM은 작업의 범위도 매우 좁고 해당 틀을 벗어날 수 없는 극히 제한적인 VM이다.

이러한 이유들로 인해 퀘이크 3 엔진을 사용한 게임 중에는 언리얼 엔진에서 가능하던 기존의 게임방식을 완전히 탈바꿈한 핀볼 같은 모드나 뮤테이터 등의 적용을 찾아볼 수 없다.

이전의 id 소프트웨어의 엔진들과 마찬가지로 엔진의 소스 자체가 퀘이크 3 소스이기 때문에 멀티플레이 전용 게임인 퀘이크 3 소스. 즉, id Tech 3을 사용한 게임들은 대부분 싱글플레이 파트와 멀티플레이 파트가 완전히 별개의 파일들로 구성된 별도의 게임으로 독립되어 있는 특징을 갖는다.

멀티플레이 파트는 퀘이크3의 소스를 조금 수정해서 모드 수준으로 개발한 정도인데, '스타트랙 : 보이저 엘리트 포스 1"의 멀티플레이 파트는 퀘이크 3를 스킨만 바꾸어 놓은 수준이었다.

싱글플레이 파트는 싱글플레이에 필요한 인공지능, UI, 스크립트 시스템 등 많은 부분들을 개발사에서 직접 개발해서 사용해야 했다.

버전 1.26부터는 퀘이크 3의 공식 확장팩이자 흑역사인 '퀘이크 3 팀 아레나'에 추가된 몇 가지 신기술이 포함되었다. 당시에는 '퀘이크 3 팀 아레나 엔진'이라고도 불렸다.

퀘이크 3 팀 아레나 엔진의 개선된 점은 다음과 같다.
 * 제한된 하이트맵 기능 추가 - 팀 아레나의 넓은 맵 3개에서 사용하였다.
 * 자체 개발 동영상 포맷인 ROQ 동영상의 게임 내 재생 기능 추가
 * 기존 MD3 모델 포맷의 개선 - 기존의 MD3은 상, 하체 2부분으로 구성
  * 개선된 MD3은 상체를 머리와 분리하여 총 3부분이 각각 별도의 애니메이션 수행 가능
 * MD4 스켈레텔 모델 포맷 추가 - MD4 모델 포맷은 엔진에 추가되었지만 팀 아레나의 추가된 캐릭터들은 모두 개선된 MD3를 사용하였으며 MD4는 쓰이지 않았다. 유저모드나 퀘이크 3 엔진 라이센스 작품에서도 쓰인 적이 단 한번도 없는 흑역사인 기술(...)

2005년에 소스코드가 공개된 이후로는 [[wiki:"True Combat" 트루 컴뱃]] 등의 작은 인디 게임이 이 엔진을 기반으로 하여 스탠드얼론 게임으로 만들어지고 있기도 하다.

==== 리턴투캐슬 울펜슈타인 엔진 ====
기본적으로 퀘이크 3 팀 아레나 엔진을 기반으로 해서 개량된 엔진이다. 리턴 투 캐슬 울펜슈타인(이하 RTCW) 엔진은 싱글플레이 개발에 필요한 여러가지 요소가 추가되고 개량된 것이 특징이다. RTCW도 싱글플레이와 멀티플레이가 완전히 별개의 파일들로 구성되어 있으며, 멀티플레이 파트는 기본적인 퀘이크3엔진을 그대로 사용하였으나 싱글플레이 파트는 싱글플레이에 필요한 스크립트엔진과 인공지능 시스템의 추가 및 기술적인 부분에서도 약간의 개량이 되었다.

참고로, 팀 아레나 엔진을 기반으로 했지만 RTCW도 여전히 버텍스 애니메이션인 MD3 포맷을 사용하고, 스켈레탈 애니메이션인 MD4 포맷은 사용하지 않는다(...)

이 개선된 싱글플레이용 RTCW엔진은 그레이메터 스튜디오에서 개선한 것이지만 RTCW 개발 자체가 id소프트웨어에서 외주를 준 것이기 때문에, RTCW의 소스 코드에 대한 모든 권한은 id소프트웨어가 가지고 있으며, 그에 따라 타사에 라이센스도 가능하게 된다. 콜 오브 듀티가 RTCW 엔진을 라이센스 받아 개발되었다. 실제로 콜 오브 듀티의 메뉴나 로딩화면 등에서 RTCW의 흔적을 쉽게 찾아볼 수 있다.

==== [[콜 오브 듀티 시리즈]]에 남은 [[IW 엔진]]의 잔재 ====
[[콜 오브 듀티]]는 첫 작품인 PC용 1편에 RTCW 엔진을 라이센스 받아서 상당 부분 개량해 개발되었다. 이 PC용 1편의 개발사인 인피니티 워드가 1편 개발 직후 개발에 들어간 후속작인 PC, Xbox 360용 [[콜 오브 듀티 2]]는 콜 오브 듀티 1의 엔진에서 지속적 개량을 통해 개발되었지만 Radiant 맵툴과 파일시스템을 제외하곤 id Tech 3 엔진 코드는 남아있지 않으며 실제로 [[콜 오브 듀티 2]]부터는 [[IW 엔진]]이라는 독자적인 이름을 사용하고 있다.

사실상 [[IW 엔진]]은 밸브의 [[소스 엔진]]에 퀘이크 1 엔진의 잔재가 아주 약간 남아 있듯이 퀘이크 3 엔진 코드의 잔재가 약간 남아 있는 것과 같으며, 그것을 퀘이크 3 엔진 또는 id Tech 3 엔진이라고 주장하는 건 무리가 있다.

그렇기 때문에 엔진의 라이센스 비용도 콜 오브 듀티 1 개발 때만 라이센스 비용을 지불했으며 콜 오브 듀티 2부터는 라이센스 비용을 지불하지 않는다. 다만 아직도 Radiant 맵툴과 일부 파일시스템 코드가 남아있는 이유로 크레딧에 매번 이드 소프트웨어를 언급해 주고 있다.

밸브의 [[소스 엔진]]의 경우는 맵툴 및 모든 유틸리티를 밸브가 자체 개발했고 파일시스템도 완전히 교체되었고 그저 콘솔 명령어에서 남은 단 몇십 줄의 코드만 남아있었기에 사실상 [[소스 엔진]]이 id Tech 1(퀘이크 1 엔진)의 개량이라고 주장하는 것은 억지에 가깝다. 몇십 줄의 코드가 남아있던 것도 하프라이프2 최초 발매시이고, 이후 엔진이 계속 개량되면서 퀘이크 1 엔진의 잔재는 완전히 사라졌다. [[소스 엔진]]과 비슷한 경우로 크라이엔진1에서 파생된 듀니아 엔진이 있다.

[[소스 엔진]]이나 듀니아 엔진과는 조금 다른 경우로서, [[언리얼 엔진]]을 바탕으로 큰 개조를 거친 게임들은 예외적으로 다른 엔진들의 개량과는 매우 다르다. [[데이어스 엑스]] 인비저블 워와 [[시프 : 데들리 쉐도우]]에 사용된 엔진과 [[스플린터 셀: 컨빅션]] 및 아이엠얼라이브에 사용된 LEAD엔진의 경우에도 [[언리얼 엔진]] 2의 구버전에서 뼈대만 남기고 기술적인 부분은 모두 새로 개발했으며 [[듀크 뉴켐 포에버]]도 [[언리얼 엔진]] 1 기반에서 [[언리얼 엔진]] 2의 일부 기술을 접목하고 렌더링 부분을 새로 개발했다. 하지만 [[언리얼 엔진]]을 바탕으로 한 게임들은 어떻게 개조를 하더라도 [[언리얼 엔진]] 고유의 시스템인 언리얼 코어 시스템과 액터 시스템, 언리얼스크립트 시스템 등에 기반해서 새로운 코드가 쓰여지며 개발툴인 UnrealEd 및 각종 에디팅 관련 시스템 등도 그대로 계승해서 개조가 되기 때문에 파일시스템까지 바꾸더라도 여전히 그 바탕이 언리얼 엔진 자체인 것을 부정하기 힘들다. 그런 이유로 듀크 뉴켐 포에버나 스플린터 셀 컨빅션 등 언리얼 엔진을 크게 개조해서 사용한 게임들은 게임을 실행하면 시작시에는 항상 언리얼 엔진 로고가 나온다.

건축을 예를 들어 비유를 하자면 [[소스 엔진]]이나 듀니아 엔진의 경우는 기존의 건축물들 한부분 한부분을 다 부수고 새로 만들다보니 결국엔 건물 전체가 처음 형태를 전혀 찾아볼 수 없는, 결국 공터에다가 완전히 새로운 건축물을 지은 것과 다를 바가 없는 경우다.

반면 [[언리얼 엔진]]을 크게 개조한 [[듀크 뉴켐 포에버]]나 [[스플린터 셀: 컨빅션]], 그리고 [[데이어스 엑스]] 인비저블 워와 [[시프 : 데들리 쉐도우]]에 쓰인 엔진의 경우는 [[언리얼 엔진]]이라는 일정한 틀과 규칙이 정립된, 마치 하나의 큰 도시 안에서 영역을 새롭게 확장하거나, 기존의 지역을 리모델링하거나, 아니면 일정 구역을 밀어버리고 새로 개발하거나 하는 것으로 비유할 수 있다. 사실 언리얼 엔진의 장점이자 다른 엔진들과 구별되는 가장 큰 특징 중 하나가 [[언리얼 엔진]] 고유의 시스템으로 구성된 틀을 갖추고 있다는 점이다.

id Tech 계열의 엔진들은 언리얼 엔진과 같은 고유의 틀이 정립된 엔진이 아닌 단순한 게임 소스코드로 이루어진 엔진이기 때문에 id Tech 3의 개조로 시작된 [[IW 엔진]] 역시 [[소스 엔진]]이나 듀니아 엔진의 경우와 비슷하다. 파일시스템의 잔재가 약간 남아있고 Radiant 맵툴을 여전히 그대로 사용하고 있다는 점이 [[소스 엔진]]이나 듀니아 엔진과는 약간 다른 점이지만 그부분을 제외한 기술적인 부분을 비롯한 나머지 모든 코드들은 인피니티 워드가 새로 작성한 코드이며 그 코드가 기존의 id Tech 3의 틀을 바탕으로 쓰여진 것도 아니기 때문에 사실상 인피니티 워드의 자체 개발엔진이나 다름없으며 [[IW 엔진]] 을 id Tech 3(퀘이크 3 엔진)의 개량이라고 주장하는 것 역시 무리가 따르는 주장이다.

[[IW 엔진]]은 사실상 기술적으로나 일반적인 면으로보나 최신 엔진이며 인피니티 워드의 자체 개발 엔진으로 볼 수 있지만 개발자 입장에서 봤을 때 한가지 큰 문제점을 가지고 있는데, 그 큰 문제점은 바로 구시대적인 Radiant 맵툴을 아직도 쓰고 있다는 점이다.
Radiant 맵툴은 id Tech 2(퀘이크 1 엔진)부터 id Tech 4(둠 3 엔진)까지 쓰인 맵툴인데 엔진의 기술적 발전에 비해 Radiant 맵툴의 발전은 거의 없었다고 해도 과언이 아니다.
그 결과 id Tech 4(둠 3 엔진)의 Radiant 맵툴도 [[소스 엔진]]의 Valve Hammer Editr와 마찬가지로 작업 환경이나 GUI의 편의성, 그리고 WYSIWYG적인 측면에서 1998년에 나온 [[언리얼 엔진]] 1의 UnrealEd보다도 떨어지는 여기도 그야말로 [[충공그깽]].
id Tech 3의 Radiant 맵툴에 기반한 [[IW 엔진]]역시 맵툴이 여전히 매우 구시대적이며 콜 오브 듀티 시리즈를 개발했던 한 레벨 디자이너는 이 점에 불만을 토로하기도 했다. 인피니티 워드에겐 새로운 엔진이나 맵툴을 개발하기보단 기존의 엔진을 조금씩 개량해서 새로운 콜 오브 듀티 시리즈를 계속 내놓는 것에 중점을 두었기 때문으로 추측된다. --액티비전의 압박--

모든 콜 오브 듀티 시리즈가 [[IW 엔진]] 기반으로 개발된 것은 아니다. Xbox, PS2, GC로 나온 콜 오브 듀티: 피니스트 아워와 콜 오브 듀티 2: 빅 레드 원은 렌더웨어 엔진으로 개발되었고 Xbox 360, PS3용으로 개발된 [[콜 오브 듀티 3]]도 id Tech 3와 관계가 전혀 없는 트레이아크의 독자적 엔진인 트레이아크 NGL 엔진으로 개발되었다. 그리고 모바일, 포터블 플랫폼으로 개발된 콜 오브 듀티 게임들도 당연히 별도의 엔진으로 개발되었다.

==== 리추얼 우버툴 ====
리추얼 엔터테인먼트는 퀘이크 2 엔진 기반의 SiN 개발 이후 자체개발 엔진인 Uber 엔진을 개발하고 있었으나 완성하지 못했다. 대신 퀘이크 3 엔진으로 신작 게임들을 개발하게 됐으며 자신들이 개발하던 기술 중의 일부를 퀘이크 3 엔진과 융합했다.

대대적으로 id Tech 계열 엔진은 언리얼 엔진과 다르게 엔진이 별도로 개발된 게 아닌, 해당 게임 자체의 소스코드가 엔진으로 불렸으며 라이센스는 해당 게임의 소스 전체를 제공하는 식이었다.

퀘이크 3 엔진은 본래 퀘이크 3 아레나가 멀티플레이 전용이므로 싱글플레이 관련 개발툴이나 소스가 전혀 없었으므로 이를 이용한 게임의 개발에는 여러가지 불편함과 많은 어려움이 따랐는데 리추얼에서 헤비메탈 F.A.K.K.2를 개발하면서 자신들의 자체 개발한 기술들을 추가하고 엔진을 크게 개조한 것이다.

리추얼이 퀘이크 3 엔진으로 [[헤비 메탈: F.A.K.K.²]]를 개발하면서 개선된 엔진이다. RTCW 엔진도 아니고, 팀 아레나 엔진도 아닌, 맨 처음의 기본적인 퀘이크 3엔진을 바탕으로 해서 리추얼의 자체 기술이 융합된 것이지만, 그 결과물은 팀 아레나 엔진은 비교조차 할 수 없고, RTCW 엔진보다도 훨씬 뛰어난 진보를 이루어내었다. 하지만 팀 아레나에서 추가된 하이트맵 기능과 게임내 ROQ 동영상 재상 기능은 없다.

추가 및 향상점은 다음과 같다.
 * 스켈레탈 애니메이션 - 팀 아레나 엔진 이전이므로 확장명은 MD3를 사용하지만 확장명만 같을뿐 사실상 리추얼이 100% 새로 쓴 코드이다.
 * 립싱크 - 입술모양 립싱크까지는 구현되지 않았지만 하프라이프 1 수준의 립싱크를 구현한다.
 * 페이셜 애니메이션 - 안면근육 움직임으로 표정변화 지원
 * 3D 디지털 사운드 - EAX, [[A3D]] 지원, 서라운드 사운드 및 도플러 효과 등 각종 사운드 효과 지원
 * 싱글플레이 관련요소 추가 (스크립팅 시스템, AI 시스템, UI 시스템 등)
 * 특수효과 개선 (새로운 파티클 시스템  새로운 스카이박스 시스템)
 * QVM 제거 후 C언어 기반의 DLL 게임스크립트 시스템 추가
 * 개선된 맵툴 Uber Tools Radiant - 개선된 엔진의 기능들의 사용하기 위한 여러가지 향상점과 더불어 툴의 편의성 자체가 기존의 퀘이크 3 Radiant와 비교할수 없는 수준이다.

근본적으로 퀘이크 3 엔진 기반이기 때문에 리추얼이 타사에 라이센스는 불가능하다.
하지만 예외적으로, EA에서 퀘이크 3 엔진의 무제한 라이센스를 받은 후 퀘이크 3 엔진을 EA 내부 개발사나 서드파티에 의해 외주개발로 개발을 하게 되었는데, 퀘이크 3 엔진의 근본적인 문제를 파악한 EA는 id 소프트웨어와의 특별 협약하에 퀘이크 3 엔진의 라이센스 비용은 id 소프트웨어에 지불하고, 리추얼에게 부가 비용을 지불한 뒤, 리추얼이 개선한 엔진을 받아서 개발하게 되었다.

그런 이유로, 리추얼 우버툴을 사용한 게임들은 리추얼의 자체 개발작인 [[헤비 메탈: F.A.K.K.²]]와 '스타 트렉: 엘리트 포스 II' 외에 EA의 내부 스튜디오 또는 서드파티에 의한 외주로 개발된 게임들인 [[아메리칸 맥기의 앨리스]]와 [[메달 오브 아너 : 얼라이드 어설트]], 그리고 두 개의 007 게임에도 사용되었다.

[[메달 오브 아너 : 얼라이드 어설트]]는 개발사인 2015가 자체적 개량을 통한 지형시스템을 도입해서 좁은 실내맵 위주의 그래픽만 표현 가능했던 기존의 id Tech 3 게임들에 비해 비교적 넓은 환경의 맵인 오마하 비치 상륙작전 등을 2002년 당시의 기술수준에서 매우 실감나게 구현하였으며, 엔진을 더 개량해서 기존의 id Tech 3 엔진에서 구현할 수 없었던 리얼 다이나믹 라이팅을 구현하였다. 그러나 리얼 다이나믹 라이팅은 무색 광원밖에 지원되지 않는다.

EA에서 사용한 우버툴은 퀘이크 3 엔진에 기반한 헤비메탈 F.A.K.K.2 엔진이었으나 리추얼이 헤비메탈 F.A.K.K.2 이후로 개발한'스타 트랙: 엘리트 포스 II'에서는 팀 아레나의 엔진을 기반으로 우버툴을 접목해서 팀 아레나 엔진에서 개선된 부분의 기능까지 사용하게 되었다.

퀘이크 3 엔진 기반의 게임
 * [[퀘이크 3: 아레나]] (1999)
 * '''퀘이크 3 팀 아레나''' (2000)
  * [[퀘이크 라이브]] (2010)
 * 스타 트렉: 보이저 엘리트 포스 (2000) - 퀘이크 3 엔진
 * [[wiki:"솔저 오브 포춘" 솔져 오브 포춘 II: 더블 헬릭스]] (2002) - 팀 아레나 엔진
 * 스타워즈 제다이 나이트 II: 제다이 아웃캐스트 (2002) - 팀 아레나 엔진
  * 스타워즈 제다이 나이트: 제다이 아카데미 (2003) - 팀 아레나 엔진
 * 다크 셀베이션 (2009)

리턴투 캐슬 울펜슈타인 엔진 기반의 게임
 * [[리턴 투 캐슬 울펜슈타인]] (2001)
  * [[울펜슈타인: 에너미 테러토리]] (2003)
 * [[콜 오브 듀티]] (2003)

리추얼 우버툴 기반의 게임
 * [[헤비 메탈: F.A.K.K.²]] (2000) - 퀘이크 3 엔진 + 우버툴
 * [[아메리칸 맥기의 앨리스]] (2000) - 헤비메탈 F.A.K.K.2 엔진
 * '제임스 본드 007: 에이전트 언더 파이어' (2001) - FPS 파트는 헤비메탈 F.A.K.K.2 엔진 사용, 레이싱 파트는 니드포스피드 엔진 사용
  * '제임스 본드 007: 에브리씽 오아 나씽' (2004)[ -  - FPS 파트는 헤비메탈 F.A.K.K.2 엔진 사용, 레이싱 파트는 니드포스피드 엔진 사용
 * [[메달 오브 아너: 얼라이드 어설트]] (2002)  - 헤비메탈 F.A.K.K.2 엔진 사용
  * 메달 오브 아너: 퍼시픽 어썰트 (2004) - 얼라이드 어썰트 엔진의 기본틀에서 노멀맵 지원 등 렌더링 변경, 하복 물리 엔진 도입 및 MOH Tech라는 이름을 붙이고 앞으로 메달 오브 아너 시리즈에 사용될 완전히 새로운 엔진이라고 주장했으나 엔진 구성 한계상 한번 쓰고 버려졌다.
 * 스타 트렉: 엘리트 포스 II (2003) - 팀 아레나 엔진 + 우버툴

=== id Tech 4 (둠 3 엔진) ===
attachment:/idt4.jpg?width=570

당시 게임계에 생소한 개념이던 노멀맵과 실시간 그림자를 들고 나와서 엔진 공개와 함께 충격적인 그래픽을 보여주었다. 이전 엔진에 비해 표현력이 비약적으로 상승한 것이 특징. 다만 앞선 그래픽을 보여주던 이러한 장점은 정작 [[둠 3]]의 개발이 늦어져서 손해 본 감이 있다.

id Tech 3 엔진까지는 [[wiki:"C(프로그래밍 언어)" C]]언어를 사용하고 있었는데 id Tech 4부터는 드디어 [[C++]]를 사용하였다.

엔진의 대부분이 C++로 재작성되기는 했지만 기본적인 바탕은 퀘이크 3 엔진의 자체 쉐이더 스크립트 시스템, 파일시스템 등을 그대로 계승하였다.

==== 둠 3 엔진 ====
[[둠 3]]를 통해 처음 선보였으며, 레이븐 소프트웨어에 라이센스 되어 [[퀘이크 4]]가 개발되었고 휴먼헤드 스튜디오에 라이센스 되어 [[wiki:"Prey" 프레이]]에 쓰이기도 했다. 기본적으로 4개의 텍스처(노멀맵, 범프맵, 스페큘러맵, 디퓨즈맵)을 사용하며, 라이트맵이 아예 없고 100% 실시간 다이나믹 라이트와 실시간 그림자로만 모든 그래픽이 표현된다. 그러한 기술적 특성을 부각시키기 위해 대부분의 맵들은 좁은 방과 복도 등 실내 위주로만 이루어져 있다.

둠 3 엔진을 사용한 퀘이크 4와 프레이도 엔진의 기술적 특성과 한계상 둠 3와 분위기가 비슷하다.
퀘이크 4는 게임플레이까지 둠 3와 크게 차이가 나지 않아서 둠 3의 모드 수준이라는 비판을 받았다.
둠 3 엔진을 사용한 프레이도 둠 3 엔진으로 개발을 하기 전의 오리지널 컨셉과는 분위기가 많이 달라졌는데 엔진의 기술적 특성과 한계로 인해 게임 분위기의 컨셉이 많이 변한 경우이다. 하지만 기존 FPS와는 다른 독특한 요소들로 게임플레이 자체는 둠 3와 판이하게 달랐다.

레이븐 소프트웨어에서 개발한 2009년작 [[울펜슈타인]]에서는 소프트 쉐도우, 피사계 심도, 텍스쳐 스트리밍 등의 기술이 추가되었으며, 이드 소프트웨어가 자체적으로 제작한 기존의 [[물리 엔진]] 대신 [wiki:"하복 엔진" 하복 물리 엔진]을 접목해서 개발되었다. 참고로 [[존 카멕]]은 이런 움직임에 아쉬움을 나타냈는데, 서드파티 기술이 접목되면 향후 소스 코드를 공개하는 데 있어 어려움이 있기 때문이다.

2011년 11월 1일, 둠 3의 풀 소스 코드가 곧 공개될 것이며, [[제니맥스]] 측 변호사의 허락만을 기다리고 있다는 존 카멕의 트윗이 있었으며[http://www.engadget.com/2011/11/01/carmack-doom-3s-engine-ready-for-open-sourcing-awaiting-ok/] 그로부터 3주 후인 11월 23일에 소스코드가 GPLv3 라이센스 하에 공개되었다.

==== 에너미 테리토리 : 퀘이크 워즈 엔진 ====
[[에너미 테러토리:퀘이크 워즈]]가 외주개발로 스플래시 데미지에 의해 개발되면서 id Tech 5의 간판 기술이기도 한 메가텍스쳐의 초기 버전이 포함되었다.[* 참고로 둠 3에도 메가텍스쳐와 관련된 코드가 약간 남아있으며 유저모드로 구동 가능하다.]

id Tech 3(퀘이크 3 엔진)를 이용해 외주개발로 RTCW가 만들어진 것처럼 id Tech 4(둠 3 엔진)를 이용해 외주로 스플래시 데미지에 의해 퀘이크 워즈가 개발되었다.
퀘이크 워즈 엔진은 기존의 둠 3 엔진에 비해 여러가지 요소가 개량되었는데 모든 개량은 스플래시 데미지에 의해 자체적으로 개량된 것이지만, 메가텍스처 기술만은 id 소프트웨어에 의해 지원을 받아 추가되었다. 본래 둠 3 엔진 코드에 메가텍스처 관련 코드가 약간 남아 있었으며, 퀘이크 워즈는 id Tech 5에서 본격적으로 사용될 메가텍스처 이전의 비교적 초기버전인 기술을 시범적으로 도입한 케이스라고 볼 수 있다.

퀘이크 워즈는 메가텍스처의 힘을 받아 기존 둠 3 엔진 게임에서 볼 수 없었던 광활한 대지를 표현했다. 하지만 퀄리티는 메가텍스처라는 이름이 무색할정도로 매우 실망스러운 수준이었다.

퀘이크 워즈 엔진은 타 개발사에 라이센스 되어 사용되진 않았지만 퀘이크 워즈의 개발사 스플래시 데미지는 퀘이크 워즈 엔진에 기반해서 자체적으로 큰 개조를 거쳐 [[브링크]]를 개발하였다. [[브링크]]는 스플래시 데미지가 자체적으로 추가한 가상 텍스쳐링 기술과, 멀티플랫폼 지원이 추가되었으며 렌더링 기술 부분에서도 다양한 최신 기술을 지원하도록 개선되었다.

둠 3 엔진 기반의 게임
 * [[둠 3]] (2004), [[둠 3: 악마의 부활]] - 확장팩 (2005),  둠 3: BFG 에디션 - 리마스터링 (2012)
 * [[퀘이크 4]] (2005) - 레이븐 소프트웨어
  * [[울펜슈타인]] (2009) - 레이븐 소프트웨어, 퀘이크 4 엔진을 레이븐 소프트웨어가 자체적 개조
 * [[프레이]] (2006) - 휴먼헤드 스튜디오가 개조


퀘이크 워즈 엔진 기반의 게임
 * [[에너미 테러토리: 퀘이크 워즈]] (2007) - 스플래시 데미지 개발이며 id 소프트웨어에 의해 메가텍스처 기술 지원
  * [[브링크]] (2011) - 스플래시 데미지, 퀘이크 워즈 엔진을 스플래시 데미지가 자체적 개조

=== id Tech 5 ===
attachment:/idt5.jpg?width=570

[[wiki:"레이지(게임)" 레이지]]에 개발에 사용된 엔진이다. 락스타의 차세대 게임 엔진인 [[RAGE 엔진]]([[Rockstar Advanced Game Engine]])과 같은 이름을 갖게 되어서인지는 몰라도 퀘이크 엔진, 둠 엔진에 비해 상대적으로 지명도가 약한 레이지 엔진이라고 불리지 않고 id Tech 5 엔진이라고 불리게 되었으며, 이로 인해 기존의 엔진들도 id Tech 시리즈로 개명을 하게 되었다. 

기본적으로 함수명 등을 id Tech 5로 지정하였으나 엔진 자체가 레이지와 별도로 개발된게 아닌 레이지의 코드와 병합되어 개발된 형태로, '''id Tech 5 = 레이지 소스코드'''라고 보면 된다.

id Tech 3부터 이어진 파일시스템과 id 소프트웨어 고유의 셰이더 스크립트 등 엔진의 프레임워크를 id Tech 4로부터 가져왔으며, 렌더링 엔진 등 기술적인 부분은 전반적으로 새로 쓰여졌다. 렌더링 엔진은 메가텍스처 기술을 중점적으로 개발되었다. 그리고 기존의 맵에디터인 Radiant 대신 id Studio라는 새로운 이름을 가진 툴을 탑재하였다.

최신의 엔진들에서 실시간 그림자 처리는 기본 지원 요소이듯 id Tech 5도 엔진 자체에서 실시간 그림자 처리는 가능할것이라고 생각하는 이들도 있었지만 기본적으로 레이지에 사용된 id Tech 5 엔진은 Global Dymanic Lighting(전체 씬에 대한  동적인 실시간 광원)을 지원하지 않으며 당연히 전체 씬에 대한 동적광원이 없으므로 전체 씬에 대한 실시간 그림자도 지원되지 않는다. 물론 그것을 지원하는게 어려운 일은 아니지만 엔진의 구조상 메가텍스쳐와 연관된 타 기능과의 호환성과 성능 문제로 제거했다고 한다.

결론적으로 레이지 엔진에서는 동적 객체가 만들어내는 그림자 및 동적 객체 자체의 셀프셰도우만 지원된다.

이는 이전의 이드소프트웨어 게임들의 엔진이 그 게임에 최적화된 기술들만 가지고 있어 범용적으로 개발되지 않은것과 같은것으로, [[wiki:"레이지(게임)" 레이지]]는 콘솔에서 60프레임 구현을 위해 모든 정적 객체의 그림자를 라이트맵에 구워버려서 요구사양을 낮추고 프레임을 높이는 방향으로 개발되었기 때문에 굳이 전체 씬에 대한 동적 라이팅을 고려할 필요가 없었던것이다.

id Tech 5를 이용한 둠4는 중간에 레이지팀에서 엔진을 받아오면서 둠4의 게임플레이와 기술적 성향의 변화에 따라 레이지 엔진과는 다른 방향으로 개발되었을것으로 추측되며 둠4와 관련된 인터뷰에서도 레이지 개발팀으로부터 받은 엔진을 둠4에 맞게 많은 변경을 가했다고 한적이 있다. 현재 둠4의 엔진은 개발이 두어번 갈아엎어지면서 차세대기로 넘어간 상태이기 때문에 레이지의 엔진과는 많이 다른 모습을 보여줄 것으로 생각된다.

"울펜슈타인 더 뉴 오더"는 레이지의 엔진으로 개발을 시작했으나 동적 광원에서 많은 개량을 거쳤다고 하며, "디 이블 위딘" 역시 레이지의 엔진으로 개발했으나 개발사인 탱고 게임웍스에 의해 자체적으로 많은 변형을 가했으며 특히 동적 광원 부분에 많은 개량을 거쳤다고 한다.

참고로, 울펜슈타인 더 뉴 오더는 존카멕이 퇴사전까지 개선한 엔진이 사용되었고, 디 이블 위딘은 존카멕과 관련없이 탱고 게임웍스에서 자체적으로 개량된 엔진이다. 둠4 역시 존카멕에 의해 개선된 엔진이 사용되고 있다.

레이지는 동적 객체에만 실시간 그림자를 사용하고, 정적 객체의 그림자는 라이트맵으로 자세히 보면 캐릭터 그림자는 빛의 방향에 따라 변하지만 '''배경의 그림자'''는 꿈쩍도 하지 않는 부자연스러운 모습을 보여준다. 그러나 최신의 동향에 따라 [[글로벌 일루미네이션]][* 광역 조명. 지역조명에서 발전된 개념으로, 지역조명이 개개의 물체에 따로 따로 빛을 비춘다고 하면 광역조명은 물체에서 반사된 빛이 다른 물체에 영향을 미치는 것까지 계산한다. 이를 통해 반사광이나 물체의 색으로 주변이 물드는 등의 모습을 보여주어 더욱 자연스러운 비주얼 구현이 가능해진다.]을 적용한 라이트맵을 사용하였기 때문에, 정적인 모습 자체로만 보면 매우 아름다우며 사실적인 느낌의 라이트맵 퀄리티를 보여 준다.

그리고 멀티플랫폼을 지원하는 등 엔진이 기존의 id 소프트웨어 엔진과 다르게 모든 면에서 환골탈태하면서 'id eXtended Technology'라는 이름으로 발표를 하려고 했었으나 이 이름은 공식적으로 외부에 발표되진 않았다.

사실 잘 알려지지는 않았었지만 예전 퀘이크 1, 2, 3 및 둠 3 엔진은 모두 'id Technology'라는 단일 명칭의 공식 라이센스 명칭을 가지고 있었다.

하지만 엔진 라이센스 시장에 본격적으로 재개를 준비하면서 그동안의 역사를 재정립하기 위해 결국 둠 엔진부터 각 엔진 세대별로 id Tech에 숫자를 붙여 id Tech 시리즈로 개명을 하게 됐고 최종적으로 id eXtended Technology는 id Tech 5라는 이름을 갖게 되었다.

하지만 엔진 개발은 순조롭지 않았던 듯 보이며 [[wiki:"레이지(게임)" 레이지]]의 개발도 오래 지연되었고 id 소프트웨어가 베데스다 산하의 제니맥스에게 인수되어 더 이상 독립개발사가 아니게 되어버리면서 엔진 라이센스 시장에서 철수하였고, 그로 인해 더 이상 엔진을 외부 개발사에 라이센스하지 않게 되었다.

다만, 예외적으로 제니맥스와 id 소프트웨어의 모회사인 [[베데스다]]의 유통망을 통해 게임을 출시해야 한다는 조건으로 엔진 라이센스가 가능한데, 엔진 라이센스로 인한 유통사 교체는 현실적으로 일어날 확률이 높지 않으므로 사실상 서드파티로의 라이센스를 금지한 것이나 다름 없다. 하지만 이런 이유로 인해 베데스다 산하의 개발사들에게는 엔진이 사용될 수 있을 것이며, [[리딕 연대기]]와 [[다크니스]]의 개발자가 설립한 '머신 게임즈'의 경우 베데스다의 자회사로 편입됨과 동시에 id Tech 5를 차기작에 사용할 것이라고 밝혔다. [[EA]]의 [[wiki:"프로스트바이트(엔진)" 프로스트바이트]] 엔진과 마찬가지로 계열사 전용 엔진으로  된 것이라 보면 된다. 프로스트바이트 엔진의 경우엔 왜 타사에 라이센스 안하는지 정확한 이유는 밝히지 않았지만 유비소프트나 바이오웨어에서 다수의 사내 전용으로 개발된 엔진들이나 번지, 343의 자체 엔진 등이 대부분의 개발할 게임에 완전특화된 엔진이거나 범용적으로 사용 가능하더라도  타사 라이센스를 주기엔 개발툴과 개발환경이 제대로 갖추어지지 않아서 사내에서 자체적 교육을 통해서만 사용될 수 밖에 없기 때문인데(물론 예외적으로 예전 id 소프트웨어와 레이븐 소프트웨어의 관계처럼 바이오웨어의 엔진으로 옵시디언 엔터테인먼트에서 비슷한 류의 게임을 만들기도 했고, 헤일로 1의 엔진으로 어떤 회사에 의해 좀비 FPS 게임이 나오기도 했다.) id Tech 5의 경우에는 id Tech 3에 해당하는 퀘이크 3 엔진이 타사엣 제법 많이 쓰였기에 단순히 제니맥스의 의지로 라이센스를 하지 않는 것이라고 생각할수도 있었으나.. 2013년 2월 공개한 레이지 개발툴로 id Tech 5의 개발툴인 id Studio를 접해본다면  "id Tech 5를 타아세 라이센스하지 않는 이유"가 명확하게 드러난다. 괜시리 이상한 회사에 라이센스 줬다가 실리콘 나이츠 에픽 소송 사건 비슷한 따위의 일에 휘말릴지도 모르는 일이니 말이다.

사실 id Tech 시리즈 중에 타사에서 가장 많이 사용되었던 id Tech 2, 3도 약 10여 타이틀 안팎이며 그마저도 대부분이 id 소프트웨어 패밀리 계열이었던 레이븐 소프트웨어, 리추얼 엔터테인먼트와 그레이메터의 작품이다.
id Tech 2는 레이븐과, 퀘이크 1확장팩을 만들었던 리추얼의 신, 전 id 소프트웨어 멤버였던 존 로메로의 다이카타나와 역시 전직 id 소프트웨어 멤버였던 톰홀의 아나크로녹스 등 id 패밀리 계열에만 쓰였고, 킹핀을 개발한 개발사 역시 킹핀 개발시부터 id소프트웨어와 협력으로 후에 id 소프트웨어 패밀리가 되어 RTCW를 만든 그레이메터의 전신이다.
id Tech 3도 EA를 통해 메달오브아너 얼라이드 어썰트를 개발한 2015와 007 FPS 게임 두개를 제외하고는 레이븐, 리추얼 등 id 소프트웨어 패밀리 계열사 작품들이며, EA에서 사용한 id Tech 3는 단순한 퀘이크 3엔진이 아닌 리추얼에서 툴과 기능을 개선한 리추얼 우버툴을 사용했다. 콜오브듀티 역시 싱글플레이를 위해 개량된 RTCW 엔진을 사용해 2015에서 이미 id Tech 3를 사용한 개발진이 개발한 것이다.

그래도  그떄까지는 엔진과 툴이 복잡한 수준까지 가지는 않던 시절이니 어느정도 사용은 가능했겠다만...
id Tech 5의 수준에 와서는 개발과정과 절차가 복잡해져감에 개발환경이 그만큼 많은 것을 뒷받침해줘야만 한다.

id Tech 5의 개발툴킷인 id Studio에 대해서 설명하자면 id Tech 2~4까지 사용하던 Radiant 툴 대신에, id Tech 5부터 id Studio라는 이름으로 마치 새로운 툴인것처럼 나왔지만, 실상은 메가텍스처 관련 에디팅 기능이 추가되고 일부분 향상이 이뤄진 Radiant일 뿐, 새로운 툴이 전혀 아니다. 이부분은 매우 실망스러운 부분인데, 최신 엔진답지 않게 정말로 툴이 구시대적이다. 이는 구 구식 WorldCraft를 기반으로 했던 Valve Hammer Editor를 그대로 쓰고 있는 소스엔진의 최신버전도 여전히 마찬가지이지만 '''이 id Tech 5의 id Studio라는 툴도 GUI나 에디팅 작업의 WYSIWYG적인 측면에서 정말로 과장하지 않고, 1998~2000년에 나온 언리얼엔진 1의 기반 게임들(언리얼 1, 언리얼 토너먼트 1, 데이어스 엑스 1 등)에서 볼 수 있는 UnrealEd 1, UnrealEd 2보다 뒤떨어진다.''' 과장으로 출시시기가 13년 차이나는 것을 비교하는게 아니다. 과장 안보태고 정말이다. 못믿겠다면 당장 레이지의 개발툴을 실행시켜보고 1998년작 언리얼1을 설치하고 UnrealEd 1를 실행시켜서 비교해보라.

http://www.youtube.com/watch?v=-wnnD9Qx158 - 레이지 개발툴킷(id Tech 5 id Studio) 기본 튜토리얼

http://www.youtube.com/watch?v=M6EjedoHDE0 - 데이어스 엑스 1(언리얼 엔진 1 UnrealEd 1.0) 기본 튜토리얼 1/2
http://www.youtube.com/watch?v=UsXCnokdkXI - 데이어스 엑스 1(언리얼 엔진 1 UnrealEd 1.0) 기본 튜토리얼 2/2

구해서 실행할 수 없다면 위의 두 영상으로 비교해보자. 맵의 기본 제작만으로도 라이팅과 오브젝트 배치가 직관적이고 편히라고 빠르게 가능한것에서부터 이미 많은 차이를 보인다.

만일 구해서 상세히 비교를 해본다면 그렇게 오래된 엔진의 개발툴과 비교를 하더라도 이건 뭐... id Tech 5는 개발툴의 구성, 개발작업의 편의성, 개발환경의 최적화는 상용 엔진이 절대로 될 수 없는 퀄리티며, 개발툴 인터페이스와 엔진 자체의 기능적, 구성적 한계가 명확하기 때문에 타사에서 만약 라이센스를 따 간다 해도 개발자들이 엔진에 적응하는 것과 프로젝트에 맞게 엔진을 변경하는 데 많은 시간과 노력이 필요할 것이기 때문에, 정황상 타사에 라이센스를 판매하는 건 불가능하다고 자체 판단했을 것으로 보인다.

==== 메가텍스쳐 ====
일반적으로 사용되는 텍스처 타일링은 다양한 크기의 텍스처들을 각각 하나의 "타일"로 정의하고 비디오 메모리에 점유되어 격자무늬처럼 반복해서 사용하더라도 비디오 메모리에 점유된 텍스처는 각 텍스처(타일)의 용량만큼만 차지하게 된다. 그리고 부위별로 회전, 스케일링, 왜곡 등을 통해 몇 가지의 텍스처만으로도 동일한 타일이 반복되는 느낌을 어느정도 상쇄 시킨다. 그리고 그 위에 또 다른 텍스처인 데칼을 덧씌워 추가적인 무늬를 꾸미기도 한다. 테칼 역시 타일과 동일하게 단일 또는 여러개의 텍스처로 구성된다.

타일의 갯수가 많으면 동일 텍스처를 반복해서 쓰는 경향은 적어지고 데칼도 많이 사용할 수록 표현하고자 하는 다양성이 증가하겠지만 타일이던 데칼이던 사용하는대로 해당 텍스처의 용량만큼 메모리를 점유하므로 메모리 용량에 따라 사용할 수 있는 텍스처의 갯수(각 텍스처들의 용량에 따라)가 제한되어 아티스트가 원하는 모든 것을 완전하게 표현하기엔 제약이 따른다.

메가텍스쳐의 개념과 구현방법은 매우 단순하다. 타일링 방식 대신 맵 전체에 통째로 씌우는 단 하나의 거대한 메가텍스쳐를 사용하고 그것을 스트리밍 로딩을 통해 보여지는 부분만 메모리에 올려놓고 사용한다는 것이 기본 개념이다.

맵 에디팅 작업 시 1개 맵당 하나의 메가텍스처에 스탬프(데칼)를 마구 찍어서 다양한 무늬를 만들더라도 그것은 어차피 단 하나의 메가텍스처에 덧칠하는 것 일뿐, 별도의 데칼이 게임상에서 로딩되는 게 아니기 때문에 게임 실행시에는 단지 1개 맵에서 1개의 메가텍스처만을 보여지는 부분에 한하여 스트리밍으로 로딩한다.

이로 인해 텍스처 메모리의 제약에서 해방되고 아티스트가 추구하는 바를 그대로 표현할 수 있도록 한다는 것이 메가텍스처가 개발된 의도이다.

메가텍스처의 주요 개념은 다음과 같다.
 * 맵 전체에 단 하나의 거대한 텍스처를 통째로 씌운다. 이 하나의 거대한 텍스처를 "메가텍스처"라고 부른다.
 * 메가텍스처는 맵 상의 모든 정적 오브젝트를 포함한 맵 전체에 통째로 씌워진 상태에서 스탬프를 찍는 방식(데칼을 텍스처 위에 덧칠하듯이)으로 덧칠하는 텍스처 작업이 이루어진다.
 * 메가텍스처 위에 여러 종류의 스탬프를 마구 찍어서 저장하더라도 실제 게임에선 여러개의 레이어로 로딩되는 것이 아닌 단면 이미지로 로딩된다. 쉽게 말해서 포토샾에서 레이어가 수십가지 존재하더라도 그림파일로 저장하면 단순한 이미지로만 저장되는 것과 같은 이치이다. 그리고 당연한 얘기지만 디퓨즈 텍스처에만 사용되지 않고 노멀맵, 라이트맵, 쉐도우맵 등 모든 텍스처 맵핑이 메가텍스처 방식으로 구현된다.
 * 메가텍스처는 전체가 메모리에 로딩되지 않고(무지막지한 용량 때문에 당연히 전체를 한번에 로딩하지 못한다.) 보여지는 부분만 스트리밍 로딩된다.

메가텍스처의 의도한 장점은 다음과 같으나, 장점이란 말이 무색할정도로 실제효용성에서 거의 이득이 없을뿐 아니라 결과적으로 단점만 생기게 되었다.
 * 의도한 장점 1 : 정적 오브젝트를 포함한 맵 전체에 통째로 씌운 단 하나의 텍스처에 스탬프를 찍는 방식으로 작업하므로 아티스트가 표현의도를 반영하기가 용이하다. 쉽게 말해 이미 그림이 그려진 오브젝트들을 하나씩 배치하는게 아니라, 모든 오브젝트의 배치와 맵 모양이 먼저 완성된 상태에서 그 위에 그림을 그리는 것이다. 그로인해 아티스트의 표현의도를 반영하기가 용이하다.
  * 실제 효용성 : 맵 전체에 걸쳐 단 하나라도 반복되는 무늬가 없으려면 스탬프로 찍는 텍스처 하나하나가 고유해야하며, 그렇기 위해선 텍스처 아티스트의 엄청 많은 작업 결과물들(동일 텍스처를 회전하던, 왜곡하던 스케일링하던, 모두 고유한 텍스처를 쓰던)이 필요하다. 이것을 의도한 존 카멕은 "맵 전체에 모두 유니크한 텍스처를 사용하는걸 강요하지는 않는다. 타일링을 쓰되 필요한 아티스트의 의도에 따라 필요한 부분에만 유니크한 텍스처를 사용하면 된다."라고 말을 했지만, 이렇게 작업한다면 애초에 의도한 메가텍스처의 의미가 없어진다. 맵 전체에 걸쳐 유니크한 텍스처를 사용하려한다면 아티스트의 엄청난 작업량이 필요하니, 아티스트의 작업량을 줄이기 위해 부분적으로만 유니크한 텍스처를 사용하라는 말인데, 메가텍스처 없이도 타일링으로 동일 텍스처의 스케일링, 회전, 왜곡등을 통해 반복 무늬 느낌을 제거할 수 있으며 근래의 대부분의 게임들에서 그런식으로 이미 개발되어있다. 가끔 타일링이 나타나는 경우가 있으나 일부러 뚫어져라 쳐다보며 반복 무늬를 찾으려고 하지 않는 이상 거의 눈에 띄지도 않기 때문에 메가텍스처가 의도한 이 부분은 결론적으로 아무런 효용성이 없는 것이다.
  * 발생된 단점 : id Tech 5의 메가텍스처는 128000x128000 픽셀로 이루어진 메가텍스처를 맵 전체에 늘려서 사용하는데, 이는 맵이 크면 클 수록 동일한 텍스처의 크기가 늘여지는 것이므로 맵이 커질수록 실제 게임에서 보여지는 텍스처는 저해상도화 된다. 메가텍스처는 말 그대로 거대한 크기의 이미지를 저장한 파일이기 때문에 용량이 엄청나다. 일반적인 제작 방식에서 데칼을 예로 들자면, 텍스처의 스케일링, 회전, 왜곡을 하여 다양한 모양으로 타일 위에 덧 씌우더라도 파일로는 해당 원본 데칼 텍스처만 필요하고 텍스처 메모리에 올라가는 것도 단 하나의 데칼 텍스처뿐이다. 그러나 메가텍스처는 일단 맵 전체를 무조건 하나의 거대한 텍스처 파일로 저장한 것이기 때문에 엄청난 용량이 필요하게 되는 것이다. 레이지에서 하나의 맵에 사용되는 메가텍스쳐는 그 용량이 무압축 시 80GB에 달한다. 이는 압축을 거치며 1/250 수준으로 크게 줄어들긴 하지만, 압축으로 많은 손실이 발생되며 압축된 용량 또한 타 게임에 비하면 여전히 무지막지하다. 하지만 엄청난 용량과는 다르게 레이지를 통해서 보여준 결과물로는 레이지의 큰 맵을 맵 하나당 128000x128000의 해상도만으로 커버할 수 밖에 없기 때문에 오히려 "최근 게임들에 비해 턱없이 낮은 텍스처 해상도"를 보여주고 "맵 전체에 반복되는 텍스처가 단 한개도 없어서 가는 곳마다 새로워 보인다는 느낌을 주지도 못하면서" 이렇게 과도한 용량을 차지한다는 것은 실로 엄청난 단점이 아닐 수 없다. 
 * 의도한 장점 2 : 보여지는 부분만 스트리밍으로 로딩됨에 따라 게임에서의 텍스처 메모리 사용률은 고정적이므로 텍스처 메모리 관련 최적화는 레벨 디자이너가 별도로 신경쓰지 않아도 된다.
  * 실제 효용성 : 보이는 부분만 스트리밍 로딩하므로 메모리 사용률은 고정적이다. 확실히 이부분은 텍스처 메모리에 한해서 메모리 최적화를 신경쓰지 않아도 된다. 그러나 대부분의 최신 엔진들이 맵 에디팅 작업 시 텍스처뿐 아니라 다양한 부분에서의 최적화 프로파일링 툴이 실시간 작동하여 체크해주기도 하지만, 그것이 아니더라도 사실상 아티스트가 텍스처 메모리를 신경쓰며 작업하진 않고 한 화면에 과다한 용량의 고해상도 텍스처가 다수 들어가지 않는 이상(실제로 그렇게 될 경우는 전무하다.) 퍼포먼스에도 거의 영향력을 미치지 않는다. 게다가 텍스처 스트리밍 로딩은 일반적인 텍스처를 사용한 제작방식에서도 지속 사용되어오던 부분으로, 맵 전체의 텍스처가 한번에 메모리에 다 로딩되지 않고 보여지는 부분만 부분적으로 로딩이 가능하며, 이는 메가텍스처에서 말하는 텍스처 가상화 스트리밍 로딩과 실제적으로 아무런 차이가 없는 것이다. 결론적으로 이 부분도 실제로는 아무런 효용성이 없다고 볼 수 있다.

메가텍스쳐는 그 이름으로 인해 많은 오해를 낳는데, 일반적으로 생각하는 것과는 다르게, 위에서도 언급되었지만 게임하면서 엄청난 해상도의 텍스쳐가 보이지는 않는다. 메가텍스쳐는 하나의 대형 텍스쳐를 맵 전체에 늘려 사용하기 때문에, 오히려 일반적인 텍스처를 사용한 제작방식에 비해 해상도가 떨어져 보이며 이 문제는 맵이 넓을 수록 더욱 심화된다. 퀘이크 워즈의 경우, 지형에 디테일 텍스쳐를 사용함으로써 이 문제를 해결하려 했다. 하지만 디테일 텍스쳐는 여러가지 단점을 안고 있는 임시 해결 방편에 불과하며, 무엇보다 자연스러운 비주얼을 구현한다는 메가텍스쳐의 기술 방향과는 정면으로 충돌한다. 이런 이유들 때문에 [[wiki:"레이지(게임)" 레이지]]에는 쓰이지 않았으나, 게임 발매 후 텍스쳐 해상도에 대한 불만이 엄청났던 관계로 이후 패치를 통해 디테일 텍스쳐 옵션이 추가되었다.

메가텍스쳐는 화면에 보여지는 부분만 메모리에 불러오는 가상 텍스쳐링 방식이기 때문에, 이론적으로는 텍스쳐 해상도에 제약이 없지만 실제적으로는 미디어 용량에 의해 텍스쳐 해상도가 제한된다.[* 존 카멕은 트위터에서 한 아티스트가 작은 주사위에 2048x2048 해상도의 텍스쳐를 붙여놨다고 한숨을 쉬며 말했다.(...) 보여지는 부분만 스트리밍 로딩되므로 퍼포먼스에는 전혀 영향을 미치지 않지만, 용량을 줄이기 위해 작은 텍스쳐로 교체해야 했다고 한다.] 메가텍스처 자체가 128000x128000 해상도의 이미지로 저장되기 때문에 용량이 엄청나며, 메모리에서는 가상화로 해결할 수 있다지만 미디어에는 어쨌든 어떤 방식으로든 통째로 저장해야 한다. 

이로 인해 기종 싸움이 끊이지 않는 [[루리웹]]에서는 [[플빠]]와 [[엑빠]]들의 또다른 싸움의 빌미가 되기도 했다. PS3는 한 장의 블루레이에 최대 50기가를 담을 수 있고, PC는 하드 인스톨로 인해 딱히 제한이 없는 데 반해, 엑스박스 360은 하드가 존재하지 않는 아케이드 모델과, DVD 한 장에 최대 6.9기가 까지만 사용 가능하다는 단점이 있어 [wiki:"레이지(게임)" 레이지]의 텍스쳐를 모두 온전히 담기에는 어려움이 있었다. 여기에 세 장의 DVD를 사용하는 게임에 대한 디스크 로열티 문제도 있어, 레이지는 결국 개발 도중에 게임 구조를 DVD 두 장에 맞게 수정해야 했다.[* 원래 게임은 총 여섯 파트로 구성되어 있었으나, 나중에 그것을 두 파트로 뭉뚱그려 다시 디자인했다. 다만 게임 볼륨이 적어진 것은 아니다.][* 레이지의 개발에 있어 문제가 된 것은 [[엑스박스 360]] 뿐만이 아니었다. [[플레이스테이션 3]] 또한 Cell 프로세서의 해괴한 구조 때문에 id Tech 5 엔진을 뒤늦게 대거 수정해야 했다.] 이런 용량 문제로 인해 엑스박스 360용 레이지는 눈에 잘 보이지 않는 언덕 위의 텍스쳐 등이 타 기종에 비해 다소 압축될 것이