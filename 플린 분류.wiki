플린 분류
Flynn's Taxonomy

 * 상위 항목 : [[컴퓨터 관련 정보]], [[하드웨어]], [[CPU]]

attachment:flynn.jpg

[[목차]]

== 개요 ==
[[스탠퍼드 대학]]의 교수인 [[http://en.wikipedia.org/wiki/Michael_J._Flynn 마이클 J. 플린]]이 1966년에 제안한 컴퓨터 구조 분류이다.
명령어(Instruction)와 데이터 입력(Data stream)의 개수에 따라 구분한다.

== 분류 ==

=== SISD ===
Single Instruction Single Data stream
한 번에 데이터 하나를 명령어 하나로 처리하는 기법. [[폰 노이만 구조]]의 컴퓨터는 기본적으로 이 기법을 따른다. 가장 기본적이고 간단한 구조이지만 명령어를 실행할 때마다 명령어와 데이터를 읽어와 처리해야 하기 때문에 효율이 떨어진다.

=== SIMD ===
Single Instruction Multiple Data stream
한 번에 데이터 여러 개를 명령어 하나로 처리하는 기법. 아래 상세 설명 참고.

=== MISD ===
Multiple Instruction Single Data stream
한 번에 데이터 한 개를 여러 명령어로 처리하는 기법. 예를 들어 곱셈을 하고 싶은데 명령어는 SHIFT 연산과 ADD 연산만이 있다고 하면, SHIFT와 ADD를 반복하여 곱셈을 구현할 수 있다. 이것을 소프트웨어 레벨이 아닌 프로세서 레벨로 구현한 것이 MISD이다. [[CPU]]에서 흔히 사용하는 [[파이프라인(CPU)|파이프라인]] 기법이 이에 해당한다. CPU 밖에서 보자면 데이터 한 개를 넣어 결과 한 개를 얻어내므로 SISD와 크게 구별하지 않는 경향이 있다.

=== MIMD ===
Multiple Instruction Multiple Data stream
한 번에 데이터 여러 개를 여러 명령어로 처리하는 기법. SIMD와의 차이점은 SIMD로는 같은 데이터를 여러 개 처리하면 같은 값이 여러 개 나오지만 MIMD로는 모두 다른 결과가 나올 수 있다. 현대의 동시적 멀티스레드 프로그램들은 모두 MIMD라고 볼 수 있다.

== SIMD 상세 ==

현재 대부분의 프로그램은 SISD방식으로 동작한다. 즉 하나의 명령으로 하나의 데이터를 처리하는 것이고 2개의 데이터를 처리하려면 2번 연산한다. 라이브러리 수준의 프로그램이 아닌 경우에는 백이면 백 SISD로 구현되는데 [[CPU]]의 성능을 100% 활용하지 못하는 것이다.

CPU 정보를 볼 수 있는(CPU-Z 같은) 프로그램에서 MMX, [[SSE]], SSE2, SSE3 같은 걸 본 적이 있을 것이다. 이것이 바로 SIMD 기술인데 구체적으로는 해당 기술을 CPU에서 지원한다는 것이다. 최신 샌디브릿지 이상 CPU라면 [[AVX]]도 지원한다. 이 기술을 사용하려면 특수한 레지스터와 특수한 명령을 사용해야 하는데 최신예 컴파일러들은 Loop Unrolling 등의 기술을 통해 자체적으로 SIMD instruction을 사용한 코드로 변환해준다. 단, 코드를 컴파일러가 벡터 연산으로 인식하기 쉽게 작성해주어야 한다. [[인텔]]의 icc, [[마이크로소프트]]의 [["Visual Studio" CL]], [[GNU]] gcc, [[clang]] 등이 컴파일러 옵션을 통해 루프를 SIMD로 변환하는 것을 지원하며, icc의 경우엔 #pragma simd라는 특수한 전처리기를 지원한다.

icc의 경우에는 옵션을 통해 SIMD뿐만이 아니라 루프를 자체적으로 멀티쓰레딩으로 처리해주는 기능이 있으며, 최신 버전의 [[OpenMP]]에서는 SIMD 관련 전처리기를 추가하여 멀티쓰레딩과 SIMD의 두 마리 토끼를 동시에 잡으려는 시도를 하고 있다. 이런 기능을 사용하여 코드 [[최적화]]를 할 경우, 수치연산이 많은 코드는 컴파일러가 400% x 코어 개수 이상으로 성능을 뽑아내게 할 수도 있다. ~~컴파일러는 점점 똑똑해지고 프로그래머는 점점 멍청해진다.~~

=== SIMD 레지스터 ===
[[CPU]]에서 정보를 처리하기 위해서는 반드시 레지스터라고 하는 CPU내부의 임시 기억장소에 데이터를 적재해야 한다. 일반 범용 레지스터로 EAX, EBX, ECX, EDX 같은 게 있고 특수 용도 레지스터로 ESP, EBP 같은게 있는데 이런 것들이 모두 SISD용 레지스터다. SIMD용으로도 레지스터가 존재하며 여러 데이터를 한번에 처리하기 위해 일반 범용 레지스터보다 용량이 크다. xmm0, xmm1 같은 이름이 붙어있고 CPU가 지원하는 기술이 뭐냐에 따라 이 레지스터도 달라진다.

=== SIMD 명령어 ===
위의 SIMD 레지스터에 저장된 데이터를 처리하는 어셈블리 명령어이다. 이것 하나만 실행하면 SIMD 레지스터에 저장된 데이터 전부가 처리돼서 또다른 SIMD 레지스터에 결과값이 저장된다. 예를 들어

{{{
 1. add eax, ebx
 2. paddd xmm0, xmm1
}}}

위 두 명령은 eax += ebx, xmm0 += xmm1으로 서로 같아보인다.
하지만 xmm0 자체가 128비트 SIMD 레지스터이고 paddd 명령어는 128비트 SIMD 레지스터를 32비트 정수 네 개의 배열로 간주하고 연산하라는 뜻이다.[* x86 레지스터 중 r로 시작하는 것들은 64비트, e로 시작하는 것들은 32비트이다.] 2번 연산을 풀어서 쓰자면

{{{
 1. add xmm0[ 00.. 31], xmm1[ 00.. 31]
 2. add xmm0[ 32.. 63], xmm1[ 32.. 63]
 3. add xmm0[ 64.. 95], xmm1[ 64.. 95]
 4. add xmm0[ 96..127], xmm1[ 96..127]
}}}
와 같이 네 번 반복하는 연산이다.[* 32비트 이외에 16비트, 8비트 단위 연산도 가능.] 즉 CPU속도를 이론적으로 4배 끌어올린다.[* 물론 메모리 대역폭에는 제한이 있으므로 정말로 4배까지 올라가진 않지만 CPU에 일단 적재된 데이터는 4배 빨리 처리하는 게 맞다]

[[AVX]]는 ymm0, ymm1 같은 레지스터를 쓰고 연산 명령도 또 다르다. ymm 레지스터는 256bit로 xmm의 두배. 즉 8배 빠르게 연산이 가능하다.

[[AVX-512]]는 AVX의 확장판 같은 개념으로, [[제온 파이]] 나이츠 랜딩(72코어 288쓰레드의 '''CPU''')과 다음 세대 인텔 CPU(스카이레이크)에 들어갈 예정인 SIMD 명령어셋이다. 이름대로 512bit로, 이론상 AVX의 두 배의 속도로 연산을 가능하게 한다. 

=== GPU에서의 SIMD ===

[[GPU]]의 영역에서는 SIMD가 당연시되고 있었다. 거기는 애초에 코어가 몇천 개씩 달려있는 다중프로세서 환경이라서 처음부터 SIMD형식으로 프로그램을 만들어왔다. 그 기능을 고스펙 게임과 슈퍼컴퓨터 등에서 범용적으로 사용하기 위해 개발된 기술이 [[GPGPU]].

=== SIMD 의 한계 ===

한번에 여러 개의 데이터를 묶어서 처리하는 개념이다보니 아무래도 프로그래머가 신경쓸게 많아진다. 예를 들어 데이터 개수가 4 혹은 8로 딱 나눠 떨어지지 않는 경우가 발생하지 않게 구조체에 패딩 바이트를 넣어서 원하는 벡터 크기에 맞춘다거나, malloc을 호출 할 때 벡터 크기의 배수만큼 메모리 할당을 하게 하는 기술을 익혀야 한다.

또한 코드를 작성할 때, 루프를 예쁘게 작성할 수록(CPU의 캐시 크기를 고려한다거나) 프로그램이 빨라지기에 관련된 지식(CPU 아키텍처 수준)을 빠삭하게 알아야 CPU의 진정한 성능을 끌어낼 수 있다는 것이 단점이다. CPU의 SIMD에 대비되는 GPGPU는 [["그런거 없다" 그런거 없이]] 코드를 작성해도 왠만해선 작성한 알고리즘의 극한까지 성능이 나오는 것에 비하면 확실한 단점.

=== .Net Framework 지원 ===

[[Microsoft]]가 시험판인 [[http://aka.ms/RyuJIT 최신 JIT]]을 발표하면서 라이브러리 형태로 SIMD을 사용할 수 있도록 Nuget에서 [[http://www.nuget.org/packages/Microsoft.Bcl.Simd Microsoft.Bcl.Simd]]을 배포하고 있다.

