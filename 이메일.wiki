 * [[인터넷 관련 정보]]

E-MAIL
~~[[왈도체#s-2|전자 갑옷]]~~

[[목차]]
== 개요 ==
[[네트워크]]. 그 중에서도 주로 [[인터넷]]을 이용한 메세지 송수신 규약. [[1978년]]에 발명되었다.

이때까지 이메일을 발명한 사람을 [[인터넷#s-1.2|ARPANET]]의 작업에 참여했던 레이 톰린슨(Ray Tomlinson)이라고 알고 있었으나, 사실은 1978년 당시 14세 인도계 미국 소년 시바 아야두라이(V.A. Shiva Ayyadurai)가 발명했다는 것이 밝혀졌다. [http://news1.kr/articles/?1837395 정확한 이메일의 기원]. 인터넷은 원래 웹 서핑 하려고 만들어졌던 게 아니라, 문자정보를 주고받기 위해 만들어진 네트워크였다. 즉 인터넷의 탄생 목적과 연관이 있다. 메일주소 중간에 [[@|]]를 사용해서 사용자 계정 이름과 이메일 서버 이름을 구분하는 방식 역시 [[1971년]]에 인터넷의 전신인 ARPANET 시절 처음 등장했을 정도로 그 역사가 깊다. 하지만 ARPANET당시엔 전신에 가까운 수준으로 문자만 주고받았으며, 현재처럼 받은/보낸/작성중 편지함 구분과 제목, 내용, 첨부파일 등 양식과 관련된 개념들을 만들어내 편지의 형식을 갖춘 건 시바 아야두라이.

국내에선 인터넷이 대중화되기 이전, 그러니까 [[PC통신]] 시절에도 '전자메일'이라는 이름으로 비슷한 게 있었지만 이 시절에는 서비스 제공자끼리 협조가 안 돼서 같은 서비스 가입자끼리만 주고받을 수 있었다는 점이 좀 다르다. (ex: 이 프로그램을 사용하시다가 궁금하신 점이 있으면 [[천리안#s-3|천리안]] enha0821이나 [[하이텔]] enhaking으로 메일 보내주세요.) 시간이 지나면서 인터넷이 대중화되자 이들 PC통신 서비스도 인터넷 이메일의 편지함을 자사의 전자메일과 연동시키는 방법으로 인터넷에서도 이메일을 주고받을 수 있도록 했다.

[[마이크로소프트|MS]]에서는 이메일을 이메일이라 부르지 않고 전자메일이라는 이름으로 부르지만 이는 PC통신시절과는 달리, MS의 로컬라이징 정책상 e-mail을 풀어 쓴 Electronic Mail을 해석한 것. 메일은 왜 번역하지 않았냐면, 우체국을 통한 편지 전달체계와 직감적으로 구분하기 위해서 그렇다.

== 역할과 위상 ==
기업 대 개인간의 커뮤니케이션 수단(예를 들자면 [[게임 마스터]]같은 거)에서 이메일이 차지하는 비중은 절대적이며, 개인간의 커뮤니케이션 수단으로서의 이메일은 일반 사용자들에게서는 [[메신저#s-5|인스턴트 메신저]]나 [[SNS]]등 기타 다른 채널에 의해 많이 그 위상을 빼앗겼지만, 업무상 메시지 교환에 있어서는 가장 중요한 수단이다(메신저는 휘발성이라 자료남기기 어렵고, SNS는 보안성이 낮다). 그 덕분에 대부분의 경우 중-고-대학생 시절에는 이메일을 거의 '받기만'하지만, 직장인들은 하루에도 많게는 수십, 수백통의 이메일을 보내고 받고 해야 한다. 회사생활 처음 하는 사회초년생들이 가장 애먹는 것 중 하나가 바로 메일 쓰는 요령일 정도. (특히 참조(CC)기능과 전체회신(reply all) 기능을 잘 몰라서 실수하는 경우가 많으니 모르면 지금이라도 한번 찾아보자.)

회사끼리의 메일은 사소한 것이라도 공문에 맞먹는 효력을 가질 수도 있기 때문에 주의해야 한다. 또한 대개 서로 국가에 활동하는 단체간의 계약에서는 이메일이 상대방 메일함에 들어가 있는 사실을 증명할 수 있으면 상대방이 "계약을 인지"한 것으로 판단하기도 한다. 따라서 메일을 읽지 않았다고 계약이 무효화 되는 것은 아니니 직장인이라면 메일함을 정리하는 것을 자기 업무용 책상 정리하듯이 "깔끔히 정리"하는 것이 매우 중요한 일이기도 하다.

== [[ID]] ==
이메일 ID는 여러가지 유형이 있으나 [[기업]]에서는 일반적으로 GDHong, GilDongHONG같이 이름을 쓰는 것이 일반적이다. 아니면 [[박대기]]기자의 WaitingPARK 처럼 이름 직역(…)이나 유명한 별명을 사용하기도 한다. 하지만 뜬금없이 숫자로만 아이디를 구성한다거나 영어, 일본어등의 외국어등으로 구성하게 되면 상대방기업측에서 신뢰를 못받을 확률이 높다. 거래처 담당자 아이디가 뜬금없이 KILLER, FateZZANG이면 상대방이 당황스럽지 않겠는가? 최소한 업무용 메일은 무조건 본명으로 하고, 회사 도메인을 사용하는 게 좋다.

이메일 자동 수집을 막기 위해 @ 대신 (at)를 넣는 경우도 있다. [* 에이콘 출판사에서 나온 "구글해킹 절대내공"에 구글 검색 엔진을 이용한 이메일 자동 수집 방법이 자세히 적혀있다. 물론 책 자체의 목적은 이메일을 수집하라는 게 아니라, 이메일 수집을 피하라는 것(...).]

[[http://tools.ietf.org/html/rfc2822#section-3.4.1 이메일 주소에 대한 표준을 만족하는지 확인하는 정규표현식]]
== 주요 이메일 서비스 제공자들 ==
 * [http://mail.naver.com/ 네이버 메일]
 * [http://mail.daum.net/ 다음 메일(한메일)]
 * [http://mail.nate.com/ 네이트 메일]
 * [http://www.outlook.com/ 마이크로소프트 아웃룩]
 * [http://mail.yahoo.com/ 야후 메일]
 * [http://mail.google.com/ 구글 G메일]
 * ~~[[abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijk.com]]~~
== 주요 이메일 클라이언트 응용프로그램 ==
 * [[Microsoft Outlook]]
 * [[아웃룩 익스프레스]]
 * [[모질라 썬더버드]] - XUL 기반. [[오픈소스 소프트웨어|오픈소스.]]
 * [[실피드]] - GTK+ 기반. [[오픈소스 소프트웨어|오픈소스.]]
 * [[K-9]] - [[안드로이드(운영체제)|안드로이드]]용. [[오픈소스 소프트웨어|오픈소스.]]
== 주요 이메일 서버 응용프로그램 ==
 * [[Dovecot]]
 * [[Microsoft Exchange]]
 * [[OpenSMTPD]]
 * [[Postfix]] 
 * [[qmail]]
 * [[Sendmail]]
== 이메일 송수신 프로토콜 ==
이메일 송수신에 쓰이는 주요 네트워크 프로토콜은 다음과 같은 것들이 있다.

 * 전송 프로토콜
  * [[SMTP]]
  * [[ESMTP]]
 * 수신 프로토콜
  * [[POP]] (대개 [[POP3]]를 말한다)
  * [[IMAP]]
 * 포맷 프로토콜
  * [[MIME]]
  * [[S/MIME]]
  * [[8bit MIME]]

이메일 프로토콜은 크게 나누어 데이터 포맷과 메시지 프로토콜로 나눌 수 있다. 메시지 프로토콜은 이메일의 송신자, 수신자, 내용 등을 명시하는 것이고, 데이터 포맷은 첨부파일 등을 어떻게 전송할 것인지를 지정하는 것이다.

=== 이메일 송수신 ===
이메일은 네트워크 기반 메시지 송수신 서비스로 실세계의 우편 시스템을 모방하고 있다. 따라서 사용자가 직접 메일서버에 접속하지 않으면 메일서버에 수신한 메시지를 전달할 수 있는 방법이 없다. 따라서 이메일 시스템은 사용자가 받는 사람의 메일서버까지 메시지를 보내기 위한 송신 프로토콜과 사용자가 메일서버에 접속하여 메시지를 가져가기 위한 수신 프로토콜이 완전히 별개로 분리되어 있다. 이메일 클라이언트를 설정할 때 보내는 메일 서버(보통 SMTP) 주소와 받는 메일 서버(POP 또는 IMAP) 주소를 따로 등록하는 이유가 이 때문이다.

더불어 한국의 많은 이메일 서비스에서는 메일을 보낸 후에 상대가 읽었는지 안읽었는지를 알려주는 수신확인 서비스를 제공하고 있다. 반면 해외 이메일 서비스를 이용할 경우 수신확인 기능 자체가 없는 것을 볼 수 있으며, 이로 인해 불편함을 호소하는 사람들을 찾아볼 수 있다. 하지만 이에 대해서 한 가지 사실부터 이야기하면 '''현재 이메일 시스템에는 신뢰할 수 있는 수준의 수신확인 방법 자체가 없다.'''

원래 이메일 시스템을 만드는 과정에서 이러한 수신확인 기능을 구현하기 위한 개념은 잡혀 있었다. 또한 ESMTP와 같은 일부 프로토콜에서는 수신확인 요청을 보낼 수 있도록 관련 기능이 포함되어 있다. 하지만 현재 작동중인 거의 모든 메일서버는 이러한 수신확인 기능 자체를 꺼놓거나, 확인 요청이 들어와도 그냥 무시해버리거나, 기능 자체를 아예 미구현 상태로 내버려두기도 한다.

국내에서는 일부 정석적인 방식을 채택하여 수신확인 기능을 제공하는 곳도 있지만 대부분 메일 안에 사용자는 인식하지 못하는 1픽셀짜리 이미지, 통칭 웹버그를 하나 삽입하여 상대가 이 이미지를 읽으면 수신한 것으로 간주하는 방식을 채택하고 있다. 일종의 편법을 이용한 수신확인 시스템인데 이것도 받는 메일서버나 메일 클라이언트에서 메일 내 이미지 표시하지 않기 기능을 적용하여 메시지와 첨부파일 이외의 요소를 필터링해버리면 무력화된다. 게다가 일부 서비스에선 저런 웹버그가 포함된 메일은 [[스팸메일|스팸]]으로 처리한다. 이유는 스팸메일 발송업자들이 실제 사용하는 이메일인지 판별하기 위한 용도로 악용하고 있고, 개인 프라이버시 유출 문제도 겹치기 때문이다. 한 마디로 편리해 보이는 이 기능이 찬밥취급인 이유는 보안문제와 함께 스팸이 범람하는 현대의 네트워크 환경이 주 원인이다.

이메일 프로토콜을 이야기 할 때의 개체는 MDA(Mail Delivery Agent), MTA(Mail Transfer Agent), MUA(Mail User Agent)의 세 가지를 생각한다. MDA는 우편함(메일을 저장하는 로컬 서버), MTA는 우편국(메일을 사용자에게 전달하는 서버), MUA는 우편 수신자(메일 클라이언트)이다.
예를 들어 sender@gmail.com 계정의 사용자가 receiver@naver.com 계정으로 이메일을 보낸다고 하자.

 1. sender는 이메일 클라이언트(MUA)을 통해 gmail서버(MTA)로 접속해 메일을 작성하고 전송 버튼을 누른다.
 2. gmail서버는 네이버 메일서버(MTA)로 메일을 전송한다.
 3. 네이버 메일서버는 내부 저장소(MDA)에 메일을 저장한다.
 4. 네이버 메일서버가 사용자 receiver의 이메일 클라이언트(MUA)로 메일이 왔음을 알린다.
 4. receiver의 이메일 클라이언트(MUA)가 네이버서버에서 메일을 다운로드한다.

이메일을 전송할 때(MUA -> MTA; MTA-> MTA)는 SMTP 혹은 ESMTP 등을 사용하며 메일을 받아올 때(MDA->MUA)는 POP, IMAP 등을 사용한다.

=== 포맷 프로토콜 ===
이메일을 이용해 [[ASCII]] 텍스트 이외의 다른 데이터(유니코드, 영상파일 등)를 보낼 수 있도록 이메일 프로토콜에 맞춘 포맷 형식이다.



