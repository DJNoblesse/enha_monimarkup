 * 상위항목 : ["wiki:스타크래프트"]

[[목차]]

EUD (Extended Unit Death)는 스타크래프트의 맵 제작 기술중 하나이다. 기본적으로 227보다 높은 유닛의 ID의 파괴된 수를 조절하여 데이터 값을 조절하는 기술이다.

== 개요 ==
맵을 어느정도 만들어본 사람이라면 데스테이블을 알 것이다. 데스테이블은 흔히 유닛의 죽은 횟수가 있는데, EUD는 스타크래프트 내에 존재하는 일반적인 유닛ID의 최대수치인 227보다 '''높은''' 유닛의 ID[* 정확히는 어드레스의 데이터 값이지만, 데스테이블은 "유닛을 죽이는 것"이므로 아예 틀린 표현은 아니다.]의 파괴된 수를 조절하여 '''스타크래프트의 데이터 리소스를 해킹 및 조작하는 기술'''이다. 그러므로 EUD는 엄연히 "버퍼 [[오버플로우]]" 해킹기술이다.

EUD는 단순히 마린이나 고스트처럼 실드가 없는 유닛에게 실드를 넣고, 무기와 방어구를 바꾸는 것을 넘어서 구조오프셋[* 해당 유닛의 고유한 오프셋. 쉽게 말해 유닛에게 부여된 고유한 죄수번호라고 표현할 수 있다.]을 찾아 현재 체력이나 마나량 등 세부한 정보도 변경이 가능하며, 이를 포함하여 스타크래프트 내 존재하는 모든 데이터를 수정할 수 있다.[* 당연히 EUD를 사용한다면 모든 데이터값을 어떻게든 바꾸는 것이 가능하기에 이를 이용하여 게임을 끝낸 뒤 강제로 채널이 바뀌거나 인터넷을 열게 만드는 것은 물론, 이를 넘어 게임을 플레이한 유저의 컴퓨터에 바이러스를 심는 것이 가능하기에 (EUD가 최초로 발견된 당시에는 루머였지만, 대부분 진실로 믿었다고 한다) 블리자드측에서는 1.13b 패치로 EUD 실행부를 막아버렸다. 1.16.1 기준 여전히 조건부는 실행이 되지만, 실행부는 EUD Enabler, 혹은 그것을 포함하고 있는 런처와 함께 실행시켜야 한다. 참고로 2015-02-11일자 현재 기준으로 최근에 EUD를 이용한 컴퓨터 종료 유즈맵이 만들어져 논란이 되고 있다.]

자세한 부분에 대해서는 [http://blog.naver.com/itioma/40048393527 EUD의 역사]를 참고할 것.

== EUD의 한계, 그리고 장점과 단점 ==
EUD로 만들어진 맵을 처음 보는 사람이라면 EUD의 한계는 끝이없을 것이라고 말할 수 있겠지만, 사실 EUD에도 그 한계가 존재한다. 그것은 바로 '''스타크래프트 그 자체'''이다. EUD는 '''스타크래프트 내에 존재하는 데이터를 변경'''만 하는 것일 뿐, 아예 새로운 것을 만들거나, 데이터 자체를 삭제시키는 것은 불가능하다. 물론, 최근(2014-10)들어 GRP를 바꿔서 기존 스타크래프트 유닛의 외형에서 벗어나는것이 가능해졌고, 유닛의 외형은 물론 무기 이펙트가 그래픽등, 또한 아이콘과 문자열마저 바꾸는 경지에 이르렀기에 그만큼 EUD로 표현할 수 있는 것은 더욱 많아졌지만, 그것은 그저 '''한동안 숨어있다가 짜잔 하고 보여진 것'''에 불과하다.

최근에는 내부 스크립트(!) 까지도 교체할 수 있다. 외부에서 수정한 스크립트를 삽입할 수 있게 됨으로써 확실하게 EUD의 한계가 더 넓어졌지만, 결국 스타크래프트 내에 존재하는 명령문을 뛰어넘지는 못하는듯.

하지만, EUD는 순전히 데스테이블에 숫자로만 이루어진 플레이어 넘버와 유닛 ID, 그리고 값을 변경한 밸류 3개로만 이루어졌기에 그것이 어떤 데이터값을 변경하는것인지를 적어놓기만 한다면 사실상 굉장히 편리하면서도 상급에 속하는 기술이라 볼 수 있다.

== EUD 배우기 ==
EUD는 겉으로 보면 수학 함수를 배워야 할 것 마냥 접근장벽이 매우 높아보이지만, 의외로 그다지 어려운 편이 아니다. 우선은 준비물과 '''오프셋''' 수집이 중요하다. 오프셋은 EUD의 가장 중심이 되는 것이므로 오프셋만 잘 알아두고 그 오프셋을 다루는 법만 안다면 당신도 언제든지 EUD 맵메이커가 될 수 있다.

기본적으로 EUD Trig만 있어도 되지만, 오프셋을 모으기 위해서는 스타크래프트의 데이터 정보를 담고 있는 DatEdit, 스타크래프트 내 메모리값을 보여주고 동시에 데이터를 조정할 수 있는 아트머니 (혹은 치트엔진)가 필요하다. 특히, 아트머니는 일반적인 유닛의 무기, 공격력, 방어력 등은 물론 음수 플레이어[*플레이어 넘버가 - 아래로 내려가는 것. 급격하게 낮은 음수 플레이어는 클래식 에디터로 확인하면 튕길 수 있다.]로 변환되는, 기본적으로 다루기가 힘든 메모리값도 찾을 수 있다.

혹시, 자신은 수학이 싫다거나 이해가 잘 안된다거나, EUD에 관심이 없다면 이 페이지를 닫거나 뒤로 돌아가도 좋다. EUD는 장벽이 낮지만 대신 그만큼 [wiki:"다이나믹 로동"다이나믹한 로동]을 요구한다.

=== EUDTrig ===
EUD맵을 만들기 위한 필수적인 프로그램[* 요즘(2013년)에는 다른 EUD제작 프로그램이 약간 나오긴 하지만 다른 프로그램들은 [wiki:"듣보잡"] 취급이고 EUD제작 프로그램중에는 이게 가장 유명하고 대중적이다.]. 아이콘은 실드가 달린 마린. 간단하게 EUD트리거 라고 치면 이곳저곳에서 쉽게 받을 수 있다. 최신버전은 1.3이다.

 * Memory Offset
 이곳에 오프셋을 넣는다.

 * Object ID/Len.
 이곳은 오프셋에 더할 수를 넣는다. 이 칸의 개념은 오프셋의 수+오브젝트 ID 이므로 이 칸에 넣을 숫자를 메모리 오프셋에 더한 뒤 비워둬도 상관은 없다.

 또한 옆에는 1~4까지가 있는데, 이것은 바이트라고 한다. 정확하게 말하자면 오브젝트 ID를 곱할 수.
 1Byte; 오브젝트 IDx1
 2Byte; 오브젝트 IDx2
 3Byte; 오브젝트 IDx3
 4Byte; 오브젝트 IDx4

 또한 바이트에 따라 아래의 바이트 오프셋의 색깔이 정해지는데, 이건 밸류값을 얼마나 곱해야 할 지 보여준다. 2개씩 총 8묶음이 있지만 뒤쪽 4묶음은 신경쓰지 않는다.
|| 바이트수 || 바이트 오프셋 || 밸류값 곱할 수 || 밸류값 곱할 수(h) ||
||<|4> 1Byte || '''{{{#red 00}}} 00 00 00   00 00 00 00''' || 1 || 0x1 ||
|| '''00 {{{#red 00}}} 00 00   00 00 00 00''' || 256 || 0x100 ||
|| '''00 00 {{{#red 00}}} 00   00 00 00 00''' || 65536 || 0x10000 ||
|| '''00 00 00 {{{#red 00}}}   00 00 00 00''' || 16777216 || 0x1000000 ||
||<|4> 2Byte || '''{{{#red 00 00}}} 00 00   00 00 00 00''' || 1 || 0x1 ||
|| '''00 {{{#red 00 00}}} 00   00 00 00 00''' || 256 || 0x100 ||
|| '''00 00 {{{#red 00 00}}}   00 00 00 00''' || 65536 || 0x10000 ||
|| '''00 00 00 {{{#red 00   00}}} 00 00 00''' || 16777216 || 0x1000000 ||
||<|4> 3Byte || '''{{{#red 00 00 00}}} 00   00 00 00 00''' || 1 || 0x1 ||
|| '''00 {{{#red 00 00 00}}}   00 00 00 00''' || 256 || 0x100 ||
|| '''00 00 {{{#red 00 00   00}}} 00 00 00''' || 65536 || 0x10000 ||
|| '''00 00 00 {{{#red 00   00 00}}} 00 00''' || 16777216 || 0x1000000 ||
||<|4> 4Byte || '''{{{#red 00 00 00 00}}}   00 00 00 00''' || 1 || 0x1 ||
|| '''00 {{{#red 00 00 00   00}}} 00 00 00''' || 256 || 0x100 ||
|| '''00 00 {{{#red 00 00   00 00}}} 00 00''' || 65536 || 0x10000 ||
|| '''00 00 00 {{{#red 00   00 00 00}}} 00''' || 16777216 || 0x1000000 ||

어느정도 눈치는 챘겠지만, 밸류에 곱할 수가 정해지는 수는 바이트 수만큼 띄어지는것이 아니라 한칸씩 띄어지며, 바이트 수가 1이면 1개가, 바이트 수가 2면 2개, 수가 4면 4개만 색칠해지며, 곱하는 규칙은 앞쪽에 띄어진 칸의 수만큼 밸류값을 곱한다. 즉, 앞쪽에 띄어지지 않았다면 밸류x1, 한칸 띄어졌다면 밸류x256, 두칸 띄어졌다면 밸류x65536, 세칸 띄어졌다면 밸류x16777216. 또한 이 곱하는 수는 1을 빼고 256의 배수이다. 만약 바이트 오프셋이 세칸 띄어졌다면 간단하게 계산기에 256에 세제곱하면 된다.

또한 EUDTrig는 16진수를 기본으로 계산할 수 있으므로 만약 계산하기가 힘들다면 차이를 우선 16진수로 바꾼 뒤 빨간 00이 띄워진 00 갯수만큼 00을 붙이면 된다.

이론적으로, 오프셋 바이트별로 곱해야 할 수는 다음과 같다.
|| 바이트 || 값 || 벨류값 곱할 수 || 벨류값 곱할 수(h) ||
||<|4> 1Byte || 0(+4n) || 1 || 0x1 ||
|| 1(+4n) || 256 || 0x100 ||
|| 2(+4n) || 65536 || 0x10000 ||
|| 3(+4n) || 16777216 || 0x1000000 ||
||<|4> 2Byte || 0(+4n) || 1 || 0x1 ||
|| 1(+4n) || 65536 || 0x10000 ||
|| 2(+4n) || 1 || 0x1 ||
|| 3(+4n) || 65536 || 0x10000 ||
||<|4> 4Byte || 0(+4n) || 1 || 0x1 ||
|| 1(+4n) || 1 || 0x1 ||
|| 2(+4n) || 1 || 0x1 ||
|| 3(+4n) || 1 || 0x1 ||
바이트는 적혀있는 오브젝트 ID의 수를 정해진 바이트 수만큼 곱하는 방식이므로 바이트가 4여도 오브젝트 ID를 4만큼 곱하면 바이트는 1로 해도 상관은 없다.

==== Trigger Exporter ====
EUD Trig를 열면 상단에 'Exporter'라는 문구가 있는데, 이걸 누르면 옆에 창이 하나 더 뜬다. 이제 여기서 EUD 트리거를 만드는 것이다.
참고로, 1.3 기준 아래 산출된 플레이어 넘버를 넣을때 주의해야할 점이 있다. 플레이어 넘버는 무조건 P를 뺀 뒤 1만큼 뺀 값을 넣어야한다. 만약 P5로 나온다면 4를 넣어야한다.

 * 플레이어(Player)
 파괴될 유닛의 플레이어를 설정하는 곳. 1부터 12까지 있으며, 이 칸에 넣을때는 산출된 플레이어넘버에서 1을 뺀 값을 넣어야한다.

 * 유닛 ID(Unit ID)
 파괴될 유닛의 ID를 설정하는 곳. 227 이하는 유닛이고 228 이상은 데이터에 속하므로 정확히는 어떤 데이터를 조작할 지 넣는 부분이다.

 * 비교(Compare)/변형(Modifier)
 조건부에서는 이하(Ar Least)와 이상(Ar Most), 그리고 정확히(Exactly)가 있다. 조건부에서는 대부분 정확히를 사용한다. 실행부에서는 대입(Set To), 더하기(Add), 빼기(Subtract)가 있다. 실행부에서 EUD를 처음 입문하는 초심자에게는 SetTo의 사용을 권하지 않으나, SetTo를 활용하면 한번에 최대 4개의 데이터를 변형시킬 수 있다.

 * 밸류(Value)
 유닛을 얼마나 파괴시킬지 넣는 곳. 바이트 오프셋에 따라 1(0x1), 256(0x100), 65536(0x10000), 16777216(0x1000000)만큼 곱해야 제대로 작동한다. 만약, 이걸 무시하고 그대로 트리거를 저장하면 다른 엉뚱한 유닛에게 적용되는 불상사가 생긴다.


== EUD맵 목록 ==
[EUD 기지지키기]
[EUD 넥서스 부수기]
[EUD 망할 프로브]
[EUD 밀리]
[EUD 벨 누르고 튀기]
[EUD 벽짓고 살아남기]
[EUD 스타크래프트2투혼]
[EUD 시드사운드]
[EUD 우리집에 그들이...]
[EUD 저글링 막기]
[EUD 집에]
[EUD 판타지움]
[EUD 팥슬러그]
[EUD Day & Night breaker]
[EUD Kimchi Warrior]
[EUD Sniper Revolution]
[EUD Zenith Kingdom]
[EUD ICE Defence]

== 오프셋 모음 ==
 * 기본적으로 간단하게 다룰 수 있는 기초 오프셋에 대해서는 [[EUD/오프셋]] 문서를 참고하십시오.
 * 더욱 상세하고 단순하게 다루기가 힘든 고급 오프셋에 대해서는 [[EUD/오프셋 심화]] 문서를 참고하십시오.
 * GRP를 바꾸는 EUD 기술에 대해서는 [[EUD/GRP]] 문서를 참고하십시오.
