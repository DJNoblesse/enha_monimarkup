Arch Linux

[[목차]]

== 개요 ==
[[리눅스]] 배포판 가운데 하나. 주드 비넷(Judd Vinet)이라는 사람이 미니멀리즘으로 유명한 CRUX라는 배포판으로부터 삘을 받아 만들었다. 그러나 어느 시점에서 바쁘다는 이유로 아론 그리핀(Aaron Griffin)에게 관리를 대신 지휘하라고 하고 자신은 손을 뗐다. 그래서 현재 이 배포판의 관리는 아론 그리핀이 지휘하고 있다. 특징으로는 빠른 패키지 업데이트, 미니멀한 설계 등이 있다. 패키지 관리자로는 팩맨을 사용한다.

== 특징 ==
처음 시작할 때 CUI를 띄우는 것 부터 시작해서 손수 세팅할것을 요구하는 배포판이면서도 이만큼의 인기[* Distrowatch.org 기준 항상 안정적으로 10위권 이내(!)]를 구가하는데[* 그것도 2012년 7월 이후에 인스톨러 프레임웍이 사라졌음에도 불구하고]는 다 그럴만한 이유가 있다.

Open Source Watershed 라는곳에서 조사한바에 의하면 유명[* 사실상 누구나 시간이 충분하고 열정만 있으면 공개되어있는 커널소스와 기타 오픈소스 프로그램들을 마음대로 가져다가 자신만의 리눅스 배포판을 만드는게 가능하기때문에 리눅스 배포판이 몇개가 존재하는지는 집계된바도 없고, 아무도 알 수 없기때문에 '모든 리눅스 배포판중에서' 라는 수식어는 당연히 붙을수가 없다. ] 리눅스 배포판중에서는 소프트웨어 업데이트 속도가 가장 빠르다. 직접 소스코드를 다운받아 컴파일하는 방식의 젠투보다도 빠르다![* 이는 젠투의 경우 소스를 받아다가 컴파일하는것은 맞지만, 해당 소스에 젠투식의 패치를 더하는 경우가 많아 소스가 뜨고서도 패치를 더하고 그에 대한 테스트를 하는데 시간이 좀(많이) 걸리는 경우가 많기 때문이다. 사실, Gentoo stable 버전은 업데이트가 상당히 느린편.] 리눅스 커널 메이저 업데이트 등 함부로 업데이트 하기에는 매우 위험한 경우가 아니면 대부분의 소프트웨어가 릴리즈되고 나서 늦어도 며칠 안에 업데이트된다. 업데이트 속도를 위하여 광범위하게 쓰이는 레거시 버전들을 과감히 버리는것도 특징. 그 예를 몇 가지 들자면

 * 용량이 거대하고 업데이트 속도도 빨라서 웬만한 거대배포판들에서도 지원을 안하는 경우가 많은 texlive 나 sage[* 오픈소스 CAS 프로그램 ] 같은 프로그램들을 공식 지원해주기도 한다.
 * 하스켈이라는 프로그래밍 언어는 일반적으로 haskell-platform 이라는 패키지에서 필요한것들을 모두 모아서 제공하고, 대부분의 배포판들이 이것을 가져다 사용할정도로 표준적인 패키지이지만, 아치 리눅스에서는 haskell-platform 에서 제공하는 각 구성물들의 버전이 낮고, 해당 구성물의 업데이트를 하게되면 의존이 만족되지 않는다고 결국 haskell-platform 을 저장소에서 없애고 각 구성물들을 따로 제공하는 방식을 택했다.
 * KDE의 경우 [[https://bbs.archlinux.org/viewtopic.php?id=63925 최신 메이저 버전이 본가보다도 먼저 업로드된 적도 있다.]]

아치리눅스에서는 이런 업데이트 속도를 유지하기 위해 롤링 릴리즈(rolling release) 방식을 사용한다. 일반적인 배포판에서 메이저 버전이 존재하고, 메이저 버전이 올라갈때마다 메이저 업그레이드를 해줘야 최신버전으로 유지가 되는것과 반대로 한번 설치만 해 놓으면 얼마든지 새로운 버전의 프로그램을 받아서 설치할 수 있는것. 그냥 주기적으로 마이너 업데이트만 하다보면 대부분의 소프트웨어들을 항상 최신버전으로 유지할 수 있다는 말이다. ~~pacman -Syu~~우분투나 다른 배포판들을 사용하면서 사용하던 소프트웨어의 새로운 버전이 릴리즈 될때마다 배포판에서 업데이트해주기를 기다리기보다 스스로 먼저 빠르게 업데이트해서 사용하던 사용자라면 아치 리눅스가 구미에 맞을 가능성이 높다. 하지만, 안정성이 중요한 프로덕션 레벨의 시스템이나 서버 용도로는 그만큼 부적합하다. ~~아치리눅스 홈페이지 서버는 아치리눅스인데?~~ 안정성 측면에서 데비안이나, 센트OS와 같은 배포판이 뛰어날 수는 있지만, 아치는 롤릴 릴리즈 방식을 통해 서버를 중단하지 않고서도 최신 업데이트를 따라갈 수 있어, 오히려 서버용으로 적합하다는 의견도 있다. 또한 설치시에 LTS 커널을 설치하도록 하면, 안정성 역시 크게 높아진다. 

또다른 중요한 하나의 특징은 처음 설치를 하면서부터 '''기본적인 틀만 짜놓고 유저가 알아서 자신만의 OS를 만들어간다는 점'''. 다른 메이저 리눅스 배포판들의 경우, 리눅스를 처음 접하는 유저가 사용하기는 편리하지만, 그것을 위해 디폴트로 온갖 쉘스크립트와 데몬으로 중무장시켜놔서리 시스템 세팅을 직접 하려는 유저들에게는 상당히 큰 짜증을 불러일으키는 경우가 많다. 아치 리눅스는 이런 사용자들을 위한 배포판이다. 마냥 불편하고 어려울 것 같지만 아치 위키의 강력한 도움을 받는다면 생각보다 어렵지는 않다. 아치 리눅스의 위키 페이지는 항목 수도 매우 많고 업데이트도 아치 리눅스답게 매우 빠르며, Man page 같이 딱딱하면서 형식적이지도 않아, 유저들의 가려운 부분을 족집게처럼 찔러서 긁어준다. Beginners' guide부터 시작해서 General recommendation까지 끝내고 나면 쓸만한 프로그램은 다 깔려 있으며, 특정 프로그램에 대해서 세팅을 하고 싶다면 해당 위키 페이지[* 다만 마이너한 패키지는 위키 페이지가 없을 수도 있는데, 이 경우는 Man page 와 해당 소프트웨어의 커뮤니티를 이용하면 된다. 하지만 아치 리눅스 내에서도 마이너한 프로그램이라면 특별한 이유가 있지 않은 한 다른 프로그램을 설치하는 게 나은 경우가 많다.]를 뒤져보면 설치법부터 시작해서 자주 쓰는 설정, 웬만큼 세세한 설정법에다가 뭔가 잘 안될 때의 대처법까지 친절하게 설명되어 있어 다른 리눅스를 쓰더라도 버전에 따른 차이만 조금 확인해주면 트윅을 위해서 참고하기에도 좋다. 설치부터 쓸만한 하나의 운영체제가 될 때 까지 만들어가는 게 오래 걸리긴 하지만 운영체제의 구석구석을 돌아다니면서 배울 수 있는 것도 많고, 웬만한 설정파일은 유저의 손을 한번씩 거치므로 뭔가가 꼬였을 때 풀어나갈 수 있는 안목도 기르게 된다. 나만의 운영체제를 완성해 나간다는 성취감은 덤. 그러면서도 이러한 종류의 배포판들이 주로 사용하는, 엄청난 시간을 잡아먹는 소스컴파일 프로그램 인스톨방식이 아닌 바이너리 인스톨 방식을 디폴트로 사용하여, 세팅과 프로그램 인스톨이 매우 편하면서도 파워유저들의 깐깐한 요구사항들을 대부분 충족시켜준다. 다른 옵션을 주고 컴파일하고싶거나 좀더 극한의 최적화를 원하는 사람들을 위해서는 ABS라는 수단을 통해 소스컴파일식으로 설치할 수 있는 방법도 만들어뒀다.

== 패키지 관리 시스템 ==
패키지 관리 시스템은 일반적으로 유명한 데비안 계열로 치자면 APT를 닮은[* 단지 설명을 위해 가져온 예시일 뿐 pacman은 APT와 별 관련 없다. 레드햇 계열의 YUM이나 다른 패키지 관리자와 비교했을 때 딱히 APT에 더 가깝다거나 하는 특징도 없다.] [[팩맨]](pacman)과 [[FreeBSD]] 의 Ports 와 비슷한 ABS(Arch Build System)[* 소스컴파일 방식이라 같은 리눅스 계열 젠투의 Portage 시스템을 연상하는 사람들이 많지만, 실제로는 FreeBSD 의 Ports 에 훨씬 더 가깝다. Arch wiki 에서도 역시 FreeBSD 의 Ports 를 들어 설명하고 있다. 덧붙여, 젠투의 Portage 역시 FreeBSD 의 Ports 시스템을 보고 만든것이다. ]가 있다. [* 여담이지만, OS X에서 오픈 소스 프로그램들을 사용하도록 해주는 MacPorts, Fink, HomeBrew등의 프로젝트도 이 Ports형태를 계승했다. 애플은 저것을 위해 아예 FreeBSD Ports system 만들었던 사람을 따로 채용했다. ]

=== 팩맨 ===
~~뿅뿅거리며 주황색 점을 집어먹고 귀신을 퇴치한다~~
팩맨(pacman)[* PACkage MANager]은 아치 리눅스의 패키지 관리자인데, 아치 리눅스의 특징을 빼닮아서 CUI방식이 기본이다. 이런저런 옵션을 사용한다면 다른 배포판의 패키지 관리자에도 꿇리지 않지만 그거 다 외우기는 힘들단 게 문제(...) 게다가 다른 패키지 관리자도 CUI를 웬만큼은 지원하기 때문에 큰 특징이라고 말하기는 힘들다. GUI형태로 패키지를 관리할 수 있도록 도와주는 프로그램도 있지만 공식 GUI프로그램은 없기 때문에 약간은 불편한 게 사실. 그래서 아치리눅스 유저라면 pacman 명령어는 손에 익어 있을 정도(...) 진짜 pacman만의 특징이라면 역시나 아치 리눅스의 패키지 관리자 답게 설정 파일을 섬세하게 다뤄 준다는 것. 패키지를 설치/삭제/업데이트 하는 과정에서 사용자가 손댄 흔적이 있는 설정 파일이 수정될 경우 절대로 알아서 만져주지 않고 pacorig/pacsave/pacnew파일을 통해 사용자가 알아서 수정하도록 한다. 예를 들어 패키지를 업데이트 하는 중 어떤 설정 파일을 수정해야 하는데 기존 패키지의 내용물과도 다르고 새 패키지의 내용물과도 다를 경우 경고문 하나 띄워 주고 .pacnew를 붙인 파일을 생성해 주는 식. 어찌 보면 불친절한 것 같지만 웬만한 배포판에서 메이저 업데이트로 전체 프로그램들이 죄다 새 버전으로 업데이트 될 경우 설정파일이 죄다 엉망이 되는 걸 생각해 보자. 설정 파일 하나하나가 사용자의 고심이 들어간 결과물인 아치리눅스의 특성상 함부로 손댈 수도 없는 일이기도 하다. 여담이지만, 팩맨의 설정 중에는 진행 표시줄을 팩맨 캐릭터[* CUI이니만큼 진짜 캐릭터가 뜨는건 아니고 한 칸 움직일때마다 대문자C와 소문자c가 번갈아가며 나타난다] 가 오른쪽으로 움직이면서 점을 잡아먹는 모양으로 바꿔주는 것도 있다(...)

=== ABS ===
ABS 는 FreeBSD 의 Ports 와 비슷하게, 디렉토리 구조로 이루어진 각 패키지의 메타데이터(의존, 소스 주소, 빌드 스크립트 등)를 싱크한 후, 해당 디렉토리로 들어가서 makepkg 명령으로 빌드한 후 그것을 pacman 으로 인스톨하는 방식이다. pacman 으로 인스톨하는 과정만 빼면 FreeBSD 와 동일한것같지만, FreeBSD 처럼 재귀적으로 의존을 찾아 컴파일해준다거나 컴파일 옵션을 인스톨 도중 인터랙티브하게 선택이 가능하거나 한 구조는 아니고, 보다 원시적으로 해당 디렉토리의 PKGBUILD 파일을 직접 에디트하여 인스톨하는 방식이며, 필요한 의존패키지까지 찾아서 컴파일하는 방식도 아니고, 그러한 의존은 pacman 으로 바이너리 인스톨 한 후, 해당 패키지 자체만 컴파일하는 방식이다. 애초에 소스 컴파일방식의 인스톨이 메인이 되는 FreeBSD 와 달리, 바이너리 인스톨이 메인인 아치 리눅스인지라, ABS 는 사실 원하는 유저에게 원하는 패키지만 소스컴파일 인스톨을 지원하는 일종의 옵션서비스에 더 가깝다. 

=== AUR ===
AUR이라는 별도의 저장소에 업로드된 패키지들을 설치하는게 가능한데, AUR 은 pacman 이나 ABS에서 사용하는 공식적으로 관리되는 패키지들이 아닌, 유저들이 올리는것들이라 100% 문제없이 잘돌아간다고 확신하기도 힘들고, 업데이트도 제대로 안되는경우가 꽤 있다. 그러나, 우분투등 거대 배포판들에 비해 pacman 이나 ABS 에서 제공하는 패키지의 수가 많이 적기때문에 pacman 저장소에 없는 다양한것들을 제공해주는 AUR 은 반드시 필요한것중 하나라고 볼 수 있다[* 예를 들어 한글 폰트 같은 경우, pacman은 백묵 폰트 밖에 가지고 있지 않아서, 현재 대세로 쓰이는 은폰트나 나눔고딕 등 미려한 폰트는 AUR을 이용해야 한다.]. 기본적으로 pacman 과 같은 바이너리 다운로드 방식이 아닌 ABS 식의 소스컴파일 방식을 이용한다. AUR 까지 포함하면 온갖 트윅과 패치는 물론이고, 웬만한 메이저 배포판들을 압도하는 수준의 패키지 양을 자랑한다. 그러나, 패키지를 관리하는 사람에 따라 제때 업데이트를 올려주지 않기도 하고 패키지가 꼬이는 경우도 생기기 때문에 그냥 유저가 git 이나 cvs 등의 버전컨트롤 소프트웨어를 이용하여 직접 인스톨하는게 나은 경우도 종종 있다. (...) 패키지를 설치하기 전 out-of-date로 신고되지는 않았는지, 의견란에 다른 프로그램과의 충돌 등의 문제가 제기되어 있지는 않은지 먼저 확인해보도록 하자. AUR에 투표를 해 주면 표가 많은 패키지는 주기적으로 공식 저장소에 등록되니 마음에 드는 패키지에는 열심히 투표해 주자.
AUR의 패키지를 설치할 때 번거로운 과정을 생략하기 위해 Yaourt같은 자동 관리 패키지도 존재한다. [https://wiki.archlinux.org/index.php/AUR_Helpers #] 

=== 업데이트 속도 ===
빠른 업데이트는 물론 좋은것이기도 하지만, 바꿔말하면 배포판 자체의 내부적인 안정성이나 버그테스팅 기간이 그만큼 짧다고 볼 수 있고, 덕분에 이리저리 꼬일 가능성도 배제하지 못하기때문에 안정성측면에서는 불안한감이 있을 수 있다. 특히 본격적인 프로덕션 레벨의 머신이라면 아치 리눅스를 사용하는것을 조금 고려해보는것이 옳다. 이 경우, 업데이트된 소프트웨어가 완전히 ok 사인이 나오기 전까지는 레거시 버전을 사용하는것이 일반적이라 버전업 속도가 빠른것이 오히려 불편할 수 있기 때문이다. 실예로 프로덕션 레벨에서 많이 이용되는 레드햇 엔터프라이즈 리눅스나 이를 본떠 배포하는 CentOS의 경우, 최신 버젼이라도 다른 배포판과 비교하면 어이가 없을 정도로 뒤쳐지는 것들이 많다. 

하지만, 데스크탑의 경우 실제 그런 문제가 발생하는 빈도는 사실 상당히 적으며, 발생하더라도 롤링 릴리즈 배포판답게 매우 빠르게 해결된다. 이런 '''업스트림 소스에 존재하는 버그를 해결하는 가장 빠른 방법은 바로 빠른 업데이트'''이기 때문. 따라서 어떤면에서 보면 오픈소스 특성상 빠른 업데이트가 더 안정적이라 볼수도 있다.

테스팅 기간이 길다고 만사는 아니다. 소수의 열정적인 프로그래머들의 자투리 시간에 만들어지는 경우가 많은 오픈소스 소프트웨어 특성상 $$ 로 밀어부치는 상용 소프트웨어에 비해 버그가 존재할 가능성이 높다. 그리고, 배포판에서 제아무리 테스팅 기간을 오래잡고 엄밀하게 테스트한다 해도, 그건 그저 프로그램이 돌아가는데 있어 배포판 자체적인 문제가 있는가의 테스트정도일뿐, 업스트림 소스에 존재하는 그런 버그를 직접 고치는 경우는 거의 없다. 많이 해준다 해도 그저 원저자에게 버그리포팅을 해주는게 전부인 경우가 대부분이라, 사실 아무리 테스팅 기간을 길게잡고 엄밀하게 테스트를 한다해도 어차피 실 사용자들이 상용 소프트웨어처럼 안정적이고 부드럽게 돌아간다고 느끼기는 힘들다.

우분투등과 같이 버전업 사이클이 정해진 배포판에서는 일반적으로 해당 버전을 내기 전에 보다 엄밀하게 테스팅을 하지만, 일단 등장한 이후에는 버그가 발견되더라도 공식적 수정은 긴급한 보안 패치가 아닌 한 다음 버전업 사이클이나 돼야 만나볼 수 있다. 덕분에 자주 사용하는 패키지들은 엄밀한 테스트로 매우 안정적이지만, 그렇지 못한 패키지의 경우는... [* 덕분에 마이너(?) 언어권이라 볼 수 있는 한국의 경우 한글관련 문제가 심심찮게 발생한다. 예를 들어 단어를 입력하다 보면 다음 글자가 입력되는 대신 바로 최근 글자를 커서가 먹어버린다던가...] 이런식으로 배포판과의 충돌이 아닌, 프로그램 자체의 특정 버그로 골머리를 썩고있고, 버그픽스된 신버전이 나온 경우, 배포판에서 업데이트 되기를 한세월 기다리거나 수동으로 직접 설치하고 관리해야 하는데. 어느쪽이나 사실 매우 짜증나는 일이다(게다가 괜히 설치했다가 세팅 파일 같은게 꼬여서 유실되기라도 하면...). 상당수의 소프트웨어들이 업스트림 소스가 업데이트 되고나서 며칠 안 되어 저장소에 업데이트되는 아치 리눅스의 경우 이런면에서 상당히 자유롭고 편리하다 볼 수 있다.

빠른 업데이트로 이득을 보는 또 한가지 경우는 아직 대세가 되지 못한 프로그램을 설치해서 실험해 보기 좋다는 것이다. 새로운 프로그램일수록 새 시스템에 맞게 만들어져 있고, 또 단순한 프론트엔드가 아닌 이상 그 프로그램을 받쳐 주는 다른 프로그램이 있어야 설치해서 효과를 보는데 프로그램 자체를 컴파일하는것도 모자라 이런 환경을 갖춰 주는것도 쉬운 일이 아니다. 이쪽으로 가장 대표적인 예는 현재 리눅스 그래픽계의 표준인 X.org[* GNOME이니 KDE니 해도 쉘 기반이 아닌 이상 다 이걸 거치게 되어 있다. 80년대 작품이니 거듭된 패치로 그 몸뚱이도 심히 비대하고 설계부터 비효율적인 부분도 있다]를 대체할 것으로 기대되는 Wayland. KDE나 GNOME같은 대형 DE도 시스템상 큰 비중을 차지하므로 다른 배포판에선 쉽게 건드릴 수 없는 부분이라 메이저 업데이트가 이루어질 경우 아치리눅스가 거의 가장 먼저 혜택을 보게 된다.

원작자의 관심 부족으로 업데이트 속도의 초점이 유명 배포판 한두개 정도에만 맞춰져 있는 경우도 있다. 오히려 이 경우는 빠른 업데이트가 어울리지 않는 경우.라이선스 업데이트를 하지 않고 구버젼을 지속적으로 사용해야 하는 ~~그놈의 라이센싱...~~ 어플리케이션(예를 들어 Cadence 의 OrCAD프로그램들이나 Silvaco의 TCAD프로그램들)이나 업데이트가 더 이상 제공되지 않는 프로그램들의 경우, 도리어 구 버젼의 OS를 사용해야 정상 작동을 보장하는 경우도 있다. ~~참고로 이 프로그램들의 인터페이스는 90년도 GUI수준이다...~~ 이런 프로그램을 억지로 쓰고자 한다면 일반적인 배포판 버전으로도 커버가 안되고 옛날 OS까지 꺼내야 하는 경우가 많은데, 이 경우 구식 시스템이 보안상 문제를 일으킬 수 있기 때문에 아예 인터넷 연결 없이 작동시킬 게 아니라면 대체 프로그램을 찾는 것이 낫다.

== 아치 기반의 배포판 ==
참고로 아치리눅스측에서는 주제의 통일성을 위해 아치 이외의 배포판 관련 내용을 위키나 포럼에 올리는 것을 금하고 있다. 아래의 '아치 기반 배포판'들도 마찬가지이니 실수하지 말 것. 
=== ArchBang ===
http://archbang.org/

아치 리눅스를 기반으로 사용 편의성이 약간 강화된 배포판. 경량화 지향이라 오픈박스 윈도우 매니저같은 매우 가벼운 X데스크탑 환경을 기반으로 세팅되어 있다. 또한, 인스톨 프레임웍(GUI 비슷한 인스톨 인터페이스. 예전 레드햇의 아나콘다와 비슷하다)을 지원하는 관계로 일일히 명령어를 입력할 일은 없으니 설치가 용이하다. 또한, 아치 리눅스와 동일한 롤링 릴리즈를 지원하므로 빠른 업데이트라는 장점은 그대로 가지고 있는 셈. 물론, 그 뿌리가 뿌리인만큼 우분투 같은 배포판 보다 손볼 점은 많을 수 밖에. 그래도 아치리눅스의 저장소도 그대로 쓸 수 있으니 아치의 특징을 살리며 경량화 및 편의성의 접점을 추구하는 배포판이라 할 수 있다. 즉 초보자들이 아치를 접하기에 좀 더 쉬운 배포판이라 할 수 있다.

=== Arch Linux ARM ===
http://www.archlinuxarm.org

줄여서 아치암(Arch ARM)이라고도 한다. 아치 리눅스는 x86/x86-64만 지원하는 데 반해 ARM 아키텍쳐에서 돌아갈 수 있도록 포팅한 배포판. ARM 아키텍쳐는 대부분 제품별로 각자 특색[* 부팅방법, 하드웨어 드라이버 등]이 있으므로 설치이미지를 각각 제공하며, 그만큼 각 제품에 대한 최적화도 갖춰져 있다. 제품별로 커널 이미지/드라이버도 패키지로 만들어 자주 업데이트 되는 편. 다만 활발한 테스팅은 이루어지지 않는지 커널 버전은 기기에 따라 뒤쳐져 있는 경우도 많다. ARMv5, ARMv6, ARMv7 지원.

=== 기타 ===
그 외 다른 아치리눅스 기반 배포판을 보려면 여기로. 전부 롤링 릴리즈의 장점을 그대로 흡수할 수 있다는 장점이 있으므로, 만일 아치 리눅스가 너무 어렵다고 생각되면 여기서 대체를 찾아보는 것도 좋다. 심지어 아랍어 아치도 있다!
https://wiki.archlinux.org/index.php/Arch_Based_Distributions
KDE 환경을 선호한다면 Chakra, 우분투와 비슷한 환경을 선호한다면 Cinnarch 추천

== 외부 링크 ==
[[http://www.archlinux.org|아치리눅스 사이트]]
[[http://arch.korea.com|아치리눅스 한국 사용자 모임]]
[[https://www.facebook.com/groups/209649889102833/|아치리눅스 한국 사용자 모임 페이스북 페이지]]
아치리눅스 특성상 문제 해결법이 있어도 문제 자체가 없어지거나 시스템이 변경되는 등으로 오래가지 못하는 경우가 많으므로 이곳에 서술하기보다는 위 사이트에 글을 올려주시기 바랍니다.

